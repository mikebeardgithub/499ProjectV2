
C:\stm32_workspace\audio_test_01\Debug\audio_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000347c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
  7 .bss          000003ac  20000064  20000064  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000410  20000410  00020064  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008468  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000187c  00000000  00000000  000284fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a68  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  0002a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003eb9  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003916  00000000  00000000  0002efe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  000328f7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a70  00000000  00000000  000329e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  00035458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035ec 	.word	0x080035ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	080035ec 	.word	0x080035ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78db      	ldrb	r3, [r3, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d038      	beq.n	8000a8a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <NVIC_Init+0xbc>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	f1c3 0304 	rsb	r3, r3, #4
 8000a2c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a2e:	7b7a      	ldrb	r2, [r7, #13]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	fa42 f303 	asr.w	r3, r2, r3
 8000a36:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	789a      	ldrb	r2, [r3, #2]
 8000a4a:	7b7b      	ldrb	r3, [r7, #13]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <NVIC_Init+0xc0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <NVIC_Init+0xc0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	095b      	lsrs	r3, r3, #5
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a88:	e00f      	b.n	8000aaa <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a8a:	490c      	ldr	r1, [pc, #48]	; (8000abc <NVIC_Init+0xc0>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	095b      	lsrs	r3, r3, #5
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aa2:	f100 0320 	add.w	r3, r0, #32
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000aee:	4313      	orrs	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <ADC_Init+0xa8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b12:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b18:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	795b      	ldrb	r3, [r3, #5]
 8000b1e:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b20:	4313      	orrs	r3, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b3a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	051b      	lsls	r3, r3, #20
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	c0fff7fd 	.word	0xc0fff7fd

08000b6c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <ADC_CommonInit+0x48>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <ADC_CommonInit+0x4c>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b8e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000b94:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000b9a:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <ADC_CommonInit+0x48>)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6053      	str	r3, [r2, #4]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40012300 	.word	0x40012300
 8000bb8:	fffc30e0 	.word	0xfffc30e0

08000bbc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000bda:	e005      	b.n	8000be8 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 0201 	bic.w	r2, r3, #1
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	609a      	str	r2, [r3, #8]
  }
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	70fb      	strb	r3, [r7, #3]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70bb      	strb	r3, [r7, #2]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	d923      	bls.n	8000c64 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	f1a3 020a 	sub.w	r2, r3, #10
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	2207      	movs	r2, #7
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c40:	7879      	ldrb	r1, [r7, #1]
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	f1a3 020a 	sub.w	r2, r3, #10
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	e01e      	b.n	8000ca2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	2207      	movs	r2, #7
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c84:	7879      	ldrb	r1, [r7, #1]
 8000c86:	78fa      	ldrb	r2, [r7, #3]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000ca2:	78bb      	ldrb	r3, [r7, #2]
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d821      	bhi.n	8000cec <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000cae:	78bb      	ldrb	r3, [r7, #2]
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	221f      	movs	r2, #31
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000cca:	78f9      	ldrb	r1, [r7, #3]
 8000ccc:	78bb      	ldrb	r3, [r7, #2]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000cea:	e047      	b.n	8000d7c <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000cec:	78bb      	ldrb	r3, [r7, #2]
 8000cee:	2b0c      	cmp	r3, #12
 8000cf0:	d821      	bhi.n	8000d36 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000cf8:	78bb      	ldrb	r3, [r7, #2]
 8000cfa:	1fda      	subs	r2, r3, #7
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000d14:	78f9      	ldrb	r1, [r7, #3]
 8000d16:	78bb      	ldrb	r3, [r7, #2]
 8000d18:	1fda      	subs	r2, r3, #7
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d34:	e022      	b.n	8000d7c <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000d3c:	78bb      	ldrb	r3, [r7, #2]
 8000d3e:	f1a3 020d 	sub.w	r2, r3, #13
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	221f      	movs	r2, #31
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d5a:	78f9      	ldrb	r1, [r7, #3]
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	f1a3 020d 	sub.w	r2, r3, #13
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000da6:	e005      	b.n	8000db4 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	609a      	str	r2, [r3, #8]
  }
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000dde:	e005      	b.n	8000dec <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  }
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <DAC_Init+0x64>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000e10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e30:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <DAC_Init+0x64>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007400 	.word	0x40007400

08000e60 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2001      	movs	r0, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000e84:	e009      	b.n	8000e9a <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <DAC_Cmd+0x48>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	fa00 f303 	lsl.w	r3, r0, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4013      	ands	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007400 	.word	0x40007400

08000eac <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <DAC_SetChannel1Data+0x34>)
 8000ebe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40007400 	.word	0x40007400

08000ee4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 0201 	bic.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2221      	movs	r2, #33	; 0x21
 8000f1a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <DMA_DeInit+0x154>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d103      	bne.n	8000f2c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000f24:	4b45      	ldr	r3, [pc, #276]	; (800103c <DMA_DeInit+0x158>)
 8000f26:	223d      	movs	r2, #61	; 0x3d
 8000f28:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f2a:	e07e      	b.n	800102a <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <DMA_DeInit+0x15c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d104      	bne.n	8000f3e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000f34:	4b41      	ldr	r3, [pc, #260]	; (800103c <DMA_DeInit+0x158>)
 8000f36:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000f3a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f3c:	e075      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a40      	ldr	r2, [pc, #256]	; (8001044 <DMA_DeInit+0x160>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d104      	bne.n	8000f50 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <DMA_DeInit+0x158>)
 8000f48:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000f4c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f4e:	e06c      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <DMA_DeInit+0x164>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d104      	bne.n	8000f62 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <DMA_DeInit+0x158>)
 8000f5a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000f5e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f60:	e063      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <DMA_DeInit+0x168>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d103      	bne.n	8000f72 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <DMA_DeInit+0x158>)
 8000f6c:	4a38      	ldr	r2, [pc, #224]	; (8001050 <DMA_DeInit+0x16c>)
 8000f6e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f70:	e05b      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a37      	ldr	r2, [pc, #220]	; (8001054 <DMA_DeInit+0x170>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <DMA_DeInit+0x158>)
 8000f7c:	4a36      	ldr	r2, [pc, #216]	; (8001058 <DMA_DeInit+0x174>)
 8000f7e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f80:	e053      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a35      	ldr	r2, [pc, #212]	; (800105c <DMA_DeInit+0x178>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d103      	bne.n	8000f92 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <DMA_DeInit+0x158>)
 8000f8c:	4a34      	ldr	r2, [pc, #208]	; (8001060 <DMA_DeInit+0x17c>)
 8000f8e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000f90:	e04b      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <DMA_DeInit+0x180>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d104      	bne.n	8000fa4 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <DMA_DeInit+0x158>)
 8000f9c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000fa0:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fa2:	e042      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <DMA_DeInit+0x184>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d103      	bne.n	8000fb4 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <DMA_DeInit+0x188>)
 8000fae:	223d      	movs	r2, #61	; 0x3d
 8000fb0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fb2:	e03a      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <DMA_DeInit+0x18c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d104      	bne.n	8000fc6 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <DMA_DeInit+0x188>)
 8000fbe:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000fc2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fc4:	e031      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <DMA_DeInit+0x190>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d104      	bne.n	8000fd8 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <DMA_DeInit+0x188>)
 8000fd0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000fd4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fd6:	e028      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a27      	ldr	r2, [pc, #156]	; (8001078 <DMA_DeInit+0x194>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d104      	bne.n	8000fea <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <DMA_DeInit+0x188>)
 8000fe2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000fe6:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fe8:	e01f      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <DMA_DeInit+0x198>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d103      	bne.n	8000ffa <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <DMA_DeInit+0x188>)
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <DMA_DeInit+0x16c>)
 8000ff6:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ff8:	e017      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a20      	ldr	r2, [pc, #128]	; (8001080 <DMA_DeInit+0x19c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d103      	bne.n	800100a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <DMA_DeInit+0x188>)
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <DMA_DeInit+0x174>)
 8001006:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001008:	e00f      	b.n	800102a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <DMA_DeInit+0x1a0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d103      	bne.n	800101a <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <DMA_DeInit+0x188>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <DMA_DeInit+0x17c>)
 8001016:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001018:	e007      	b.n	800102a <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <DMA_DeInit+0x1a4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d103      	bne.n	800102a <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <DMA_DeInit+0x188>)
 8001024:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001028:	60da      	str	r2, [r3, #12]
    }
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40026010 	.word	0x40026010
 800103c:	40026000 	.word	0x40026000
 8001040:	40026028 	.word	0x40026028
 8001044:	40026040 	.word	0x40026040
 8001048:	40026058 	.word	0x40026058
 800104c:	40026070 	.word	0x40026070
 8001050:	2000003d 	.word	0x2000003d
 8001054:	40026088 	.word	0x40026088
 8001058:	20000f40 	.word	0x20000f40
 800105c:	400260a0 	.word	0x400260a0
 8001060:	203d0000 	.word	0x203d0000
 8001064:	400260b8 	.word	0x400260b8
 8001068:	40026410 	.word	0x40026410
 800106c:	40026400 	.word	0x40026400
 8001070:	40026428 	.word	0x40026428
 8001074:	40026440 	.word	0x40026440
 8001078:	40026458 	.word	0x40026458
 800107c:	40026470 	.word	0x40026470
 8001080:	40026488 	.word	0x40026488
 8001084:	400264a0 	.word	0x400264a0
 8001088:	400264b8 	.word	0x400264b8

0800108c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <DMA_Init+0xac>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80010b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f023 0307 	bic.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60da      	str	r2, [r3, #12]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	f01c803f 	.word	0xf01c803f

0800113c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800115a:	e005      	b.n	8001168 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 0201 	bic.w	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
  }
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <DMA_GetFlagStatus+0x6c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d802      	bhi.n	8001194 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <DMA_GetFlagStatus+0x70>)
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e001      	b.n	8001198 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <DMA_GetFlagStatus+0x74>)
 8001196:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e002      	b.n	80011b0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80011c6:	2301      	movs	r3, #1
 80011c8:	75fb      	strb	r3, [r7, #23]
 80011ca:	e001      	b.n	80011d0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	4002640f 	.word	0x4002640f
 80011e4:	40026000 	.word	0x40026000
 80011e8:	40026400 	.word	0x40026400

080011ec <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <DMA_ClearFlag+0x50>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d802      	bhi.n	8001204 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <DMA_ClearFlag+0x54>)
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e001      	b.n	8001208 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <DMA_ClearFlag+0x58>)
 8001206:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001218:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001220:	e006      	b.n	8001230 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001228:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	6093      	str	r3, [r2, #8]
  }    
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	4002640f 	.word	0x4002640f
 8001240:	40026000 	.word	0x40026000
 8001244:	40026400 	.word	0x40026400

08001248 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00f      	beq.n	8001280 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	e005      	b.n	8001280 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b80      	cmp	r3, #128	; 0x80
 8001284:	d014      	beq.n	80012b0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f003 031e 	and.w	r3, r3, #30
 8001296:	431a      	orrs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 800129c:	e008      	b.n	80012b0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031e 	and.w	r3, r3, #30
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <EXTI_Init+0xe0>)
 80012ca:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d04f      	beq.n	8001374 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80012d4:	4931      	ldr	r1, [pc, #196]	; (800139c <EXTI_Init+0xe0>)
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <EXTI_Init+0xe0>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80012e4:	492d      	ldr	r1, [pc, #180]	; (800139c <EXTI_Init+0xe0>)
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <EXTI_Init+0xe0>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	6811      	ldr	r1, [r2, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800130e:	4923      	ldr	r1, [pc, #140]	; (800139c <EXTI_Init+0xe0>)
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <EXTI_Init+0xe0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	43db      	mvns	r3, r3
 800131a:	4013      	ands	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800131e:	491f      	ldr	r1, [pc, #124]	; (800139c <EXTI_Init+0xe0>)
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <EXTI_Init+0xe0>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	43db      	mvns	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	795b      	ldrb	r3, [r3, #5]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d10e      	bne.n	8001354 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001336:	4919      	ldr	r1, [pc, #100]	; (800139c <EXTI_Init+0xe0>)
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <EXTI_Init+0xe0>)
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001344:	4915      	ldr	r1, [pc, #84]	; (800139c <EXTI_Init+0xe0>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <EXTI_Init+0xe0>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001352:	e01d      	b.n	8001390 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <EXTI_Init+0xe0>)
 8001356:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	795b      	ldrb	r3, [r3, #5]
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	6811      	ldr	r1, [r2, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001372:	e00d      	b.n	8001390 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	43d2      	mvns	r2, r2
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
  }
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40013c00 	.word	0x40013c00

080013a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e076      	b.n	80014aa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80013bc:	2201      	movs	r2, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d165      	bne.n	80014a4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2103      	movs	r1, #3
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <GPIO_Init+0x76>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d12e      	bne.n	8001474 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2103      	movs	r1, #3
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	795b      	ldrb	r3, [r3, #5]
 8001434:	4619      	mov	r1, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	b29b      	uxth	r3, r3
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	799b      	ldrb	r3, [r3, #6]
 8001462:	4619      	mov	r1, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	b29b      	uxth	r3, r3
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	b29b      	uxth	r3, r3
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2103      	movs	r1, #3
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	79db      	ldrb	r3, [r3, #7]
 8001494:	4619      	mov	r1, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d985      	bls.n	80013bc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	887a      	ldrh	r2, [r7, #2]
 800150a:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800150c:	e002      	b.n	8001514 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	887a      	ldrh	r2, [r7, #2]
 8001512:	835a      	strh	r2, [r3, #26]
  }
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001538:	787a      	ldrb	r2, [r7, #1]
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	210f      	movs	r1, #15
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	ea02 0103 	and.w	r1, r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f100 0208 	add.w	r2, r0, #8
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <I2C_DeInit+0x68>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10a      	bne.n	80015da <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80015c4:	2101      	movs	r1, #1
 80015c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015ca:	f000 fb31 	bl	8001c30 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80015ce:	2100      	movs	r1, #0
 80015d0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015d4:	f000 fb2c 	bl	8001c30 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80015d8:	e01c      	b.n	8001614 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <I2C_DeInit+0x6c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10a      	bne.n	80015f8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015e8:	f000 fb22 	bl	8001c30 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80015ec:	2100      	movs	r1, #0
 80015ee:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015f2:	f000 fb1d 	bl	8001c30 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80015f6:	e00d      	b.n	8001614 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <I2C_DeInit+0x70>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d109      	bne.n	8001614 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001600:	2101      	movs	r1, #1
 8001602:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001606:	f000 fb13 	bl	8001c30 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800160a:	2100      	movs	r1, #0
 800160c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001610:	f000 fb0e 	bl	8001c30 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005400 	.word	0x40005400
 8001620:	40005800 	.word	0x40005800
 8001624:	40005c00 	.word	0x40005c00

08001628 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001636:	2300      	movs	r3, #0
 8001638:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800163a:	2304      	movs	r3, #4
 800163c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <I2C_Init+0x174>)
 8001640:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800164a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800164e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f9e1 	bl	8001a1c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <I2C_Init+0x178>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800166a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800166c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800166e:	4313      	orrs	r3, r2
 8001670:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001676:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <I2C_Init+0x17c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d815      	bhi.n	80016c2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80016a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d801      	bhi.n	80016ae <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80016aa:	2304      	movs	r3, #4
 80016ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80016ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016b2:	4313      	orrs	r3, r2
 80016b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80016b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016b8:	3301      	adds	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	841a      	strh	r2, [r3, #32]
 80016c0:	e040      	b.n	8001744 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	88db      	ldrh	r3, [r3, #6]
 80016c6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d109      	bne.n	80016e2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80016e0:	e00e      	b.n	8001700 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80016f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800170a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001716:	4313      	orrs	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800171e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001722:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <I2C_Init+0x180>)
 8001730:	fb82 1203 	smull	r1, r2, r2, r3
 8001734:	1192      	asrs	r2, r2, #6
 8001736:	17db      	asrs	r3, r3, #31
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001748:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001762:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001766:	f023 0302 	bic.w	r3, r3, #2
 800176a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	889a      	ldrh	r2, [r3, #4]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	895b      	ldrh	r3, [r3, #10]
 8001774:	4313      	orrs	r3, r2
 8001776:	b29a      	uxth	r2, r3
 8001778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177a:	4313      	orrs	r3, r2
 800177c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001782:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	899a      	ldrh	r2, [r3, #12]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	891b      	ldrh	r3, [r3, #8]
 800178c:	4313      	orrs	r3, r2
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	811a      	strh	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	000186a0 	.word	0x000186a0
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80017ce:	e007      	b.n	80017e0 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	801a      	strh	r2, [r3, #0]
  }
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800180e:	e007      	b.n	8001820 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	801a      	strh	r2, [r3, #0]
  }
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001848:	b29a      	uxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800184e:	e007      	b.n	8001860 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800185a:	b29a      	uxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	801a      	strh	r2, [r3, #0]
  }
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
 8001878:	4613      	mov	r3, r2
 800187a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	70fb      	strb	r3, [r7, #3]
 800188a:	e003      	b.n	8001894 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	821a      	strh	r2, [r3, #16]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80018ca:	e007      	b.n	80018dc <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	801a      	strh	r2, [r3, #0]
  }
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	821a      	strh	r2, [r3, #16]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	8a1b      	ldrh	r3, [r3, #16]
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8a9b      	ldrh	r3, [r3, #20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	8b1b      	ldrh	r3, [r3, #24]
 800194a:	b29b      	uxth	r3, r3
 800194c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800195e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	401a      	ands	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d102      	bne.n	8001972 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800196c:	2301      	movs	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
 8001970:	e001      	b.n	8001976 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	0f1b      	lsrs	r3, r3, #28
 80019a2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019aa:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3314      	adds	r3, #20
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e005      	b.n	80019c6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	0c1b      	lsrs	r3, r3, #16
 80019be:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3318      	adds	r3, #24
 80019c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	e001      	b.n	80019dc <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a00:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	829a      	strh	r2, [r3, #20]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	2302      	movs	r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001a3c:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d007      	beq.n	8001a5c <RCC_GetClocksFreq+0x40>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d009      	beq.n	8001a64 <RCC_GetClocksFreq+0x48>
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d13f      	bne.n	8001ad4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <RCC_GetClocksFreq+0x148>)
 8001a58:	601a      	str	r2, [r3, #0]
      break;
 8001a5a:	e03f      	b.n	8001adc <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <RCC_GetClocksFreq+0x14c>)
 8001a60:	601a      	str	r2, [r3, #0]
      break;
 8001a62:	e03b      	b.n	8001adc <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6c:	0d9b      	lsrs	r3, r3, #22
 8001a6e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001a80:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <RCC_GetClocksFreq+0x14c>)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a90:	400b      	ands	r3, r1
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	fb03 f302 	mul.w	r3, r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e00c      	b.n	8001ab6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001a9c:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <RCC_GetClocksFreq+0x148>)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aac:	400b      	ands	r3, r1
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	fb03 f302 	mul.w	r3, r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
      break;
 8001ad2:	e003      	b.n	8001adc <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <RCC_GetClocksFreq+0x148>)
 8001ad8:	601a      	str	r2, [r3, #0]
      break;
 8001ada:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <RCC_GetClocksFreq+0x150>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	0a9b      	lsrs	r3, r3, #10
 8001b12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <RCC_GetClocksFreq+0x150>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	40da      	lsrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <RCC_GetClocksFreq+0x144>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001b34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	0b5b      	lsrs	r3, r3, #13
 8001b3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <RCC_GetClocksFreq+0x150>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	20000000 	.word	0x20000000

08001b70 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001b82:	490a      	ldr	r1, [pc, #40]	; (8001bac <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001b8e:	e006      	b.n	8001b9e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001b90:	4906      	ldr	r1, [pc, #24]	; (8001bac <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <RCC_APB1PeriphClockCmd+0x3c>)
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <RCC_APB1PeriphClockCmd+0x3c>)
 8001bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001bce:	e006      	b.n	8001bde <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001bd0:	4906      	ldr	r1, [pc, #24]	; (8001bec <RCC_APB1PeriphClockCmd+0x3c>)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <RCC_APB1PeriphClockCmd+0x3c>)
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001c0e:	e006      	b.n	8001c1e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <RCC_APB1PeriphResetCmd+0x3c>)
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <RCC_APB1PeriphResetCmd+0x3c>)
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001c4e:	e006      	b.n	8001c5e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <RCC_APB1PeriphResetCmd+0x3c>)
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <RCC_APB1PeriphResetCmd+0x3c>)
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	620b      	str	r3, [r1, #32]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <RCC_APB2PeriphResetCmd+0x3c>)
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <RCC_APB2PeriphResetCmd+0x3c>)
 8001c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001c8e:	e006      	b.n	8001c9e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <RCC_APB2PeriphResetCmd+0x3c>)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <RCC_APB2PeriphResetCmd+0x3c>)
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <SPI_I2S_DeInit+0xc4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d10a      	bne.n	8001cd6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cc6:	f7ff ffd3 	bl	8001c70 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cd0:	f7ff ffce 	bl	8001c70 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001cd4:	e049      	b.n	8001d6a <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <SPI_I2S_DeInit+0xc8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10a      	bne.n	8001cf4 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ce4:	f7ff ffa4 	bl	8001c30 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cee:	f7ff ff9f 	bl	8001c30 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001cf2:	e03a      	b.n	8001d6a <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <SPI_I2S_DeInit+0xcc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d10a      	bne.n	8001d12 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d02:	f7ff ff95 	bl	8001c30 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d06:	2100      	movs	r1, #0
 8001d08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d0c:	f7ff ff90 	bl	8001c30 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001d10:	e02b      	b.n	8001d6a <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <SPI_I2S_DeInit+0xd0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10a      	bne.n	8001d30 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d20:	f7ff ffa6 	bl	8001c70 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001d24:	2100      	movs	r1, #0
 8001d26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d2a:	f7ff ffa1 	bl	8001c70 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001d2e:	e01c      	b.n	8001d6a <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <SPI_I2S_DeInit+0xd4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10a      	bne.n	8001d4e <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d3e:	f7ff ff97 	bl	8001c70 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001d42:	2100      	movs	r1, #0
 8001d44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d48:	f7ff ff92 	bl	8001c70 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001d4c:	e00d      	b.n	8001d6a <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <SPI_I2S_DeInit+0xd8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d109      	bne.n	8001d6a <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001d56:	2101      	movs	r1, #1
 8001d58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d5c:	f7ff ff88 	bl	8001c70 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001d60:	2100      	movs	r1, #0
 8001d62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d66:	f7ff ff83 	bl	8001c70 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40013000 	.word	0x40013000
 8001d78:	40003800 	.word	0x40003800
 8001d7c:	40003c00 	.word	0x40003c00
 8001d80:	40013400 	.word	0x40013400
 8001d84:	40015000 	.word	0x40015000
 8001d88:	40015400 	.word	0x40015400

08001d8c <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	837b      	strh	r3, [r7, #26]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d9e:	2300      	movs	r3, #0
 8001da0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001da2:	2301      	movs	r3, #1
 8001da4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8b9b      	ldrh	r3, [r3, #28]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001dc4:	f023 030f 	bic.w	r3, r3, #15
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8b9b      	ldrh	r3, [r3, #28]
 8001dd8:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d104      	bne.n	8001dec <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8001de6:	2302      	movs	r3, #2
 8001de8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dea:	e072      	b.n	8001ed2 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001df8:	e001      	b.n	8001dfe <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <I2S_Init+0x1a8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001e0a:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <I2S_Init+0x1a8>)
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <I2S_Init+0x1a8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e14:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <I2S_Init+0x1a8>)
 8001e18:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e20:	4013      	ands	r3, r2
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <I2S_Init+0x1a8>)
 8001e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e30:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001e34:	0f1b      	lsrs	r3, r3, #28
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <I2S_Init+0x1a8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001e46:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <I2S_Init+0x1ac>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	fb02 f203 	mul.w	r2, r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	88db      	ldrh	r3, [r3, #6]
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d10f      	bne.n	8001e86 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a1a      	lsrs	r2, r3, #8
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3305      	adds	r3, #5
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	e012      	b.n	8001eac <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <I2S_Init+0x1b0>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d902      	bls.n	8001ede <I2S_Init+0x152>
 8001ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d903      	bls.n	8001ee6 <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	88da      	ldrh	r2, [r3, #6]
 8001eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	8859      	ldrh	r1, [r3, #2]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001f0a:	4303      	orrs	r3, r0
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	8b7b      	ldrh	r3, [r7, #26]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f20:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8b7a      	ldrh	r2, [r7, #26]
 8001f26:	839a      	strh	r2, [r3, #28]
}
 8001f28:	bf00      	nop
 8001f2a:	372c      	adds	r7, #44	; 0x2c
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40023800 	.word	0x40023800
 8001f38:	007a1200 	.word	0x007a1200
 8001f3c:	cccccccd 	.word	0xcccccccd

08001f40 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8b9b      	ldrh	r3, [r3, #28]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8001f62:	e007      	b.n	8001f74 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8b9b      	ldrh	r3, [r3, #28]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	839a      	strh	r2, [r3, #28]
  }
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	819a      	strh	r2, [r3, #12]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop

08001fa0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8001fc6:	e009      	b.n	8001fdc <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	809a      	strh	r2, [r3, #4]
  }
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	81fb      	strh	r3, [r7, #14]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	b2db      	uxtb	r3, r3
 8002006:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	2201      	movs	r2, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8002012:	78bb      	ldrb	r3, [r7, #2]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	b29a      	uxth	r2, r3
 800201e:	89bb      	ldrh	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8002028:	e009      	b.n	800203e <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	b29a      	uxth	r2, r3
 8002030:	89bb      	ldrh	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	4013      	ands	r3, r2
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	809a      	strh	r2, [r3, #4]
  }
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	891b      	ldrh	r3, [r3, #8]
 8002060:	b29a      	uxth	r2, r3
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002084:	b490      	push	{r4, r7}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	460a      	mov	r2, r1
 800208e:	71fb      	strb	r3, [r7, #7]
 8002090:	4613      	mov	r3, r2
 8002092:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <SYSCFG_EXTILineConfig+0x80>)
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <SYSCFG_EXTILineConfig+0x80>)
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	1c83      	adds	r3, r0, #2
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <SYSCFG_EXTILineConfig+0x80>)
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461c      	mov	r4, r3
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <SYSCFG_EXTILineConfig+0x80>)
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020e4:	79f9      	ldrb	r1, [r7, #7]
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	431a      	orrs	r2, r3
 80020f4:	1ca3      	adds	r3, r4, #2
 80020f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc90      	pop	{r4, r7}
 8002102:	4770      	bx	lr
 8002104:	40013800 	.word	0x40013800

08002108 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <STM_EVAL_LEDInit+0x50>)
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fd27 	bl	8001b70 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <STM_EVAL_LEDInit+0x54>)
 8002126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800212a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800212c:	2301      	movs	r3, #1
 800212e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002130:	2300      	movs	r3, #0
 8002132:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002138:	2302      	movs	r3, #2
 800213a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <STM_EVAL_LEDInit+0x58>)
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f928 	bl	80013a0 <GPIO_Init>
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	0800360c 	.word	0x0800360c
 800215c:	08003604 	.word	0x08003604
 8002160:	20000010 	.word	0x20000010

08002164 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <STM_EVAL_LEDOn+0x28>)
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	79fa      	ldrb	r2, [r7, #7]
 8002178:	4905      	ldr	r1, [pc, #20]	; (8002190 <STM_EVAL_LEDOn+0x2c>)
 800217a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800217e:	831a      	strh	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000010 	.word	0x20000010
 8002190:	08003604 	.word	0x08003604

08002194 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <STM_EVAL_LEDOff+0x28>)
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	4905      	ldr	r1, [pc, #20]	; (80021c0 <STM_EVAL_LEDOff+0x2c>)
 80021aa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80021ae:	835a      	strh	r2, [r3, #26]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000010 	.word	0x20000010
 80021c0:	08003604 	.word	0x08003604

080021c4 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	460a      	mov	r2, r1
 80021ce:	71fb      	strb	r3, [r7, #7]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80021d4:	2301      	movs	r3, #1
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fcc9 	bl	8001b70 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80021de:	2101      	movs	r1, #1
 80021e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021e4:	f7ff fd04 	bl	8001bf0 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80021e8:	2300      	movs	r3, #0
 80021ea:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80021f0:	2301      	movs	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <STM_EVAL_PBInit+0x94>)
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	f107 0218 	add.w	r2, r7, #24
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f8cc 	bl	80013a0 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d11f      	bne.n	800224e <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800220e:	2300      	movs	r3, #0
 8002210:	2200      	movs	r2, #0
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff35 	bl	8002084 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800221a:	2301      	movs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800221e:	2300      	movs	r3, #0
 8002220:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8002222:	2308      	movs	r3, #8
 8002224:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002226:	2301      	movs	r3, #1
 8002228:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f844 	bl	80012bc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8002234:	2306      	movs	r3, #6
 8002236:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8002238:	230f      	movs	r3, #15
 800223a:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800223c:	230f      	movs	r3, #15
 800223e:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fbd7 	bl	80009fc <NVIC_Init>
  }
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000020 	.word	0x20000020

0800225c <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <STM_EVAL_PBGetState+0x28>)
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	2201      	movs	r2, #1
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f922 	bl	80014bc <GPIO_ReadInputDataBit>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000020 	.word	0x20000020

08002288 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	603a      	str	r2, [r7, #0]
 8002292:	80fb      	strh	r3, [r7, #6]
 8002294:	460b      	mov	r3, r1
 8002296:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8002298:	797b      	ldrb	r3, [r7, #5]
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d80b      	bhi.n	80022b6 <EVAL_AUDIO_Init+0x2e>
 800229e:	797a      	ldrb	r2, [r7, #5]
 80022a0:	4613      	mov	r3, r2
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <EVAL_AUDIO_Init+0x54>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1152      	asrs	r2, r2, #5
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e000      	b.n	80022b8 <EVAL_AUDIO_Init+0x30>
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	88f8      	ldrh	r0, [r7, #6]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	f000 f8f3 	bl	80024a8 <Codec_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 80022c8:	2301      	movs	r3, #1
 80022ca:	e002      	b.n	80022d2 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 80022cc:	f000 fcb4 	bl	8002c38 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 80022d0:	2300      	movs	r3, #0
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	51eb851f 	.word	0x51eb851f

080022e0 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <EVAL_AUDIO_Play+0x60>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 80022f0:	f000 f986 	bl	8002600 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf28      	it	cs
 8002300:	4613      	movcs	r3, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f000 fd40 	bl	8002d88 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <EVAL_AUDIO_Play+0x60>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002310:	4293      	cmp	r3, r2
 8002312:	bf28      	it	cs
 8002314:	4613      	movcs	r3, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <EVAL_AUDIO_Play+0x64>)
 800231c:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <EVAL_AUDIO_Play+0x60>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002326:	4293      	cmp	r3, r2
 8002328:	bf28      	it	cs
 800232a:	4613      	movcs	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <EVAL_AUDIO_Play+0x68>)
 8002334:	6013      	str	r3, [r2, #0]
  
  return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000024 	.word	0x20000024
 8002344:	20000028 	.word	0x20000028
 8002348:	20000394 	.word	0x20000394

0800234c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <Audio_MAL_IRQHandler+0xe0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <Audio_MAL_IRQHandler+0xe4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b35      	ldr	r3, [pc, #212]	; (8002438 <Audio_MAL_IRQHandler+0xec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe ff03 	bl	8001174 <DMA_GetFlagStatus>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fde9 	bl	8002f50 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <Audio_MAL_IRQHandler+0xec>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7fe ff2f 	bl	80011ec <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN  
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <Audio_MAL_IRQHandler+0xf0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe feeb 	bl	8001174 <DMA_GetFlagStatus>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);    
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fdbd 	bl	8002f28 <EVAL_AUDIO_HalfTransfer_CallBack>
   
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);    
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <Audio_MAL_IRQHandler+0xf0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7fe ff17 	bl	80011ec <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <Audio_MAL_IRQHandler+0xf4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7fe fed3 	bl	8001174 <DMA_GetFlagStatus>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <Audio_MAL_IRQHandler+0xf8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe fec8 	bl	8001174 <DMA_GetFlagStatus>
 80023e4:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <Audio_MAL_IRQHandler+0xfc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f7fe febd 	bl	8001174 <DMA_GetFlagStatus>
 80023fa:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8002400:	463b      	mov	r3, r7
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fe6a 	bl	80030dc <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <Audio_MAL_IRQHandler+0xe8>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <Audio_MAL_IRQHandler+0xf4>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <Audio_MAL_IRQHandler+0xf8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	431a      	orrs	r2, r3
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <Audio_MAL_IRQHandler+0xfc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe fee5 	bl	80011ec <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000394 	.word	0x20000394
 8002430:	20000028 	.word	0x20000028
 8002434:	20000038 	.word	0x20000038
 8002438:	20000044 	.word	0x20000044
 800243c:	20000048 	.word	0x20000048
 8002440:	20000050 	.word	0x20000050
 8002444:	2000004c 	.word	0x2000004c
 8002448:	20000054 	.word	0x20000054

0800244c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002450:	f7ff ff7c 	bl	800234c <Audio_MAL_IRQHandler>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800245c:	f7ff ff76 	bl	800234c <Audio_MAL_IRQHandler>
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002468:	2102      	movs	r1, #2
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <SPI3_IRQHandler+0x3c>)
 800246c:	f7ff fdee 	bl	800204c <SPI_I2S_GetFlagStatus>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d011      	beq.n	800249a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <SPI3_IRQHandler+0x40>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d106      	bne.n	800248c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800247e:	f000 fe25 	bl	80030cc <EVAL_AUDIO_GetSampleCallBack>
 8002482:	4603      	mov	r3, r0
 8002484:	4619      	mov	r1, r3
 8002486:	2004      	movs	r0, #4
 8002488:	f7fe fd10 	bl	8000eac <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800248c:	f000 fe1e 	bl	80030cc <EVAL_AUDIO_GetSampleCallBack>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <SPI3_IRQHandler+0x3c>)
 8002496:	f7ff fd73 	bl	8001f80 <SPI_I2S_SendData>
  }
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40003c00 	.word	0x40003c00
 80024a4:	20000030 	.word	0x20000030

080024a8 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	460b      	mov	r3, r1
 80024b6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 80024bc:	f000 fb1a 	bl	8002af4 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 80024c0:	f000 f8e2 	bl	8002688 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 80024c4:	f000 faa8 	bl	8002a18 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 80024c8:	2101      	movs	r1, #1
 80024ca:	2002      	movs	r0, #2
 80024cc:	f000 f8f0 	bl	80026b0 <Codec_WriteRegister>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4413      	add	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 80024d8:	21af      	movs	r1, #175	; 0xaf
 80024da:	2004      	movs	r0, #4
 80024dc:	f000 f8e8 	bl	80026b0 <Codec_WriteRegister>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <Codec_Init+0x150>)
 80024ea:	22af      	movs	r2, #175	; 0xaf
 80024ec:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 80024ee:	2181      	movs	r1, #129	; 0x81
 80024f0:	2005      	movs	r0, #5
 80024f2:	f000 f8dd 	bl	80026b0 <Codec_WriteRegister>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 80024fe:	2104      	movs	r1, #4
 8002500:	2006      	movs	r0, #6
 8002502:	f000 f8d5 	bl	80026b0 <Codec_WriteRegister>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 800250e:	797b      	ldrb	r3, [r7, #5]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f87d 	bl	8002610 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <Codec_Init+0x154>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d127      	bne.n	800256e <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 800251e:	2101      	movs	r1, #1
 8002520:	2008      	movs	r0, #8
 8002522:	f000 f8c5 	bl	80026b0 <Codec_WriteRegister>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 800252e:	2101      	movs	r1, #1
 8002530:	2009      	movs	r0, #9
 8002532:	f000 f8bd 	bl	80026b0 <Codec_WriteRegister>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 800253e:	21c0      	movs	r1, #192	; 0xc0
 8002540:	200e      	movs	r0, #14
 8002542:	f000 f8b5 	bl	80026b0 <Codec_WriteRegister>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 800254e:	2100      	movs	r1, #0
 8002550:	2014      	movs	r0, #20
 8002552:	f000 f8ad 	bl	80026b0 <Codec_WriteRegister>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 800255e:	2100      	movs	r1, #0
 8002560:	2015      	movs	r0, #21
 8002562:	f000 f8a5 	bl	80026b0 <Codec_WriteRegister>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 800256e:	219e      	movs	r1, #158	; 0x9e
 8002570:	2002      	movs	r0, #2
 8002572:	f000 f89d 	bl	80026b0 <Codec_WriteRegister>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 800257e:	2100      	movs	r1, #0
 8002580:	200a      	movs	r0, #10
 8002582:	f000 f895 	bl	80026b0 <Codec_WriteRegister>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <Codec_Init+0x154>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d007      	beq.n	80025a6 <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 8002596:	2104      	movs	r1, #4
 8002598:	200e      	movs	r0, #14
 800259a:	f000 f889 	bl	80026b0 <Codec_WriteRegister>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 80025a6:	2100      	movs	r1, #0
 80025a8:	2027      	movs	r0, #39	; 0x27
 80025aa:	f000 f881 	bl	80026b0 <Codec_WriteRegister>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 80025b6:	210f      	movs	r1, #15
 80025b8:	201f      	movs	r0, #31
 80025ba:	f000 f879 	bl	80026b0 <Codec_WriteRegister>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 80025c6:	210a      	movs	r1, #10
 80025c8:	201a      	movs	r0, #26
 80025ca:	f000 f871 	bl	80026b0 <Codec_WriteRegister>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 80025d6:	210a      	movs	r1, #10
 80025d8:	201b      	movs	r0, #27
 80025da:	f000 f869 	bl	80026b0 <Codec_WriteRegister>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f000 fa42 	bl	8002a70 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000080 	.word	0x20000080
 80025fc:	20000030 	.word	0x20000030

08002600 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2be6      	cmp	r3, #230	; 0xe6
 8002622:	d916      	bls.n	8002652 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	3319      	adds	r3, #25
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	2020      	movs	r0, #32
 800262e:	f000 f83f 	bl	80026b0 <Codec_WriteRegister>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	3319      	adds	r3, #25
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4619      	mov	r1, r3
 8002642:	2021      	movs	r0, #33	; 0x21
 8002644:	f000 f834 	bl	80026b0 <Codec_WriteRegister>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e015      	b.n	800267e <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	3319      	adds	r3, #25
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	2020      	movs	r0, #32
 800265c:	f000 f828 	bl	80026b0 <Codec_WriteRegister>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	3319      	adds	r3, #25
 800266c:	b2db      	uxtb	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	2021      	movs	r0, #33	; 0x21
 8002672:	f000 f81d 	bl	80026b0 <Codec_WriteRegister>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	2110      	movs	r1, #16
 8002690:	4806      	ldr	r0, [pc, #24]	; (80026ac <Codec_Reset+0x24>)
 8002692:	f7fe ff2d 	bl	80014f0 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 8002696:	f644 70ff 	movw	r0, #20479	; 0x4fff
 800269a:	f000 fabb 	bl	8002c14 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	2110      	movs	r1, #16
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <Codec_Reset+0x24>)
 80026a4:	f7fe ff24 	bl	80014f0 <GPIO_WriteBit>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40020c00 	.word	0x40020c00

080026b0 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	460a      	mov	r2, r1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	4613      	mov	r3, r2
 80026be:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <Codec_WriteRegister+0x148>)
 80026c6:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80026ca:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80026cc:	e00a      	b.n	80026e4 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80026ce:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <Codec_WriteRegister+0x148>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	4948      	ldr	r1, [pc, #288]	; (80027f8 <Codec_WriteRegister+0x148>)
 80026d6:	600a      	str	r2, [r1, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <Codec_WriteRegister+0x34>
 80026dc:	f000 fc30 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 80026e0:	4603      	mov	r3, r0
 80026e2:	e085      	b.n	80027f0 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80026e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80026e8:	4844      	ldr	r0, [pc, #272]	; (80027fc <Codec_WriteRegister+0x14c>)
 80026ea:	f7ff f94b 	bl	8001984 <I2C_GetFlagStatus>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ec      	bne.n	80026ce <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 80026f4:	2101      	movs	r1, #1
 80026f6:	4841      	ldr	r0, [pc, #260]	; (80027fc <Codec_WriteRegister+0x14c>)
 80026f8:	f7ff f878 	bl	80017ec <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <Codec_WriteRegister+0x148>)
 80026fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002702:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002704:	e00a      	b.n	800271c <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002706:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <Codec_WriteRegister+0x148>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	493a      	ldr	r1, [pc, #232]	; (80027f8 <Codec_WriteRegister+0x148>)
 800270e:	600a      	str	r2, [r1, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <Codec_WriteRegister+0x6c>
 8002714:	f000 fc14 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002718:	4603      	mov	r3, r0
 800271a:	e069      	b.n	80027f0 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800271c:	4938      	ldr	r1, [pc, #224]	; (8002800 <Codec_WriteRegister+0x150>)
 800271e:	4837      	ldr	r0, [pc, #220]	; (80027fc <Codec_WriteRegister+0x14c>)
 8002720:	f7ff f900 	bl	8001924 <I2C_CheckEvent>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ed      	beq.n	8002706 <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800272a:	2200      	movs	r2, #0
 800272c:	2194      	movs	r1, #148	; 0x94
 800272e:	4833      	ldr	r0, [pc, #204]	; (80027fc <Codec_WriteRegister+0x14c>)
 8002730:	f7ff f89c 	bl	800186c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002734:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <Codec_WriteRegister+0x148>)
 8002736:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800273a:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800273c:	e00a      	b.n	8002754 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <Codec_WriteRegister+0x148>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	1e5a      	subs	r2, r3, #1
 8002744:	492c      	ldr	r1, [pc, #176]	; (80027f8 <Codec_WriteRegister+0x148>)
 8002746:	600a      	str	r2, [r1, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <Codec_WriteRegister+0xa4>
 800274c:	f000 fbf8 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002750:	4603      	mov	r3, r0
 8002752:	e04d      	b.n	80027f0 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002754:	492b      	ldr	r1, [pc, #172]	; (8002804 <Codec_WriteRegister+0x154>)
 8002756:	4829      	ldr	r0, [pc, #164]	; (80027fc <Codec_WriteRegister+0x14c>)
 8002758:	f7ff f8e4 	bl	8001924 <I2C_CheckEvent>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ed      	beq.n	800273e <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4619      	mov	r1, r3
 8002766:	4825      	ldr	r0, [pc, #148]	; (80027fc <Codec_WriteRegister+0x14c>)
 8002768:	f7ff f8be 	bl	80018e8 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <Codec_WriteRegister+0x148>)
 800276e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002772:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002774:	e00a      	b.n	800278c <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <Codec_WriteRegister+0x148>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	491e      	ldr	r1, [pc, #120]	; (80027f8 <Codec_WriteRegister+0x148>)
 800277e:	600a      	str	r2, [r1, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <Codec_WriteRegister+0xdc>
 8002784:	f000 fbdc 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002788:	4603      	mov	r3, r0
 800278a:	e031      	b.n	80027f0 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 800278c:	491e      	ldr	r1, [pc, #120]	; (8002808 <Codec_WriteRegister+0x158>)
 800278e:	481b      	ldr	r0, [pc, #108]	; (80027fc <Codec_WriteRegister+0x14c>)
 8002790:	f7ff f8c8 	bl	8001924 <I2C_CheckEvent>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ed      	beq.n	8002776 <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	4619      	mov	r1, r3
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <Codec_WriteRegister+0x14c>)
 80027a0:	f7ff f8a2 	bl	80018e8 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <Codec_WriteRegister+0x148>)
 80027a6:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80027aa:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 80027ac:	e008      	b.n	80027c0 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <Codec_WriteRegister+0x148>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	4910      	ldr	r1, [pc, #64]	; (80027f8 <Codec_WriteRegister+0x148>)
 80027b6:	600a      	str	r2, [r1, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <Codec_WriteRegister+0x110>
 80027bc:	f000 fbc0 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 80027c0:	4912      	ldr	r1, [pc, #72]	; (800280c <Codec_WriteRegister+0x15c>)
 80027c2:	480e      	ldr	r0, [pc, #56]	; (80027fc <Codec_WriteRegister+0x14c>)
 80027c4:	f7ff f8de 	bl	8001984 <I2C_GetFlagStatus>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ef      	beq.n	80027ae <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 80027ce:	2101      	movs	r1, #1
 80027d0:	480a      	ldr	r0, [pc, #40]	; (80027fc <Codec_WriteRegister+0x14c>)
 80027d2:	f7ff f82b 	bl	800182c <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f819 	bl	8002810 <Codec_ReadRegister>
 80027de:	4602      	mov	r2, r0
 80027e0:	79bb      	ldrb	r3, [r7, #6]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	2000002c 	.word	0x2000002c
 80027fc:	40005400 	.word	0x40005400
 8002800:	00030001 	.word	0x00030001
 8002804:	00070082 	.word	0x00070082
 8002808:	00070080 	.word	0x00070080
 800280c:	10000004 	.word	0x10000004

08002810 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800281e:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002820:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002824:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002826:	e00a      	b.n	800283e <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002828:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	4972      	ldr	r1, [pc, #456]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002830:	600a      	str	r2, [r1, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <Codec_ReadRegister+0x2e>
 8002836:	f000 fb83 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 800283a:	4603      	mov	r3, r0
 800283c:	e0d7      	b.n	80029ee <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800283e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002842:	486e      	ldr	r0, [pc, #440]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002844:	f7ff f89e 	bl	8001984 <I2C_GetFlagStatus>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ec      	bne.n	8002828 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800284e:	2101      	movs	r1, #1
 8002850:	486a      	ldr	r0, [pc, #424]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002852:	f7fe ffcb 	bl	80017ec <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002856:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800285c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800285e:	e00a      	b.n	8002876 <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	4964      	ldr	r1, [pc, #400]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002868:	600a      	str	r2, [r1, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <Codec_ReadRegister+0x66>
 800286e:	f000 fb67 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002872:	4603      	mov	r3, r0
 8002874:	e0bb      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002876:	4962      	ldr	r1, [pc, #392]	; (8002a00 <Codec_ReadRegister+0x1f0>)
 8002878:	4860      	ldr	r0, [pc, #384]	; (80029fc <Codec_ReadRegister+0x1ec>)
 800287a:	f7ff f853 	bl	8001924 <I2C_CheckEvent>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ed      	beq.n	8002860 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002884:	2200      	movs	r2, #0
 8002886:	2194      	movs	r1, #148	; 0x94
 8002888:	485c      	ldr	r0, [pc, #368]	; (80029fc <Codec_ReadRegister+0x1ec>)
 800288a:	f7fe ffef 	bl	800186c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800288e:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002894:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002896:	e00a      	b.n	80028ae <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	4956      	ldr	r1, [pc, #344]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80028a0:	600a      	str	r2, [r1, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <Codec_ReadRegister+0x9e>
 80028a6:	f000 fb4b 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 80028aa:	4603      	mov	r3, r0
 80028ac:	e09f      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80028ae:	4955      	ldr	r1, [pc, #340]	; (8002a04 <Codec_ReadRegister+0x1f4>)
 80028b0:	4852      	ldr	r0, [pc, #328]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80028b2:	f7ff f837 	bl	8001924 <I2C_CheckEvent>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ed      	beq.n	8002898 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	4619      	mov	r1, r3
 80028c0:	484e      	ldr	r0, [pc, #312]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80028c2:	f7ff f811 	bl	80018e8 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80028c6:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80028c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028cc:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 80028ce:	e00a      	b.n	80028e6 <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	4948      	ldr	r1, [pc, #288]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80028d8:	600a      	str	r2, [r1, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <Codec_ReadRegister+0xd6>
 80028de:	f000 fb2f 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 80028e2:	4603      	mov	r3, r0
 80028e4:	e083      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 80028e6:	4948      	ldr	r1, [pc, #288]	; (8002a08 <Codec_ReadRegister+0x1f8>)
 80028e8:	4844      	ldr	r0, [pc, #272]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80028ea:	f7ff f84b 	bl	8001984 <I2C_GetFlagStatus>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ed      	beq.n	80028d0 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 80028f4:	2101      	movs	r1, #1
 80028f6:	4841      	ldr	r0, [pc, #260]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80028f8:	f7fe ff78 	bl	80017ec <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80028fc:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80028fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002902:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002904:	e00a      	b.n	800291c <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	493a      	ldr	r1, [pc, #232]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 800290e:	600a      	str	r2, [r1, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <Codec_ReadRegister+0x10c>
 8002914:	f000 fb14 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002918:	4603      	mov	r3, r0
 800291a:	e068      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800291c:	4938      	ldr	r1, [pc, #224]	; (8002a00 <Codec_ReadRegister+0x1f0>)
 800291e:	4837      	ldr	r0, [pc, #220]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002920:	f7ff f800 	bl	8001924 <I2C_CheckEvent>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ed      	beq.n	8002906 <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 800292a:	2201      	movs	r2, #1
 800292c:	2194      	movs	r1, #148	; 0x94
 800292e:	4833      	ldr	r0, [pc, #204]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002930:	f7fe ff9c 	bl	800186c <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800293a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 800293c:	e00a      	b.n	8002954 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	492c      	ldr	r1, [pc, #176]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002946:	600a      	str	r2, [r1, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <Codec_ReadRegister+0x144>
 800294c:	f000 faf8 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002950:	4603      	mov	r3, r0
 8002952:	e04c      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002954:	492d      	ldr	r1, [pc, #180]	; (8002a0c <Codec_ReadRegister+0x1fc>)
 8002956:	4829      	ldr	r0, [pc, #164]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002958:	f7ff f814 	bl	8001984 <I2C_GetFlagStatus>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ed      	beq.n	800293e <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002962:	2100      	movs	r1, #0
 8002964:	4825      	ldr	r0, [pc, #148]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002966:	f7fe ff9f 	bl	80018a8 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <Codec_ReadRegister+0x1ec>)
 800296c:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 800296e:	2101      	movs	r1, #1
 8002970:	4822      	ldr	r0, [pc, #136]	; (80029fc <Codec_ReadRegister+0x1ec>)
 8002972:	f7fe ff5b 	bl	800182c <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800297c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 800297e:	e00a      	b.n	8002996 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	491c      	ldr	r1, [pc, #112]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 8002988:	600a      	str	r2, [r1, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <Codec_ReadRegister+0x186>
 800298e:	f000 fad7 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 8002992:	4603      	mov	r3, r0
 8002994:	e02b      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002996:	491e      	ldr	r1, [pc, #120]	; (8002a10 <Codec_ReadRegister+0x200>)
 8002998:	4818      	ldr	r0, [pc, #96]	; (80029fc <Codec_ReadRegister+0x1ec>)
 800299a:	f7fe fff3 	bl	8001984 <I2C_GetFlagStatus>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ed      	beq.n	8002980 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 80029a4:	4815      	ldr	r0, [pc, #84]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80029a6:	f7fe ffaf 	bl	8001908 <I2C_ReceiveData>
 80029aa:	4603      	mov	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80029b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b4:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80029b6:	e00a      	b.n	80029ce <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	490e      	ldr	r1, [pc, #56]	; (80029f8 <Codec_ReadRegister+0x1e8>)
 80029c0:	600a      	str	r2, [r1, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <Codec_ReadRegister+0x1be>
 80029c6:	f000 fabb 	bl	8002f40 <Codec_TIMEOUT_UserCallback>
 80029ca:	4603      	mov	r3, r0
 80029cc:	e00f      	b.n	80029ee <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ed      	bne.n	80029b8 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 80029dc:	2101      	movs	r1, #1
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80029e0:	f7fe ff62 	bl	80018a8 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 80029e4:	490b      	ldr	r1, [pc, #44]	; (8002a14 <Codec_ReadRegister+0x204>)
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <Codec_ReadRegister+0x1ec>)
 80029e8:	f7ff f800 	bl	80019ec <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000002c 	.word	0x2000002c
 80029fc:	40005400 	.word	0x40005400
 8002a00:	00030001 	.word	0x00030001
 8002a04:	00070082 	.word	0x00070082
 8002a08:	10000004 	.word	0x10000004
 8002a0c:	10000002 	.word	0x10000002
 8002a10:	10000040 	.word	0x10000040
 8002a14:	10000400 	.word	0x10000400

08002a18 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a24:	f7ff f8c4 	bl	8001bb0 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002a28:	480f      	ldr	r0, [pc, #60]	; (8002a68 <Codec_CtrlInterface_Init+0x50>)
 8002a2a:	f7fe fdc3 	bl	80015b4 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002a32:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002a36:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002a38:	2333      	movs	r3, #51	; 0x33
 8002a3a:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a40:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002a42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a46:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <Codec_CtrlInterface_Init+0x54>)
 8002a4a:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <Codec_CtrlInterface_Init+0x50>)
 8002a50:	f7fe feac 	bl	80017ac <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002a54:	463b      	mov	r3, r7
 8002a56:	4619      	mov	r1, r3
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <Codec_CtrlInterface_Init+0x50>)
 8002a5a:	f7fe fde5 	bl	8001628 <I2C_Init>
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40005400 	.word	0x40005400
 8002a6c:	000186a0 	.word	0x000186a0

08002a70 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002a78:	2101      	movs	r1, #1
 8002a7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a7e:	f7ff f897 	bl	8001bb0 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002a82:	481a      	ldr	r0, [pc, #104]	; (8002aec <Codec_AudioInterface_Init+0x7c>)
 8002a84:	f7ff f914 	bl	8001cb0 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002a90:	2300      	movs	r3, #0
 8002a92:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002a94:	2300      	movs	r3, #0
 8002a96:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9c:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa2:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002aa4:	f107 0318 	add.w	r3, r7, #24
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4810      	ldr	r0, [pc, #64]	; (8002aec <Codec_AudioInterface_Init+0x7c>)
 8002aac:	f7ff f96e 	bl	8001d8c <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <Codec_AudioInterface_Init+0x80>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d114      	bne.n	8002ae2 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002abe:	f7ff f877 	bl	8001bb0 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe f98f 	bl	8000df8 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002ada:	2101      	movs	r1, #1
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe f9bf 	bl	8000e60 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40003c00 	.word	0x40003c00
 8002af0:	20000030 	.word	0x20000030

08002af4 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002afa:	2101      	movs	r1, #1
 8002afc:	2008      	movs	r0, #8
 8002afe:	f7ff f837 	bl	8001b70 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002b02:	2310      	movs	r3, #16
 8002b04:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b06:	2301      	movs	r3, #1
 8002b08:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002b16:	463b      	mov	r3, r7
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4839      	ldr	r0, [pc, #228]	; (8002c00 <Codec_GPIO_Init+0x10c>)
 8002b1c:	f7fe fc40 	bl	80013a0 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002b20:	2101      	movs	r1, #1
 8002b22:	2007      	movs	r0, #7
 8002b24:	f7ff f824 	bl	8001b70 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b32:	2302      	movs	r3, #2
 8002b34:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002b36:	2301      	movs	r3, #1
 8002b38:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4619      	mov	r1, r3
 8002b42:	4830      	ldr	r0, [pc, #192]	; (8002c04 <Codec_GPIO_Init+0x110>)
 8002b44:	f7fe fc2c 	bl	80013a0 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002b48:	2204      	movs	r2, #4
 8002b4a:	2106      	movs	r1, #6
 8002b4c:	482d      	ldr	r0, [pc, #180]	; (8002c04 <Codec_GPIO_Init+0x110>)
 8002b4e:	f7fe fce7 	bl	8001520 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002b52:	2204      	movs	r2, #4
 8002b54:	2109      	movs	r1, #9
 8002b56:	482b      	ldr	r0, [pc, #172]	; (8002c04 <Codec_GPIO_Init+0x110>)
 8002b58:	f7fe fce2 	bl	8001520 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002b5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b60:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002b62:	2302      	movs	r3, #2
 8002b64:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b66:	2302      	movs	r3, #2
 8002b68:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002b72:	463b      	mov	r3, r7
 8002b74:	4619      	mov	r1, r3
 8002b76:	4824      	ldr	r0, [pc, #144]	; (8002c08 <Codec_GPIO_Init+0x114>)
 8002b78:	f7fe fc12 	bl	80013a0 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002b7c:	2206      	movs	r2, #6
 8002b7e:	2104      	movs	r1, #4
 8002b80:	4822      	ldr	r0, [pc, #136]	; (8002c0c <Codec_GPIO_Init+0x118>)
 8002b82:	f7fe fccd 	bl	8001520 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002b86:	2206      	movs	r2, #6
 8002b88:	210a      	movs	r1, #10
 8002b8a:	481f      	ldr	r0, [pc, #124]	; (8002c08 <Codec_GPIO_Init+0x114>)
 8002b8c:	f7fe fcc8 	bl	8001520 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <Codec_GPIO_Init+0x11c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d00c      	beq.n	8002bb2 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002b98:	2310      	movs	r3, #16
 8002b9a:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	481a      	ldr	r0, [pc, #104]	; (8002c0c <Codec_GPIO_Init+0x118>)
 8002ba2:	f7fe fbfd 	bl	80013a0 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002ba6:	2206      	movs	r2, #6
 8002ba8:	210c      	movs	r1, #12
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <Codec_GPIO_Init+0x114>)
 8002bac:	f7fe fcb8 	bl	8001520 <GPIO_PinAFConfig>
 8002bb0:	e00e      	b.n	8002bd0 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7fe ffdb 	bl	8001b70 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002bba:	2310      	movs	r3, #16
 8002bbc:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4810      	ldr	r0, [pc, #64]	; (8002c0c <Codec_GPIO_Init+0x118>)
 8002bcc:	f7fe fbe8 	bl	80013a0 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002be4:	463b      	mov	r3, r7
 8002be6:	4619      	mov	r1, r3
 8002be8:	4807      	ldr	r0, [pc, #28]	; (8002c08 <Codec_GPIO_Init+0x114>)
 8002bea:	f7fe fbd9 	bl	80013a0 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002bee:	2206      	movs	r2, #6
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <Codec_GPIO_Init+0x114>)
 8002bf4:	f7fe fc94 	bl	8001520 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40020c00 	.word	0x40020c00
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	20000030 	.word	0x20000030

08002c14 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002c1c:	e002      	b.n	8002c24 <Delay+0x10>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <Delay+0xa>
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <Audio_MAL_Init+0x130>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d16e      	bne.n	8002d24 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002c46:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <Audio_MAL_Init+0x134>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe ff8f 	bl	8001b70 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fa6f 	bl	800113c <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe f93e 	bl	8000ee4 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002c68:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <Audio_MAL_Init+0x13c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c6e:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002c70:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <Audio_MAL_Init+0x144>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a40      	ldr	r2, [pc, #256]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c76:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002c78:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c80:	2240      	movs	r2, #64	; 0x40
 8002c82:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002c84:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c8a:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c98:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca0:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002ca2:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca8:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4928      	ldr	r1, [pc, #160]	; (8002d78 <Audio_MAL_Init+0x140>)
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe f9d7 	bl	800108c <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe faae 	bl	8001248 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe faa7 	bl	8001248 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <Audio_MAL_Init+0x138>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2186      	movs	r1, #134	; 0x86
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe faa0 	bl	8001248 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <Audio_MAL_Init+0x148>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002d10:	2300      	movs	r3, #0
 8002d12:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002d14:	2300      	movs	r3, #0
 8002d16:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fe6c 	bl	80009fc <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <Audio_MAL_Init+0x130>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4814      	ldr	r0, [pc, #80]	; (8002d84 <Audio_MAL_Init+0x14c>)
 8002d32:	f7ff f935 	bl	8001fa0 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002d36:	e012      	b.n	8002d5e <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8002d38:	f000 f86c 	bl	8002e14 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2171      	movs	r1, #113	; 0x71
 8002d40:	4810      	ldr	r0, [pc, #64]	; (8002d84 <Audio_MAL_Init+0x14c>)
 8002d42:	f7ff f951 	bl	8001fe8 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 8002d46:	2333      	movs	r3, #51	; 0x33
 8002d48:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fe4f 	bl	80009fc <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000030 	.word	0x20000030
 8002d6c:	20000034 	.word	0x20000034
 8002d70:	20000038 	.word	0x20000038
 8002d74:	20000084 	.word	0x20000084
 8002d78:	200003d4 	.word	0x200003d4
 8002d7c:	2000003c 	.word	0x2000003c
 8002d80:	20000040 	.word	0x20000040
 8002d84:	40003c00 	.word	0x40003c00

08002d88 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002d92:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <Audio_MAL_Play+0x7c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d112      	bne.n	8002dc0 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <Audio_MAL_Play+0x84>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4917      	ldr	r1, [pc, #92]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f96d 	bl	800108c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <Audio_MAL_Play+0x84>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe f9bf 	bl	800113c <DMA_Cmd>
 8002dbe:	e011      	b.n	8002de4 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <Audio_MAL_Play+0x84>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	490d      	ldr	r1, [pc, #52]	; (8002e08 <Audio_MAL_Play+0x80>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f95a 	bl	800108c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <Audio_MAL_Play+0x84>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe f9ac 	bl	800113c <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <Audio_MAL_Play+0x88>)
 8002de6:	8b9b      	ldrh	r3, [r3, #28]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 8002df2:	2101      	movs	r1, #1
 8002df4:	4806      	ldr	r0, [pc, #24]	; (8002e10 <Audio_MAL_Play+0x88>)
 8002df6:	f7ff f8a3 	bl	8001f40 <I2S_Cmd>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000030 	.word	0x20000030
 8002e08:	200003d4 	.word	0x200003d4
 8002e0c:	20000038 	.word	0x20000038
 8002e10:	40003c00 	.word	0x40003c00

08002e14 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4813      	ldr	r0, [pc, #76]	; (8002e6c <DAC_Config+0x58>)
 8002e1e:	f7fe fea7 	bl	8001b70 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002e22:	2101      	movs	r1, #1
 8002e24:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002e28:	f7fe fec2 	bl	8001bb0 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002e30:	2303      	movs	r3, #3
 8002e32:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <DAC_Config+0x5c>)
 8002e3e:	f7fe faaf 	bl	80013a0 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	4619      	mov	r1, r3
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fd ffcf 	bl	8000df8 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd ffff 	bl	8000e60 <DAC_Cmd>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	00200001 	.word	0x00200001
 8002e70:	40020000 	.word	0x40020000

08002e74 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  int i = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
  // int datasize = sizeof(data)/2;
  int retVal = -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	603b      	str	r3, [r7, #0]
  /* ADC3 configuration *******************************************************/
   /*  - Enable peripheral clocks                                              */
   /*  - DMA2_Stream0 channel2 configuration                                   */
   /*  - Configure ADC Channel12 pin as analog input  : PC2                    */
   /*  - Configure ADC3 Channel12                                              */
   ADC3_CH12_DMA_Config();
 8002e84:	f000 f936 	bl	80030f4 <ADC3_CH12_DMA_Config>


   /* Initialize LEDS */
   STM_EVAL_LEDInit(LED3); // orange LED
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f7ff f93d 	bl	8002108 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED4); // green LED
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff f93a 	bl	8002108 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED5); // red LED
 8002e94:	2002      	movs	r0, #2
 8002e96:	f7ff f937 	bl	8002108 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED6); // blue LED
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	f7ff f934 	bl	8002108 <STM_EVAL_LEDInit>

   /* Green Led On: start of application */
   STM_EVAL_LEDOn(LED4);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7ff f95f 	bl	8002164 <STM_EVAL_LEDOn>



  /* Initialize User Button */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff f98b 	bl	80021c4 <STM_EVAL_PBInit>
//  {
//	  audiobuff[i] = i*320;
//  }
//  i = 0;

  retVal = EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8002eae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002eb2:	2150      	movs	r1, #80	; 0x50
 8002eb4:	2004      	movs	r0, #4
 8002eb6:	f7ff f9e7 	bl	8002288 <EVAL_AUDIO_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	603b      	str	r3, [r7, #0]
  retVal = EVAL_AUDIO_Play(buffer_output, BUFF_LEN);
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	4816      	ldr	r0, [pc, #88]	; (8002f1c <main+0xa8>)
 8002ec2:	f7ff fa0d 	bl	80022e0 <EVAL_AUDIO_Play>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	603b      	str	r3, [r7, #0]


  /* Infinite loop */
  while (1)
  {
	i++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]


    if (STM_EVAL_PBGetState(BUTTON_USER) && (state == OFF))
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff f9c3 	bl	800225c <STM_EVAL_PBGetState>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <main+0x86>
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <main+0xac>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <main+0x86>
    {
      state = ON;
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <main+0xac>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
      STM_EVAL_LEDOn(LED6); // blue LED ON
 8002eea:	2003      	movs	r0, #3
 8002eec:	f7ff f93a 	bl	8002164 <STM_EVAL_LEDOn>
      pass = 0.5f;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <main+0xb0>)
 8002ef2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e00f      	b.n	8002f1a <main+0xa6>
    }
    else
    {
      if (! STM_EVAL_PBGetState(BUTTON_USER))
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7ff f9ae 	bl	800225c <STM_EVAL_PBGetState>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e1      	bne.n	8002eca <main+0x56>
      {
        STM_EVAL_LEDOff(LED6); // blue LED OFF
 8002f06:	2003      	movs	r0, #3
 8002f08:	f7ff f944 	bl	8002194 <STM_EVAL_LEDOff>
        pass = 0.0f;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <main+0xb0>)
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
        state = OFF;
 8002f14:	4b02      	ldr	r3, [pc, #8]	; (8002f20 <main+0xac>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
      }
    }

  }
 8002f1a:	e7d6      	b.n	8002eca <main+0x56>
 8002f1c:	20000290 	.word	0x20000290
 8002f20:	2000008a 	.word	0x2000008a
 8002f24:	20000058 	.word	0x20000058

08002f28 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  the new data to the first half of buffer while DMA is transferring data from
  the second half. And when Transfer complete occurs, load the second half of
  the buffer while the DMA is transferring from the first half ... */


}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	STM_EVAL_LEDOn(LED5); /*  alert : red LED !  */
 8002f44:	2002      	movs	r0, #2
 8002f46:	f7ff f90d 	bl	8002164 <STM_EVAL_LEDOn>
	return (0);
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
	// Turns off yellow LED -- indicates no error occurred.
	// STM_EVAL_LEDOff(LED3);

	// float32_t  sinOutput;
	volatile int i = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]

	// float32_t ratio = 20/48000;

	for(i = 0; i < BUFF_LEN; i+=1)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e081      	b.n	8003068 <EVAL_AUDIO_TransferComplete_CallBack+0x118>
		// buffer_lfo[i] = 500 + 500*arm_sin_f32((phase_lfo+i)*500/48000);
		// buffer_lfo[i] = 500 + 500*sin(i*375*2*PI/48000);					//
		// buffer_lfo[i] = 1500 + 1500*arm_sin_f32(i*375*2*PI/48000);


		buffer_vco[i] = 2000 + 2000*arm_sin_f32((phase_lfo+i)*375*2*PI/48000);		// phase_lfo should allow for arbitrary vco freq.
 8002f64:	697c      	ldr	r4, [r7, #20]
 8002f66:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <EVAL_AUDIO_TransferComplete_CallBack+0x158>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4413      	add	r3, r2
 8002f72:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f82:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80030ac <EVAL_AUDIO_TransferComplete_CallBack+0x15c>
 8002f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80030b0 <EVAL_AUDIO_TransferComplete_CallBack+0x160>
 8002f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f92:	eeb0 0a66 	vmov.f32	s0, s13
 8002f96:	f000 fac7 	bl	8003528 <arm_sin_f32>
 8002f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f9e:	eddf 7a45 	vldr	s15, [pc, #276]	; 80030b4 <EVAL_AUDIO_TransferComplete_CallBack+0x164>
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80030b4 <EVAL_AUDIO_TransferComplete_CallBack+0x164>
 8002faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb2:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fb6:	88bb      	ldrh	r3, [r7, #4]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <EVAL_AUDIO_TransferComplete_CallBack+0x168>)
 8002fbc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		buffer_lfo_float[i] = 0.5 + 0.4*arm_sin_f32((phase_lfo+i)*2*2*PI/48000);	// phase_lfo allows for arbitrary lfo freq.
 8002fc0:	697c      	ldr	r4, [r7, #20]
 8002fc2:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <EVAL_AUDIO_TransferComplete_CallBack+0x158>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80030ac <EVAL_AUDIO_TransferComplete_CallBack+0x15c>
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80030b0 <EVAL_AUDIO_TransferComplete_CallBack+0x160>
 8002fe4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fe8:	eeb0 0a66 	vmov.f32	s0, s13
 8002fec:	f000 fa9c 	bl	8003528 <arm_sin_f32>
 8002ff0:	ee10 3a10 	vmov	r3, s0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fa4b 	bl	8000490 <__aeabi_f2d>
 8002ffa:	a329      	add	r3, pc, #164	; (adr r3, 80030a0 <EVAL_AUDIO_TransferComplete_CallBack+0x150>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fa9a 	bl	8000538 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <EVAL_AUDIO_TransferComplete_CallBack+0x16c>)
 8003012:	f7fd f8df 	bl	80001d4 <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fc9d 	bl	800095c <__aeabi_d2f>
 8003022:	4601      	mov	r1, r0
 8003024:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <EVAL_AUDIO_TransferComplete_CallBack+0x170>)
 8003026:	00a3      	lsls	r3, r4, #2
 8003028:	4413      	add	r3, r2
 800302a:	6019      	str	r1, [r3, #0]
		buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4921      	ldr	r1, [pc, #132]	; (80030b8 <EVAL_AUDIO_TransferComplete_CallBack+0x168>)
 8003032:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003036:	b292      	uxth	r2, r2
 8003038:	ee07 2a90 	vmov	s15, r2
 800303c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	491f      	ldr	r1, [pc, #124]	; (80030c0 <EVAL_AUDIO_TransferComplete_CallBack+0x170>)
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	440a      	add	r2, r1
 8003048:	edd2 7a00 	vldr	s15, [r2]
 800304c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003054:	edc7 7a01 	vstr	s15, [r7, #4]
 8003058:	88ba      	ldrh	r2, [r7, #4]
 800305a:	b291      	uxth	r1, r2
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <EVAL_AUDIO_TransferComplete_CallBack+0x174>)
 800305e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// float32_t  sinOutput;
	volatile int i = 0;

	// float32_t ratio = 20/48000;

	for(i = 0; i < BUFF_LEN; i+=1)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	f77f af7a 	ble.w	8002f64 <EVAL_AUDIO_TransferComplete_CallBack+0x14>
	}
	// Floating point vector multiplication.
	// arm_mult_f32(buffer_vco, buffer_lfo, buffer_output, BUFF_LEN);

	// Remember lfo phase and resume next run of callback.
	phase_lfo = (phase_lfo + i) % SAMPLERATE;
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <EVAL_AUDIO_TransferComplete_CallBack+0x158>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4413      	add	r3, r2
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <EVAL_AUDIO_TransferComplete_CallBack+0x178>)
 800307e:	fb82 1203 	smull	r1, r2, r2, r3
 8003082:	1291      	asrs	r1, r2, #10
 8003084:	17da      	asrs	r2, r3, #31
 8003086:	1a8a      	subs	r2, r1, r2
 8003088:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800308c:	fb01 f202 	mul.w	r2, r1, r2
 8003090:	1a9a      	subs	r2, r3, r2
 8003092:	b292      	uxth	r2, r2
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <EVAL_AUDIO_TransferComplete_CallBack+0x158>)
 8003096:	801a      	strh	r2, [r3, #0]
	return;
 8003098:	bf00      	nop
}
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	9999999a 	.word	0x9999999a
 80030a4:	3fd99999 	.word	0x3fd99999
 80030a8:	20000390 	.word	0x20000390
 80030ac:	40490fdb 	.word	0x40490fdb
 80030b0:	473b8000 	.word	0x473b8000
 80030b4:	44fa0000 	.word	0x44fa0000
 80030b8:	2000008c 	.word	0x2000008c
 80030bc:	3fe00000 	.word	0x3fe00000
 80030c0:	20000090 	.word	0x20000090
 80030c4:	20000290 	.word	0x20000290
 80030c8:	057619f1 	.word	0x057619f1

080030cc <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */

  // return -1;
	return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff f83d 	bl	8002164 <STM_EVAL_LEDOn>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop

080030f4 <ADC3_CH12_DMA_Config>:
  * @brief  ADC3 channel12 with DMA configuration
  * @param  None
  * @retval None
  */
void ADC3_CH12_DMA_Config(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b09c      	sub	sp, #112	; 0x70
 80030f8:	af00      	add	r7, sp, #0
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC, ENABLE);
 80030fa:	2101      	movs	r1, #1
 80030fc:	483b      	ldr	r0, [pc, #236]	; (80031ec <ADC3_CH12_DMA_Config+0xf8>)
 80030fe:	f7fe fd37 	bl	8001b70 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 8003102:	2101      	movs	r1, #1
 8003104:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003108:	f7fe fd72 	bl	8001bf0 <RCC_APB2PeriphClockCmd>

  /* DMA2 Stream0 channel0 configuration **************************************/
  DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 800310c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003110:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC3_DR_ADDRESS;
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <ADC3_CH12_DMA_Config+0xfc>)
 8003114:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC3ConvertedValue;
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <ADC3_CH12_DMA_Config+0x100>)
 8003118:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_BufferSize = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800312a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8003136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 800313c:	2300      	movs	r3, #0
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003140:	2300      	movs	r3, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8003144:	2301      	movs	r3, #1
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800314c:	2300      	movs	r3, #0
 800314e:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4619      	mov	r1, r3
 8003156:	4828      	ldr	r0, [pc, #160]	; (80031f8 <ADC3_CH12_DMA_Config+0x104>)
 8003158:	f7fd ff98 	bl	800108c <DMA_Init>
  DMA_Cmd(DMA2_Stream0, ENABLE);
 800315c:	2101      	movs	r1, #1
 800315e:	4826      	ldr	r0, [pc, #152]	; (80031f8 <ADC3_CH12_DMA_Config+0x104>)
 8003160:	f7fd ffec 	bl	800113c <DMA_Cmd>

  /* Configure ADC3 Channel12 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8003164:	2304      	movs	r3, #4
 8003166:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003168:	2303      	movs	r3, #3
 800316a:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800316c:	2300      	movs	r3, #0
 800316e:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4821      	ldr	r0, [pc, #132]	; (80031fc <ADC3_CH12_DMA_Config+0x108>)
 8003176:	f7fe f913 	bl	80013a0 <GPIO_Init>

  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 800317a:	2300      	movs	r3, #0
 800317c:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 800317e:	2300      	movs	r3, #0
 8003180:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003182:	2300      	movs	r3, #0
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8003186:	2300      	movs	r3, #0
 8003188:	657b      	str	r3, [r7, #84]	; 0x54
  ADC_CommonInit(&ADC_CommonInitStructure);
 800318a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fcec 	bl	8000b6c <ADC_CommonInit>

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_8b;
 8003194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003198:	65bb      	str	r3, [r7, #88]	; 0x58
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80031a6:	2300      	movs	r3, #0
 80031a8:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80031aa:	2300      	movs	r3, #0
 80031ac:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_InitStructure.ADC_NbrOfConversion = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  ADC_Init(ADC3, &ADC_InitStructure);
 80031b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b8:	4619      	mov	r1, r3
 80031ba:	4811      	ldr	r0, [pc, #68]	; (8003200 <ADC3_CH12_DMA_Config+0x10c>)
 80031bc:	f7fd fc80 	bl	8000ac0 <ADC_Init>

  /* ADC3 regular channel12 configuration *************************************/
  ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);
 80031c0:	2300      	movs	r3, #0
 80031c2:	2201      	movs	r2, #1
 80031c4:	210c      	movs	r1, #12
 80031c6:	480e      	ldr	r0, [pc, #56]	; (8003200 <ADC3_CH12_DMA_Config+0x10c>)
 80031c8:	f7fd fd14 	bl	8000bf4 <ADC_RegularChannelConfig>

 /* Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);
 80031cc:	2101      	movs	r1, #1
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <ADC3_CH12_DMA_Config+0x10c>)
 80031d0:	f7fd fdf6 	bl	8000dc0 <ADC_DMARequestAfterLastTransferCmd>

  /* Enable ADC3 DMA */
  ADC_DMACmd(ADC3, ENABLE);
 80031d4:	2101      	movs	r1, #1
 80031d6:	480a      	ldr	r0, [pc, #40]	; (8003200 <ADC3_CH12_DMA_Config+0x10c>)
 80031d8:	f7fd fdd6 	bl	8000d88 <ADC_DMACmd>

  /* Enable ADC3 */
  ADC_Cmd(ADC3, ENABLE);
 80031dc:	2101      	movs	r1, #1
 80031de:	4808      	ldr	r0, [pc, #32]	; (8003200 <ADC3_CH12_DMA_Config+0x10c>)
 80031e0:	f7fd fcec 	bl	8000bbc <ADC_Cmd>
}
 80031e4:	bf00      	nop
 80031e6:	3770      	adds	r7, #112	; 0x70
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	00400004 	.word	0x00400004
 80031f0:	4001224c 	.word	0x4001224c
 80031f4:	20000088 	.word	0x20000088
 80031f8:	40026410 	.word	0x40026410
 80031fc:	40020800 	.word	0x40020800
 8003200:	40012200 	.word	0x40012200

08003204 <randomNum>:
//---------------------------------------------------------------------------
/**************
* returns a random float between 0 and 1
*****************/
float randomNum(void)
  {
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
		return 0.5;
 8003208:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800320c:	ee07 3a90 	vmov	s15, r3
  }
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <TimingDelay_Decrement>:


void TimingDelay_Decrement(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <TimingDelay_Decrement+0x20>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <TimingDelay_Decrement+0x16>
  {
    TimingDelay--;
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <TimingDelay_Decrement+0x20>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a03      	ldr	r2, [pc, #12]	; (800323c <TimingDelay_Decrement+0x20>)
 8003230:	6013      	str	r3, [r2, #0]
  }
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000060 	.word	0x20000060

08003240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003246:	e003      	b.n	8003250 <LoopCopyDataInit>

08003248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800324a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800324c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800324e:	3104      	adds	r1, #4

08003250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003258:	d3f6      	bcc.n	8003248 <CopyDataInit>
  ldr  r2, =_sbss
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800325c:	e002      	b.n	8003264 <LoopFillZerobss>

0800325e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800325e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003260:	f842 3b04 	str.w	r3, [r2], #4

08003264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003268:	d3f9      	bcc.n	800325e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800326a:	f000 f893 	bl	8003394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326e:	f000 f997 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003272:	f7ff fdff 	bl	8002e74 <main>
  bx  lr    
 8003276:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003278:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800327c:	08003e28 	.word	0x08003e28
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003284:	20000064 	.word	0x20000064
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003288:	20000064 	.word	0x20000064
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800328c:	20000410 	.word	0x20000410

08003290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC_IRQHandler>
	...

08003294 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80032a8:	e7fe      	b.n	80032a8 <HardFault_Handler+0x4>
 80032aa:	bf00      	nop

080032ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80032b0:	e7fe      	b.n	80032b0 <MemManage_Handler+0x4>
 80032b2:	bf00      	nop

080032b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80032b8:	e7fe      	b.n	80032b8 <BusFault_Handler+0x4>
 80032ba:	bf00      	nop

080032bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>
 80032c2:	bf00      	nop

080032c4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	//f1 = 30 + 5000.f * ((float)ADC3ConvertedValue) / 255.f;
	TimingDelay_Decrement();
 80032f8:	f7ff ff90 	bl	800321c <TimingDelay_Decrement>
	if (TimingDelay == 0)
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <SysTick_Handler+0x68>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d129      	bne.n	8003358 <SysTick_Handler+0x64>
	{
		/* choose a random note  */
		f1 = 2000.0f*randomNum() + 50.0f;
 8003304:	f7ff ff7e 	bl	8003204 <randomNum>
 8003308:	ee07 0a90 	vmov	s15, r0
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003360 <SysTick_Handler+0x6c>
 8003314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003318:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003364 <SysTick_Handler+0x70>
 800331c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <SysTick_Handler+0x74>)
 8003322:	edc3 7a00 	vstr	s15, [r3]

		// Mike
		// f1 = ADC3ConvertedValue * 10;

		/*  update the duration between each note   */
		TimingDelay = (uint32_t)(5.f + 50.f * ((float)ADC3ConvertedValue) / 255.f);
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <SysTick_Handler+0x78>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003334:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003364 <SysTick_Handler+0x70>
 8003338:	ee27 7a87 	vmul.f32	s14, s15, s14
 800333c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003370 <SysTick_Handler+0x7c>
 8003340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003344:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800334c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003350:	ee17 2a90 	vmov	r2, s15
 8003354:	4b01      	ldr	r3, [pc, #4]	; (800335c <SysTick_Handler+0x68>)
 8003356:	601a      	str	r2, [r3, #0]
	}
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000060 	.word	0x20000060
 8003360:	44fa0000 	.word	0x44fa0000
 8003364:	42480000 	.word	0x42480000
 8003368:	2000005c 	.word	0x2000005c
 800336c:	20000088 	.word	0x20000088
 8003370:	437f0000 	.word	0x437f0000

08003374 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  //#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <SystemInit+0x60>)
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <SystemInit+0x60>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  //#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <SystemInit+0x64>)
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <SystemInit+0x64>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <SystemInit+0x64>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <SystemInit+0x64>)
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <SystemInit+0x64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <SystemInit+0x64>)
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <SystemInit+0x68>)
 80033ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <SystemInit+0x64>)
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <SystemInit+0x64>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SystemInit+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80033e2:	f000 f80d 	bl	8003400 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033e6:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <SystemInit+0x60>)
 80033e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ec:	609a      	str	r2, [r3, #8]
#endif
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	24003010 	.word	0x24003010

08003400 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800340e:	4a41      	ldr	r2, [pc, #260]	; (8003514 <SetSysClock+0x114>)
 8003410:	4b40      	ldr	r3, [pc, #256]	; (8003514 <SetSysClock+0x114>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <SetSysClock+0x114>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <SetSysClock+0x38>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003436:	d1f0      	bne.n	800341a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <SetSysClock+0x114>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003444:	2301      	movs	r3, #1
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	e001      	b.n	800344e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d142      	bne.n	80034da <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003454:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <SetSysClock+0x114>)
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <SetSysClock+0x114>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003460:	4a2d      	ldr	r2, [pc, #180]	; (8003518 <SetSysClock+0x118>)
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <SetSysClock+0x118>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <SetSysClock+0x114>)
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <SetSysClock+0x114>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <SetSysClock+0x114>)
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <SetSysClock+0x114>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003480:	4a24      	ldr	r2, [pc, #144]	; (8003514 <SetSysClock+0x114>)
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <SetSysClock+0x114>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800348a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <SetSysClock+0x114>)
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <SetSysClock+0x11c>)
 8003490:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <SetSysClock+0x114>)
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <SetSysClock+0x114>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800349e:	bf00      	nop
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <SetSysClock+0x114>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f9      	beq.n	80034a0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <SetSysClock+0x120>)
 80034ae:	f240 6205 	movw	r2, #1541	; 0x605
 80034b2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80034b4:	4a17      	ldr	r2, [pc, #92]	; (8003514 <SetSysClock+0x114>)
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <SetSysClock+0x114>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80034c0:	4a14      	ldr	r2, [pc, #80]	; (8003514 <SetSysClock+0x114>)
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <SetSysClock+0x114>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80034cc:	bf00      	nop
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <SetSysClock+0x114>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d1f9      	bne.n	80034ce <SetSysClock+0xce>

/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <SetSysClock+0x114>)
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <SetSysClock+0x114>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034e4:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <SetSysClock+0x114>)
 80034e8:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <SetSysClock+0x124>)
 80034ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <SetSysClock+0x114>)
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <SetSysClock+0x114>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034f8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80034fa:	bf00      	nop
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SetSysClock+0x114>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f9      	beq.n	80034fc <SetSysClock+0xfc>
  {
  }
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	07405408 	.word	0x07405408
 8003520:	40023c00 	.word	0x40023c00
 8003524:	30004080 	.word	0x30004080

08003528 <arm_sin_f32>:
 8003528:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003594 <arm_sin_f32+0x6c>
 800352c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003530:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800353c:	d504      	bpl.n	8003548 <arm_sin_f32+0x20>
 800353e:	ee17 3a90 	vmov	r3, s15
 8003542:	3b01      	subs	r3, #1
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003598 <arm_sin_f32+0x70>
 8003550:	4a12      	ldr	r2, [pc, #72]	; (800359c <arm_sin_f32+0x74>)
 8003552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003556:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800355a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800355e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003562:	ee16 3a90 	vmov	r3, s13
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee06 3a90 	vmov	s13, r3
 800356e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8003572:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800357a:	edd1 6a00 	vldr	s13, [r1]
 800357e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003582:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800358e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003592:	4770      	bx	lr
 8003594:	3e22f983 	.word	0x3e22f983
 8003598:	44000000 	.word	0x44000000
 800359c:	0800361c 	.word	0x0800361c

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <__libc_init_array+0x3c>)
 80035a4:	4c0e      	ldr	r4, [pc, #56]	; (80035e0 <__libc_init_array+0x40>)
 80035a6:	1ae4      	subs	r4, r4, r3
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	2500      	movs	r5, #0
 80035ac:	461e      	mov	r6, r3
 80035ae:	42a5      	cmp	r5, r4
 80035b0:	d004      	beq.n	80035bc <__libc_init_array+0x1c>
 80035b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b6:	4798      	blx	r3
 80035b8:	3501      	adds	r5, #1
 80035ba:	e7f8      	b.n	80035ae <__libc_init_array+0xe>
 80035bc:	f000 f816 	bl	80035ec <_init>
 80035c0:	4c08      	ldr	r4, [pc, #32]	; (80035e4 <__libc_init_array+0x44>)
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <__libc_init_array+0x48>)
 80035c4:	1ae4      	subs	r4, r4, r3
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	2500      	movs	r5, #0
 80035ca:	461e      	mov	r6, r3
 80035cc:	42a5      	cmp	r5, r4
 80035ce:	d004      	beq.n	80035da <__libc_init_array+0x3a>
 80035d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d4:	4798      	blx	r3
 80035d6:	3501      	adds	r5, #1
 80035d8:	e7f8      	b.n	80035cc <__libc_init_array+0x2c>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	08003e20 	.word	0x08003e20
 80035e0:	08003e20 	.word	0x08003e20
 80035e4:	08003e24 	.word	0x08003e24
 80035e8:	08003e20 	.word	0x08003e20

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
