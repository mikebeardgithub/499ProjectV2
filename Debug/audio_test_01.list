
C:\stm32_workspace\audio_test_01\Debug\audio_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080042d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          0000032c  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200003ac  200003ac  00020080  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000085ca  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000180e  00000000  00000000  00028678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a78  00000000  00000000  00029e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000958  00000000  00000000  0002a900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004187  00000000  00000000  0002b258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039fc  00000000  00000000  0002f3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  00032ddb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ac4  00000000  00000000  00032ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  00035990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a9c 	.word	0x08003a9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08003a9c 	.word	0x08003a9c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	791b      	ldrb	r3, [r3, #4]
 80002b4:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002ba:	4313      	orrs	r3, r2
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	4313      	orrs	r3, r2
 80002c0:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <ADC_Init+0xa8>)
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002de:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002e4:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002ec:	4313      	orrs	r3, r2
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000306:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	7d1b      	ldrb	r3, [r3, #20]
 800030c:	3b01      	subs	r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	7afb      	ldrb	r3, [r7, #11]
 8000312:	4313      	orrs	r3, r2
 8000314:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000316:	7afb      	ldrb	r3, [r7, #11]
 8000318:	051b      	lsls	r3, r3, #20
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	c0fff7fd 	.word	0xc0fff7fd

08000338 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <ADC_CommonInit+0x48>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <ADC_CommonInit+0x4c>)
 800034e:	4013      	ands	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800035a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000360:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000366:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	4313      	orrs	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <ADC_CommonInit+0x48>)
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	6053      	str	r3, [r2, #4]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40012300 	.word	0x40012300
 8000384:	fffc30e0 	.word	0xfffc30e0

08000388 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d006      	beq.n	80003a8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	f043 0201 	orr.w	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003a6:	e005      	b.n	80003b4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f023 0201 	bic.w	r2, r3, #1
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  }
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	4608      	mov	r0, r1
 80003ca:	4611      	mov	r1, r2
 80003cc:	461a      	mov	r2, r3
 80003ce:	4603      	mov	r3, r0
 80003d0:	70fb      	strb	r3, [r7, #3]
 80003d2:	460b      	mov	r3, r1
 80003d4:	70bb      	strb	r3, [r7, #2]
 80003d6:	4613      	mov	r3, r2
 80003d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	d923      	bls.n	8000430 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	f1a3 020a 	sub.w	r2, r3, #10
 80003f4:	4613      	mov	r3, r2
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	4413      	add	r3, r2
 80003fa:	2207      	movs	r2, #7
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	43db      	mvns	r3, r3
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	4013      	ands	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800040c:	7879      	ldrb	r1, [r7, #1]
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	f1a3 020a 	sub.w	r2, r3, #10
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	e01e      	b.n	800046e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000436:	78fa      	ldrb	r2, [r7, #3]
 8000438:	4613      	mov	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	4413      	add	r3, r2
 800043e:	2207      	movs	r2, #7
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	43db      	mvns	r3, r3
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000450:	7879      	ldrb	r1, [r7, #1]
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	fa01 f303 	lsl.w	r3, r1, r3
 800045e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	4313      	orrs	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800046e:	78bb      	ldrb	r3, [r7, #2]
 8000470:	2b06      	cmp	r3, #6
 8000472:	d821      	bhi.n	80004b8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000478:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	221f      	movs	r2, #31
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	43db      	mvns	r3, r3
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000496:	78f9      	ldrb	r1, [r7, #3]
 8000498:	78bb      	ldrb	r3, [r7, #2]
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004b6:	e047      	b.n	8000548 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80004b8:	78bb      	ldrb	r3, [r7, #2]
 80004ba:	2b0c      	cmp	r3, #12
 80004bc:	d821      	bhi.n	8000502 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80004c4:	78bb      	ldrb	r3, [r7, #2]
 80004c6:	1fda      	subs	r2, r3, #7
 80004c8:	4613      	mov	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	221f      	movs	r2, #31
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	43db      	mvns	r3, r3
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004e0:	78f9      	ldrb	r1, [r7, #3]
 80004e2:	78bb      	ldrb	r3, [r7, #2]
 80004e4:	1fda      	subs	r2, r3, #7
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000500:	e022      	b.n	8000548 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000508:	78bb      	ldrb	r3, [r7, #2]
 800050a:	f1a3 020d 	sub.w	r2, r3, #13
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	221f      	movs	r2, #31
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	43db      	mvns	r3, r3
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000526:	78f9      	ldrb	r1, [r7, #3]
 8000528:	78bb      	ldrb	r3, [r7, #2]
 800052a:	f1a3 020d 	sub.w	r2, r3, #13
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4313      	orrs	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	609a      	str	r2, [r3, #8]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d006      	beq.n	8000594 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000592:	e005      	b.n	80005a0 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
  }
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 80005ca:	e005      	b.n	80005d8 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	609a      	str	r2, [r3, #8]
  }
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <DAC_Init+0x64>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80005fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800061c:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000622:	4313      	orrs	r3, r2
 8000624:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4313      	orrs	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <DAC_Init+0x64>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40007400 	.word	0x40007400

0800064c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d009      	beq.n	8000672 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <DAC_Cmd+0x48>)
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <DAC_Cmd+0x48>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	2001      	movs	r0, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	fa00 f303 	lsl.w	r3, r0, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000670:	e009      	b.n	8000686 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <DAC_Cmd+0x48>)
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <DAC_Cmd+0x48>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	2001      	movs	r0, #1
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	fa00 f303 	lsl.w	r3, r0, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	600b      	str	r3, [r1, #0]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40007400 	.word	0x40007400

08000698 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <DAC_SetChannel1Data+0x34>)
 80006aa:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	3308      	adds	r3, #8
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	461a      	mov	r2, r3
 80006ba:	887b      	ldrh	r3, [r7, #2]
 80006bc:	6013      	str	r3, [r2, #0]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40007400 	.word	0x40007400

080006d0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 0201 	bic.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2221      	movs	r2, #33	; 0x21
 8000706:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a46      	ldr	r2, [pc, #280]	; (8000824 <DMA_DeInit+0x154>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d103      	bne.n	8000718 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000710:	4b45      	ldr	r3, [pc, #276]	; (8000828 <DMA_DeInit+0x158>)
 8000712:	223d      	movs	r2, #61	; 0x3d
 8000714:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000716:	e07e      	b.n	8000816 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a44      	ldr	r2, [pc, #272]	; (800082c <DMA_DeInit+0x15c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d104      	bne.n	800072a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <DMA_DeInit+0x158>)
 8000722:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000726:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000728:	e075      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a40      	ldr	r2, [pc, #256]	; (8000830 <DMA_DeInit+0x160>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d104      	bne.n	800073c <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <DMA_DeInit+0x158>)
 8000734:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000738:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800073a:	e06c      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <DMA_DeInit+0x164>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d104      	bne.n	800074e <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <DMA_DeInit+0x158>)
 8000746:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800074a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800074c:	e063      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a39      	ldr	r2, [pc, #228]	; (8000838 <DMA_DeInit+0x168>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d103      	bne.n	800075e <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <DMA_DeInit+0x158>)
 8000758:	4a38      	ldr	r2, [pc, #224]	; (800083c <DMA_DeInit+0x16c>)
 800075a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800075c:	e05b      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a37      	ldr	r2, [pc, #220]	; (8000840 <DMA_DeInit+0x170>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d103      	bne.n	800076e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <DMA_DeInit+0x158>)
 8000768:	4a36      	ldr	r2, [pc, #216]	; (8000844 <DMA_DeInit+0x174>)
 800076a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800076c:	e053      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a35      	ldr	r2, [pc, #212]	; (8000848 <DMA_DeInit+0x178>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d103      	bne.n	800077e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000776:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <DMA_DeInit+0x158>)
 8000778:	4a34      	ldr	r2, [pc, #208]	; (800084c <DMA_DeInit+0x17c>)
 800077a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800077c:	e04b      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a33      	ldr	r2, [pc, #204]	; (8000850 <DMA_DeInit+0x180>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d104      	bne.n	8000790 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <DMA_DeInit+0x158>)
 8000788:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800078c:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800078e:	e042      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a30      	ldr	r2, [pc, #192]	; (8000854 <DMA_DeInit+0x184>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d103      	bne.n	80007a0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <DMA_DeInit+0x188>)
 800079a:	223d      	movs	r2, #61	; 0x3d
 800079c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800079e:	e03a      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a2e      	ldr	r2, [pc, #184]	; (800085c <DMA_DeInit+0x18c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d104      	bne.n	80007b2 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <DMA_DeInit+0x188>)
 80007aa:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80007ae:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007b0:	e031      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <DMA_DeInit+0x190>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d104      	bne.n	80007c4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <DMA_DeInit+0x188>)
 80007bc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80007c0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007c2:	e028      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <DMA_DeInit+0x194>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d104      	bne.n	80007d6 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <DMA_DeInit+0x188>)
 80007ce:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80007d2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007d4:	e01f      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a23      	ldr	r2, [pc, #140]	; (8000868 <DMA_DeInit+0x198>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d103      	bne.n	80007e6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <DMA_DeInit+0x188>)
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <DMA_DeInit+0x16c>)
 80007e2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007e4:	e017      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <DMA_DeInit+0x19c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d103      	bne.n	80007f6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <DMA_DeInit+0x188>)
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <DMA_DeInit+0x174>)
 80007f2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007f4:	e00f      	b.n	8000816 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1d      	ldr	r2, [pc, #116]	; (8000870 <DMA_DeInit+0x1a0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d103      	bne.n	8000806 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <DMA_DeInit+0x188>)
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <DMA_DeInit+0x17c>)
 8000802:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000804:	e007      	b.n	8000816 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <DMA_DeInit+0x1a4>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d103      	bne.n	8000816 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <DMA_DeInit+0x188>)
 8000810:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000814:	60da      	str	r2, [r3, #12]
    }
  }
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40026010 	.word	0x40026010
 8000828:	40026000 	.word	0x40026000
 800082c:	40026028 	.word	0x40026028
 8000830:	40026040 	.word	0x40026040
 8000834:	40026058 	.word	0x40026058
 8000838:	40026070 	.word	0x40026070
 800083c:	2000003d 	.word	0x2000003d
 8000840:	40026088 	.word	0x40026088
 8000844:	20000f40 	.word	0x20000f40
 8000848:	400260a0 	.word	0x400260a0
 800084c:	203d0000 	.word	0x203d0000
 8000850:	400260b8 	.word	0x400260b8
 8000854:	40026410 	.word	0x40026410
 8000858:	40026400 	.word	0x40026400
 800085c:	40026428 	.word	0x40026428
 8000860:	40026440 	.word	0x40026440
 8000864:	40026458 	.word	0x40026458
 8000868:	40026470 	.word	0x40026470
 800086c:	40026488 	.word	0x40026488
 8000870:	400264a0 	.word	0x400264a0
 8000874:	400264b8 	.word	0x400264b8

08000878 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <DMA_Init+0xac>)
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80008a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80008ae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80008ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80008c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008cc:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f023 0307 	bic.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4313      	orrs	r3, r2
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60da      	str	r2, [r3, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	f01c803f 	.word	0xf01c803f

08000928 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f043 0201 	orr.w	r2, r3, #1
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000946:	e005      	b.n	8000954 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 0201 	bic.w	r2, r3, #1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
  }
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <DMA_GetFlagStatus+0x6c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d802      	bhi.n	8000980 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <DMA_GetFlagStatus+0x70>)
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	e001      	b.n	8000984 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <DMA_GetFlagStatus+0x74>)
 8000982:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e002      	b.n	800099c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80009a2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80009a6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	4013      	ands	r3, r2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80009b2:	2301      	movs	r3, #1
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e001      	b.n	80009bc <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	4002640f 	.word	0x4002640f
 80009d0:	40026000 	.word	0x40026000
 80009d4:	40026400 	.word	0x40026400

080009d8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <DMA_ClearFlag+0x50>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d802      	bhi.n	80009f0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <DMA_ClearFlag+0x54>)
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e001      	b.n	80009f4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <DMA_ClearFlag+0x58>)
 80009f2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000a04:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000a0c:	e006      	b.n	8000a1c <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000a14:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	6093      	str	r3, [r2, #8]
  }    
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	4002640f 	.word	0x4002640f
 8000a2c:	40026000 	.word	0x40026000
 8000a30:	40026400 	.word	0x40026400

08000a34 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00f      	beq.n	8000a6c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d006      	beq.n	8000a60 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	e005      	b.n	8000a6c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2b80      	cmp	r3, #128	; 0x80
 8000a70:	d014      	beq.n	8000a9c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	f003 031e 	and.w	r3, r3, #30
 8000a82:	431a      	orrs	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000a88:	e008      	b.n	8000a9c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	f003 031e 	and.w	r3, r3, #30
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <EXTI_Init+0xe0>)
 8000ab6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	799b      	ldrb	r3, [r3, #6]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d04f      	beq.n	8000b60 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ac0:	4931      	ldr	r1, [pc, #196]	; (8000b88 <EXTI_Init+0xe0>)
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <EXTI_Init+0xe0>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ad0:	492d      	ldr	r1, [pc, #180]	; (8000b88 <EXTI_Init+0xe0>)
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <EXTI_Init+0xe0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000afa:	4923      	ldr	r1, [pc, #140]	; (8000b88 <EXTI_Init+0xe0>)
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <EXTI_Init+0xe0>)
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4013      	ands	r3, r2
 8000b08:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000b0a:	491f      	ldr	r1, [pc, #124]	; (8000b88 <EXTI_Init+0xe0>)
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <EXTI_Init+0xe0>)
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	4013      	ands	r3, r2
 8000b18:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	795b      	ldrb	r3, [r3, #5]
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	d10e      	bne.n	8000b40 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000b22:	4919      	ldr	r1, [pc, #100]	; (8000b88 <EXTI_Init+0xe0>)
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <EXTI_Init+0xe0>)
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <EXTI_Init+0xe0>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <EXTI_Init+0xe0>)
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000b3e:	e01d      	b.n	8000b7c <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <EXTI_Init+0xe0>)
 8000b42:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000b5e:	e00d      	b.n	8000b7c <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	6811      	ldr	r1, [r2, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	400a      	ands	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40013c00 	.word	0x40013c00

08000b8c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e076      	b.n	8000c96 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d165      	bne.n	8000c90 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	4619      	mov	r1, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <GPIO_Init+0x76>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d12e      	bne.n	8000c60 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	401a      	ands	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	4619      	mov	r1, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	401a      	ands	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	799b      	ldrb	r3, [r3, #6]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	79db      	ldrb	r3, [r3, #7]
 8000c80:	4619      	mov	r1, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d985      	bls.n	8000ba8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e001      	b.n	8000cce <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000cec:	787b      	ldrb	r3, [r7, #1]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	887a      	ldrh	r2, [r7, #2]
 8000cf6:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000cf8:	e002      	b.n	8000d00 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	835a      	strh	r2, [r3, #26]
  }
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d24:	787a      	ldrb	r2, [r7, #1]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	210f      	movs	r1, #15
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	ea02 0103 	and.w	r1, r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f100 0208 	add.w	r2, r0, #8
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <I2C_DeInit+0x68>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d10a      	bne.n	8000dc6 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000db0:	2101      	movs	r1, #1
 8000db2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000db6:	f000 fb31 	bl	800141c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dc0:	f000 fb2c 	bl	800141c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000dc4:	e01c      	b.n	8000e00 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <I2C_DeInit+0x6c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10a      	bne.n	8000de4 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dd4:	f000 fb22 	bl	800141c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dde:	f000 fb1d 	bl	800141c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000de2:	e00d      	b.n	8000e00 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <I2C_DeInit+0x70>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d109      	bne.n	8000e00 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000dec:	2101      	movs	r1, #1
 8000dee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000df2:	f000 fb13 	bl	800141c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000df6:	2100      	movs	r1, #0
 8000df8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000dfc:	f000 fb0e 	bl	800141c <RCC_APB1PeriphResetCmd>
    }
  }
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	40005800 	.word	0x40005800
 8000e10:	40005c00 	.word	0x40005c00

08000e14 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e22:	2300      	movs	r3, #0
 8000e24:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000e26:	2304      	movs	r3, #4
 8000e28:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <I2C_Init+0x174>)
 8000e2c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f9e1 	bl	8001208 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <I2C_Init+0x178>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e62:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <I2C_Init+0x17c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d815      	bhi.n	8000eae <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d801      	bhi.n	8000e9a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e96:	2304      	movs	r3, #4
 8000e98:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	841a      	strh	r2, [r3, #32]
 8000eac:	e040      	b.n	8000f30 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	88db      	ldrh	r3, [r3, #6]
 8000eb2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d109      	bne.n	8000ece <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ecc:	e00e      	b.n	8000eec <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009a      	lsls	r2, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000efe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <I2C_Init+0x180>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1192      	asrs	r2, r2, #6
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f34:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f4e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f52:	f023 0302 	bic.w	r3, r3, #2
 8000f56:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	889a      	ldrh	r2, [r3, #4]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	895b      	ldrh	r3, [r3, #10]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f66:	4313      	orrs	r3, r2
 8000f68:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f6e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	899a      	ldrh	r2, [r3, #12]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	811a      	strh	r2, [r3, #8]
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	007a1200 	.word	0x007a1200
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	000186a0 	.word	0x000186a0
 8000f94:	10624dd3 	.word	0x10624dd3

08000f98 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d008      	beq.n	8000fbc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000fba:	e007      	b.n	8000fcc <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	801a      	strh	r2, [r3, #0]
  }
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000ffa:	e007      	b.n	800100c <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	801a      	strh	r2, [r3, #0]
  }
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800103a:	e007      	b.n	800104c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	801a      	strh	r2, [r3, #0]
  }
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001068:	78bb      	ldrb	r3, [r7, #2]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	e003      	b.n	8001080 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	821a      	strh	r2, [r3, #16]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80010b6:	e007      	b.n	80010c8 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	801a      	strh	r2, [r3, #0]
  }
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	821a      	strh	r2, [r3, #16]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	8a1b      	ldrh	r3, [r3, #16]
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001126:	2300      	movs	r3, #0
 8001128:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	8a9b      	ldrh	r3, [r3, #20]
 800112e:	b29b      	uxth	r3, r3
 8001130:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8b1b      	ldrh	r3, [r3, #24]
 8001136:	b29b      	uxth	r3, r3
 8001138:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4313      	orrs	r3, r2
 8001146:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800114a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	401a      	ands	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d102      	bne.n	800115e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001158:	2301      	movs	r3, #1
 800115a:	75fb      	strb	r3, [r7, #23]
 800115c:	e001      	b.n	8001162 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001162:	7dfb      	ldrb	r3, [r7, #23]
}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	0f1b      	lsrs	r3, r3, #28
 800118e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001196:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3314      	adds	r3, #20
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e005      	b.n	80011b2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	0c1b      	lsrs	r3, r3, #16
 80011aa:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3318      	adds	r3, #24
 80011b0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
 80011c2:	e001      	b.n	80011c8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80011ec:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	829a      	strh	r2, [r3, #20]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	2302      	movs	r3, #2
 8001226:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001228:	4b48      	ldr	r3, [pc, #288]	; (800134c <RCC_GetClocksFreq+0x144>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d007      	beq.n	8001248 <RCC_GetClocksFreq+0x40>
 8001238:	2b08      	cmp	r3, #8
 800123a:	d009      	beq.n	8001250 <RCC_GetClocksFreq+0x48>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d13f      	bne.n	80012c0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a43      	ldr	r2, [pc, #268]	; (8001350 <RCC_GetClocksFreq+0x148>)
 8001244:	601a      	str	r2, [r3, #0]
      break;
 8001246:	e03f      	b.n	80012c8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a42      	ldr	r2, [pc, #264]	; (8001354 <RCC_GetClocksFreq+0x14c>)
 800124c:	601a      	str	r2, [r3, #0]
      break;
 800124e:	e03b      	b.n	80012c8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <RCC_GetClocksFreq+0x144>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001258:	0d9b      	lsrs	r3, r3, #22
 800125a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <RCC_GetClocksFreq+0x144>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001264:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00d      	beq.n	8001288 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <RCC_GetClocksFreq+0x14c>)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	fbb2 f2f3 	udiv	r2, r2, r3
 8001274:	4b35      	ldr	r3, [pc, #212]	; (800134c <RCC_GetClocksFreq+0x144>)
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800127c:	400b      	ands	r3, r1
 800127e:	099b      	lsrs	r3, r3, #6
 8001280:	fb03 f302 	mul.w	r3, r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e00c      	b.n	80012a2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001288:	4a31      	ldr	r2, [pc, #196]	; (8001350 <RCC_GetClocksFreq+0x148>)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <RCC_GetClocksFreq+0x144>)
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001298:	400b      	ands	r3, r1
 800129a:	099b      	lsrs	r3, r3, #6
 800129c:	fb03 f302 	mul.w	r3, r3, r2
 80012a0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <RCC_GetClocksFreq+0x144>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	3301      	adds	r3, #1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
      break;
 80012be:	e003      	b.n	80012c8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <RCC_GetClocksFreq+0x148>)
 80012c4:	601a      	str	r2, [r3, #0]
      break;
 80012c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <RCC_GetClocksFreq+0x144>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <RCC_GetClocksFreq+0x150>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	40da      	lsrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <RCC_GetClocksFreq+0x144>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80012f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	0a9b      	lsrs	r3, r3, #10
 80012fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001300:	4a15      	ldr	r2, [pc, #84]	; (8001358 <RCC_GetClocksFreq+0x150>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4413      	add	r3, r2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	40da      	lsrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <RCC_GetClocksFreq+0x144>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001320:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	0b5b      	lsrs	r3, r3, #13
 8001326:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <RCC_GetClocksFreq+0x150>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	40da      	lsrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800
 8001350:	00f42400 	.word	0x00f42400
 8001354:	007a1200 	.word	0x007a1200
 8001358:	20000000 	.word	0x20000000

0800135c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800136e:	490a      	ldr	r1, [pc, #40]	; (8001398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4313      	orrs	r3, r2
 8001378:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800137a:	e006      	b.n	800138a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800137c:	4906      	ldr	r1, [pc, #24]	; (8001398 <RCC_AHB1PeriphClockCmd+0x3c>)
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	43db      	mvns	r3, r3
 8001386:	4013      	ands	r3, r2
 8001388:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80013b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80013ba:	e006      	b.n	80013ca <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <RCC_APB1PeriphClockCmd+0x3c>)
 80013c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4013      	ands	r3, r2
 80013c8:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <RCC_APB2PeriphClockCmd+0x3c>)
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <RCC_APB2PeriphClockCmd+0x3c>)
 80013f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80013fa:	e006      	b.n	800140a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <RCC_APB2PeriphClockCmd+0x3c>)
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <RCC_APB2PeriphClockCmd+0x3c>)
 8001400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	43db      	mvns	r3, r3
 8001406:	4013      	ands	r3, r2
 8001408:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <RCC_APB1PeriphResetCmd+0x3c>)
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <RCC_APB1PeriphResetCmd+0x3c>)
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800143a:	e006      	b.n	800144a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800143c:	4906      	ldr	r1, [pc, #24]	; (8001458 <RCC_APB1PeriphResetCmd+0x3c>)
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <RCC_APB1PeriphResetCmd+0x3c>)
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	43db      	mvns	r3, r3
 8001446:	4013      	ands	r3, r2
 8001448:	620b      	str	r3, [r1, #32]
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <RCC_APB2PeriphResetCmd+0x3c>)
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <RCC_APB2PeriphResetCmd+0x3c>)
 8001472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800147a:	e006      	b.n	800148a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <RCC_APB2PeriphResetCmd+0x3c>)
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <RCC_APB2PeriphResetCmd+0x3c>)
 8001480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	43db      	mvns	r3, r3
 8001486:	4013      	ands	r3, r2
 8001488:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <SPI_I2S_DeInit+0xc4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d10a      	bne.n	80014c2 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80014ac:	2101      	movs	r1, #1
 80014ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014b2:	f7ff ffd3 	bl	800145c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80014b6:	2100      	movs	r1, #0
 80014b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80014bc:	f7ff ffce 	bl	800145c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80014c0:	e049      	b.n	8001556 <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <SPI_I2S_DeInit+0xc8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10a      	bne.n	80014e0 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80014ca:	2101      	movs	r1, #1
 80014cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d0:	f7ff ffa4 	bl	800141c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80014d4:	2100      	movs	r1, #0
 80014d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014da:	f7ff ff9f 	bl	800141c <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80014de:	e03a      	b.n	8001556 <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <SPI_I2S_DeInit+0xcc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d10a      	bne.n	80014fe <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80014e8:	2101      	movs	r1, #1
 80014ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014ee:	f7ff ff95 	bl	800141c <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80014f2:	2100      	movs	r1, #0
 80014f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014f8:	f7ff ff90 	bl	800141c <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80014fc:	e02b      	b.n	8001556 <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <SPI_I2S_DeInit+0xd0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10a      	bne.n	800151c <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001506:	2101      	movs	r1, #1
 8001508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150c:	f7ff ffa6 	bl	800145c <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001510:	2100      	movs	r1, #0
 8001512:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001516:	f7ff ffa1 	bl	800145c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800151a:	e01c      	b.n	8001556 <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <SPI_I2S_DeInit+0xd4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10a      	bne.n	800153a <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001524:	2101      	movs	r1, #1
 8001526:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800152a:	f7ff ff97 	bl	800145c <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800152e:	2100      	movs	r1, #0
 8001530:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001534:	f7ff ff92 	bl	800145c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001538:	e00d      	b.n	8001556 <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <SPI_I2S_DeInit+0xd8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d109      	bne.n	8001556 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001542:	2101      	movs	r1, #1
 8001544:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001548:	f7ff ff88 	bl	800145c <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 800154c:	2100      	movs	r1, #0
 800154e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001552:	f7ff ff83 	bl	800145c <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40013000 	.word	0x40013000
 8001564:	40003800 	.word	0x40003800
 8001568:	40003c00 	.word	0x40003c00
 800156c:	40013400 	.word	0x40013400
 8001570:	40015000 	.word	0x40015000
 8001574:	40015400 	.word	0x40015400

08001578 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001582:	2300      	movs	r3, #0
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	2302      	movs	r3, #2
 8001588:	84fb      	strh	r3, [r7, #38]	; 0x26
 800158a:	2300      	movs	r3, #0
 800158c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800158e:	2301      	movs	r3, #1
 8001590:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8b9b      	ldrh	r3, [r3, #28]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015b0:	f023 030f 	bic.w	r3, r3, #15
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	8b9b      	ldrh	r3, [r3, #28]
 80015c4:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d104      	bne.n	80015d8 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80015d2:	2302      	movs	r3, #2
 80015d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015d6:	e072      	b.n	80016be <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	889b      	ldrh	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80015e4:	e001      	b.n	80015ea <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <I2S_Init+0x1a8>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80015f6:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <I2S_Init+0x1a8>)
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <I2S_Init+0x1a8>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001600:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <I2S_Init+0x1a8>)
 8001604:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160c:	4013      	ands	r3, r2
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001614:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001616:	4b42      	ldr	r3, [pc, #264]	; (8001720 <I2S_Init+0x1a8>)
 8001618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001620:	0f1b      	lsrs	r3, r3, #28
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001628:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <I2S_Init+0x1a8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001632:	4a3c      	ldr	r2, [pc, #240]	; (8001724 <I2S_Init+0x1ac>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	fb02 f203 	mul.w	r2, r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	88db      	ldrh	r3, [r3, #6]
 800164c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001650:	d10f      	bne.n	8001672 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	0a1a      	lsrs	r2, r3, #8
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	461a      	mov	r2, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	b29b      	uxth	r3, r3
 800166a:	3305      	adds	r3, #5
 800166c:	b29b      	uxth	r3, r3
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e012      	b.n	8001698 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	461a      	mov	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fbb3 f2f2 	udiv	r2, r3, r2
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	3305      	adds	r3, #5
 8001694:	b29b      	uxth	r3, r3
 8001696:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <I2S_Init+0x1b0>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80016ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80016b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80016be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d902      	bls.n	80016ca <I2S_Init+0x152>
 80016c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c6:	2bff      	cmp	r3, #255	; 0xff
 80016c8:	d903      	bls.n	80016d2 <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	88da      	ldrh	r2, [r3, #6]
 80016d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016d8:	4313      	orrs	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016de:	4313      	orrs	r3, r2
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	8859      	ldrh	r1, [r3, #2]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80016f6:	4303      	orrs	r3, r0
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	430b      	orrs	r3, r1
 80016fc:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80016fe:	4313      	orrs	r3, r2
 8001700:	b29a      	uxth	r2, r3
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	4313      	orrs	r3, r2
 8001706:	b29b      	uxth	r3, r3
 8001708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800170c:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8b7a      	ldrh	r2, [r7, #26]
 8001712:	839a      	strh	r2, [r3, #28]
}
 8001714:	bf00      	nop
 8001716:	372c      	adds	r7, #44	; 0x2c
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800
 8001724:	007a1200 	.word	0x007a1200
 8001728:	cccccccd 	.word	0xcccccccd

0800172c <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8b9b      	ldrh	r3, [r3, #28]
 8001742:	b29b      	uxth	r3, r3
 8001744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800174e:	e007      	b.n	8001760 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	8b9b      	ldrh	r3, [r3, #28]
 8001754:	b29b      	uxth	r3, r3
 8001756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	839a      	strh	r2, [r3, #28]
  }
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	819a      	strh	r2, [r3, #12]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 80017b2:	e009      	b.n	80017c8 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	43db      	mvns	r3, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	809a      	strh	r2, [r3, #4]
  }
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
 80017e0:	4613      	mov	r3, r2
 80017e2:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80017e4:	2300      	movs	r3, #0
 80017e6:	81fb      	strh	r3, [r7, #14]
 80017e8:	2300      	movs	r3, #0
 80017ea:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	2201      	movs	r2, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80017fe:	78bb      	ldrb	r3, [r7, #2]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	b29a      	uxth	r2, r3
 800180a:	89bb      	ldrh	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8001814:	e009      	b.n	800182a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	b29a      	uxth	r2, r3
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	4013      	ands	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	809a      	strh	r2, [r3, #4]
  }
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	891b      	ldrh	r3, [r3, #8]
 800184c:	b29a      	uxth	r2, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	4013      	ands	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001870:	b490      	push	{r4, r7}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <SYSCFG_EXTILineConfig+0x80>)
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <SYSCFG_EXTILineConfig+0x80>)
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	1c83      	adds	r3, r0, #2
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <SYSCFG_EXTILineConfig+0x80>)
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461c      	mov	r4, r3
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <SYSCFG_EXTILineConfig+0x80>)
 80018c4:	79bb      	ldrb	r3, [r7, #6]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d0:	79f9      	ldrb	r1, [r7, #7]
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	431a      	orrs	r2, r3
 80018e0:	1ca3      	adds	r3, r4, #2
 80018e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr
 80018f0:	40013800 	.word	0x40013800

080018f4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <STM_EVAL_LEDInit+0x50>)
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	2101      	movs	r1, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd27 	bl	800135c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <STM_EVAL_LEDInit+0x54>)
 8001912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001918:	2301      	movs	r3, #1
 800191a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800191c:	2300      	movs	r3, #0
 800191e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001924:	2302      	movs	r3, #2
 8001926:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <STM_EVAL_LEDInit+0x58>)
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	f107 0208 	add.w	r2, r7, #8
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f928 	bl	8000b8c <GPIO_Init>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	08003abc 	.word	0x08003abc
 8001948:	08003ab4 	.word	0x08003ab4
 800194c:	20000010 	.word	0x20000010

08001950 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <STM_EVAL_LEDOn+0x28>)
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	4905      	ldr	r1, [pc, #20]	; (800197c <STM_EVAL_LEDOn+0x2c>)
 8001966:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800196a:	831a      	strh	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000010 	.word	0x20000010
 800197c:	08003ab4 	.word	0x08003ab4

08001980 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <STM_EVAL_LEDOff+0x28>)
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	4905      	ldr	r1, [pc, #20]	; (80019ac <STM_EVAL_LEDOff+0x2c>)
 8001996:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800199a:	835a      	strh	r2, [r3, #26]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	20000010 	.word	0x20000010
 80019ac:	08003ab4 	.word	0x08003ab4

080019b0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80019c0:	2301      	movs	r3, #1
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fcc9 	bl	800135c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80019ca:	2101      	movs	r1, #1
 80019cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019d0:	f7ff fd04 	bl	80013dc <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80019d4:	2300      	movs	r3, #0
 80019d6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <STM_EVAL_PBInit+0x94>)
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	f107 0218 	add.w	r2, r7, #24
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f8cc 	bl	8000b8c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d11f      	bne.n	8001a3a <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80019fa:	2300      	movs	r3, #0
 80019fc:	2200      	movs	r2, #0
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff35 	bl	8001870 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001a06:	2301      	movs	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001a0e:	2308      	movs	r3, #8
 8001a10:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f844 	bl	8000aa8 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001a20:	2306      	movs	r3, #6
 8001a22:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001a24:	230f      	movs	r3, #15
 8001a26:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fbc7 	bl	80001c8 <NVIC_Init>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000020 	.word	0x20000020

08001a48 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <STM_EVAL_PBGetState+0x28>)
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f922 	bl	8000ca8 <GPIO_ReadInputDataBit>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000020 	.word	0x20000020

08001a74 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	80fb      	strh	r3, [r7, #6]
 8001a80:	460b      	mov	r3, r1
 8001a82:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d80b      	bhi.n	8001aa2 <EVAL_AUDIO_Init+0x2e>
 8001a8a:	797a      	ldrb	r2, [r7, #5]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <EVAL_AUDIO_Init+0x54>)
 8001a94:	fb82 1203 	smull	r1, r2, r2, r3
 8001a98:	1152      	asrs	r2, r2, #5
 8001a9a:	17db      	asrs	r3, r3, #31
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e000      	b.n	8001aa4 <EVAL_AUDIO_Init+0x30>
 8001aa2:	2364      	movs	r3, #100	; 0x64
 8001aa4:	88f8      	ldrh	r0, [r7, #6]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f000 f8f3 	bl	8001c94 <Codec_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e002      	b.n	8001abe <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 8001ab8:	f000 fcb4 	bl	8002424 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8001abc:	2300      	movs	r3, #0
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	51eb851f 	.word	0x51eb851f

08001acc <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <EVAL_AUDIO_Play+0x60>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8001adc:	f000 f986 	bl	8001dec <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	bf28      	it	cs
 8001aec:	4613      	movcs	r3, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f000 fd40 	bl	8002574 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <EVAL_AUDIO_Play+0x60>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf28      	it	cs
 8001b00:	4613      	movcs	r3, r2
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <EVAL_AUDIO_Play+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <EVAL_AUDIO_Play+0x60>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b12:	4293      	cmp	r3, r2
 8001b14:	bf28      	it	cs
 8001b16:	4613      	movcs	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <EVAL_AUDIO_Play+0x68>)
 8001b20:	6013      	str	r3, [r2, #0]
  
  return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000024 	.word	0x20000024
 8001b30:	20000028 	.word	0x20000028
 8001b34:	20000330 	.word	0x20000330

08001b38 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <Audio_MAL_IRQHandler+0xe0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <Audio_MAL_IRQHandler+0xe4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <Audio_MAL_IRQHandler+0xec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7fe ff03 	bl	8000960 <DMA_GetFlagStatus>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f9c3 	bl	8002ef0 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <Audio_MAL_IRQHandler+0xec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f7fe ff2f 	bl	80009d8 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <Audio_MAL_IRQHandler+0xf0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7fe feeb 	bl	8000960 <DMA_GetFlagStatus>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fe1b 	bl	80027d0 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <Audio_MAL_IRQHandler+0xf0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f7fe ff17 	bl	80009d8 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <Audio_MAL_IRQHandler+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	f7fe fed3 	bl	8000960 <DMA_GetFlagStatus>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d115      	bne.n	8001bec <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <Audio_MAL_IRQHandler+0xf8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f7fe fec8 	bl	8000960 <DMA_GetFlagStatus>
 8001bd0:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <Audio_MAL_IRQHandler+0xfc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7fe febd 	bl	8000960 <DMA_GetFlagStatus>
 8001be6:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fd22 	bl	8003638 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <Audio_MAL_IRQHandler+0xe8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <Audio_MAL_IRQHandler+0xf4>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <Audio_MAL_IRQHandler+0xf8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <Audio_MAL_IRQHandler+0xfc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe fee5 	bl	80009d8 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000330 	.word	0x20000330
 8001c1c:	20000028 	.word	0x20000028
 8001c20:	20000038 	.word	0x20000038
 8001c24:	20000044 	.word	0x20000044
 8001c28:	20000048 	.word	0x20000048
 8001c2c:	20000050 	.word	0x20000050
 8001c30:	2000004c 	.word	0x2000004c
 8001c34:	20000054 	.word	0x20000054

08001c38 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001c3c:	f7ff ff7c 	bl	8001b38 <Audio_MAL_IRQHandler>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001c48:	f7ff ff76 	bl	8001b38 <Audio_MAL_IRQHandler>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001c54:	2102      	movs	r1, #2
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <SPI3_IRQHandler+0x3c>)
 8001c58:	f7ff fdee 	bl	8001838 <SPI_I2S_GetFlagStatus>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d011      	beq.n	8001c86 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <SPI3_IRQHandler+0x40>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d106      	bne.n	8001c78 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001c6a:	f001 fcdd 	bl	8003628 <EVAL_AUDIO_GetSampleCallBack>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4619      	mov	r1, r3
 8001c72:	2004      	movs	r0, #4
 8001c74:	f7fe fd10 	bl	8000698 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001c78:	f001 fcd6 	bl	8003628 <EVAL_AUDIO_GetSampleCallBack>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <SPI3_IRQHandler+0x3c>)
 8001c82:	f7ff fd73 	bl	800176c <SPI_I2S_SendData>
  }
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40003c00 	.word	0x40003c00
 8001c90:	20000030 	.word	0x20000030

08001c94 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	603a      	str	r2, [r7, #0]
 8001c9e:	80fb      	strh	r3, [r7, #6]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 8001ca8:	f000 fb1a 	bl	80022e0 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8001cac:	f000 f8e2 	bl	8001e74 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 8001cb0:	f000 faa8 	bl	8002204 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f000 f8f0 	bl	8001e9c <Codec_WriteRegister>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8001cc4:	21af      	movs	r1, #175	; 0xaf
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	f000 f8e8 	bl	8001e9c <Codec_WriteRegister>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <Codec_Init+0x150>)
 8001cd6:	22af      	movs	r2, #175	; 0xaf
 8001cd8:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 8001cda:	2181      	movs	r1, #129	; 0x81
 8001cdc:	2005      	movs	r0, #5
 8001cde:	f000 f8dd 	bl	8001e9c <Codec_WriteRegister>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 8001cea:	2104      	movs	r1, #4
 8001cec:	2006      	movs	r0, #6
 8001cee:	f000 f8d5 	bl	8001e9c <Codec_WriteRegister>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 8001cfa:	797b      	ldrb	r3, [r7, #5]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f87d 	bl	8001dfc <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <Codec_Init+0x154>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d127      	bne.n	8001d5a <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2008      	movs	r0, #8
 8001d0e:	f000 f8c5 	bl	8001e9c <Codec_WriteRegister>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2009      	movs	r0, #9
 8001d1e:	f000 f8bd 	bl	8001e9c <Codec_WriteRegister>
 8001d22:	4602      	mov	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 8001d2a:	21c0      	movs	r1, #192	; 0xc0
 8001d2c:	200e      	movs	r0, #14
 8001d2e:	f000 f8b5 	bl	8001e9c <Codec_WriteRegister>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f000 f8ad 	bl	8001e9c <Codec_WriteRegister>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2015      	movs	r0, #21
 8001d4e:	f000 f8a5 	bl	8001e9c <Codec_WriteRegister>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 8001d5a:	219e      	movs	r1, #158	; 0x9e
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f000 f89d 	bl	8001e9c <Codec_WriteRegister>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	200a      	movs	r0, #10
 8001d6e:	f000 f895 	bl	8001e9c <Codec_WriteRegister>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <Codec_Init+0x154>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d007      	beq.n	8001d92 <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 8001d82:	2104      	movs	r1, #4
 8001d84:	200e      	movs	r0, #14
 8001d86:	f000 f889 	bl	8001e9c <Codec_WriteRegister>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2027      	movs	r0, #39	; 0x27
 8001d96:	f000 f881 	bl	8001e9c <Codec_WriteRegister>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 8001da2:	210f      	movs	r1, #15
 8001da4:	201f      	movs	r0, #31
 8001da6:	f000 f879 	bl	8001e9c <Codec_WriteRegister>
 8001daa:	4602      	mov	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 8001db2:	210a      	movs	r1, #10
 8001db4:	201a      	movs	r0, #26
 8001db6:	f000 f871 	bl	8001e9c <Codec_WriteRegister>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 8001dc2:	210a      	movs	r1, #10
 8001dc4:	201b      	movs	r0, #27
 8001dc6:	f000 f869 	bl	8001e9c <Codec_WriteRegister>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f000 fa42 	bl	800225c <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000009c 	.word	0x2000009c
 8001de8:	20000030 	.word	0x20000030

08001dec <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2be6      	cmp	r3, #230	; 0xe6
 8001e0e:	d916      	bls.n	8001e3e <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	3319      	adds	r3, #25
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	2020      	movs	r0, #32
 8001e1a:	f000 f83f 	bl	8001e9c <Codec_WriteRegister>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	3319      	adds	r3, #25
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2021      	movs	r0, #33	; 0x21
 8001e30:	f000 f834 	bl	8001e9c <Codec_WriteRegister>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e015      	b.n	8001e6a <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	3319      	adds	r3, #25
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	2020      	movs	r0, #32
 8001e48:	f000 f828 	bl	8001e9c <Codec_WriteRegister>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	3319      	adds	r3, #25
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	2021      	movs	r0, #33	; 0x21
 8001e5e:	f000 f81d 	bl	8001e9c <Codec_WriteRegister>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4806      	ldr	r0, [pc, #24]	; (8001e98 <Codec_Reset+0x24>)
 8001e7e:	f7fe ff2d 	bl	8000cdc <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 8001e82:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8001e86:	f000 fabb 	bl	8002400 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4802      	ldr	r0, [pc, #8]	; (8001e98 <Codec_Reset+0x24>)
 8001e90:	f7fe ff24 	bl	8000cdc <GPIO_WriteBit>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40020c00 	.word	0x40020c00

08001e9c <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001eb2:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8001eb6:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8001eb8:	e00a      	b.n	8001ed0 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	4948      	ldr	r1, [pc, #288]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001ec2:	600a      	str	r2, [r1, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <Codec_WriteRegister+0x34>
 8001ec8:	f000 fc7a 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	e085      	b.n	8001fdc <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8001ed0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ed4:	4844      	ldr	r0, [pc, #272]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001ed6:	f7ff f94b 	bl	8001170 <I2C_GetFlagStatus>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ec      	bne.n	8001eba <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4841      	ldr	r0, [pc, #260]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001ee4:	f7ff f878 	bl	8000fd8 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eee:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8001ef0:	e00a      	b.n	8001f08 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	493a      	ldr	r1, [pc, #232]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001efa:	600a      	str	r2, [r1, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <Codec_WriteRegister+0x6c>
 8001f00:	f000 fc5e 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8001f04:	4603      	mov	r3, r0
 8001f06:	e069      	b.n	8001fdc <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8001f08:	4938      	ldr	r1, [pc, #224]	; (8001fec <Codec_WriteRegister+0x150>)
 8001f0a:	4837      	ldr	r0, [pc, #220]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f0c:	f7ff f900 	bl	8001110 <I2C_CheckEvent>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ed      	beq.n	8001ef2 <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2194      	movs	r1, #148	; 0x94
 8001f1a:	4833      	ldr	r0, [pc, #204]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f1c:	f7ff f89c 	bl	8001058 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f26:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001f28:	e00a      	b.n	8001f40 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f32:	600a      	str	r2, [r1, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <Codec_WriteRegister+0xa4>
 8001f38:	f000 fc42 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	e04d      	b.n	8001fdc <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001f40:	492b      	ldr	r1, [pc, #172]	; (8001ff0 <Codec_WriteRegister+0x154>)
 8001f42:	4829      	ldr	r0, [pc, #164]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f44:	f7ff f8e4 	bl	8001110 <I2C_CheckEvent>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ed      	beq.n	8001f2a <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4825      	ldr	r0, [pc, #148]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f54:	f7ff f8be 	bl	80010d4 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f5e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8001f60:	e00a      	b.n	8001f78 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f6a:	600a      	str	r2, [r1, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <Codec_WriteRegister+0xdc>
 8001f70:	f000 fc26 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8001f74:	4603      	mov	r3, r0
 8001f76:	e031      	b.n	8001fdc <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8001f78:	491e      	ldr	r1, [pc, #120]	; (8001ff4 <Codec_WriteRegister+0x158>)
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f7c:	f7ff f8c8 	bl	8001110 <I2C_CheckEvent>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ed      	beq.n	8001f62 <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001f8c:	f7ff f8a2 	bl	80010d4 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f92:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8001f96:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8001f98:	e008      	b.n	8001fac <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1e5a      	subs	r2, r3, #1
 8001fa0:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <Codec_WriteRegister+0x148>)
 8001fa2:	600a      	str	r2, [r1, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <Codec_WriteRegister+0x110>
 8001fa8:	f000 fc0a 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8001fac:	4912      	ldr	r1, [pc, #72]	; (8001ff8 <Codec_WriteRegister+0x15c>)
 8001fae:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001fb0:	f7ff f8de 	bl	8001170 <I2C_GetFlagStatus>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0ef      	beq.n	8001f9a <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8001fba:	2101      	movs	r1, #1
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <Codec_WriteRegister+0x14c>)
 8001fbe:	f7ff f82b 	bl	8001018 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f819 	bl	8001ffc <Codec_ReadRegister>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2000002c 	.word	0x2000002c
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	00030001 	.word	0x00030001
 8001ff0:	00070082 	.word	0x00070082
 8001ff4:	00070080 	.word	0x00070080
 8001ff8:	10000004 	.word	0x10000004

08001ffc <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800200c:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002010:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002012:	e00a      	b.n	800202a <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002014:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	4972      	ldr	r1, [pc, #456]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800201c:	600a      	str	r2, [r1, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <Codec_ReadRegister+0x2e>
 8002022:	f000 fbcd 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8002026:	4603      	mov	r3, r0
 8002028:	e0d7      	b.n	80021da <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800202a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800202e:	486e      	ldr	r0, [pc, #440]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002030:	f7ff f89e 	bl	8001170 <I2C_GetFlagStatus>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ec      	bne.n	8002014 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800203a:	2101      	movs	r1, #1
 800203c:	486a      	ldr	r0, [pc, #424]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 800203e:	f7fe ffcb 	bl	8000fd8 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002042:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002048:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800204a:	e00a      	b.n	8002062 <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	4964      	ldr	r1, [pc, #400]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002054:	600a      	str	r2, [r1, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <Codec_ReadRegister+0x66>
 800205a:	f000 fbb1 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 800205e:	4603      	mov	r3, r0
 8002060:	e0bb      	b.n	80021da <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002062:	4962      	ldr	r1, [pc, #392]	; (80021ec <Codec_ReadRegister+0x1f0>)
 8002064:	4860      	ldr	r0, [pc, #384]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002066:	f7ff f853 	bl	8001110 <I2C_CheckEvent>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ed      	beq.n	800204c <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002070:	2200      	movs	r2, #0
 8002072:	2194      	movs	r1, #148	; 0x94
 8002074:	485c      	ldr	r0, [pc, #368]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002076:	f7fe ffef 	bl	8001058 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800207a:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800207c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002080:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002082:	e00a      	b.n	800209a <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	4956      	ldr	r1, [pc, #344]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800208c:	600a      	str	r2, [r1, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <Codec_ReadRegister+0x9e>
 8002092:	f000 fb95 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8002096:	4603      	mov	r3, r0
 8002098:	e09f      	b.n	80021da <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800209a:	4955      	ldr	r1, [pc, #340]	; (80021f0 <Codec_ReadRegister+0x1f4>)
 800209c:	4852      	ldr	r0, [pc, #328]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 800209e:	f7ff f837 	bl	8001110 <I2C_CheckEvent>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ed      	beq.n	8002084 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4619      	mov	r1, r3
 80020ac:	484e      	ldr	r0, [pc, #312]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80020ae:	f7ff f811 	bl	80010d4 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80020b2:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b8:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 80020ba:	e00a      	b.n	80020d2 <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	4948      	ldr	r1, [pc, #288]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020c4:	600a      	str	r2, [r1, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <Codec_ReadRegister+0xd6>
 80020ca:	f000 fb79 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 80020ce:	4603      	mov	r3, r0
 80020d0:	e083      	b.n	80021da <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 80020d2:	4948      	ldr	r1, [pc, #288]	; (80021f4 <Codec_ReadRegister+0x1f8>)
 80020d4:	4844      	ldr	r0, [pc, #272]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80020d6:	f7ff f84b 	bl	8001170 <I2C_GetFlagStatus>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ed      	beq.n	80020bc <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 80020e0:	2101      	movs	r1, #1
 80020e2:	4841      	ldr	r0, [pc, #260]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80020e4:	f7fe ff78 	bl	8000fd8 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80020e8:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ee:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80020f0:	e00a      	b.n	8002108 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1e5a      	subs	r2, r3, #1
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80020fa:	600a      	str	r2, [r1, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <Codec_ReadRegister+0x10c>
 8002100:	f000 fb5e 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 8002104:	4603      	mov	r3, r0
 8002106:	e068      	b.n	80021da <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002108:	4938      	ldr	r1, [pc, #224]	; (80021ec <Codec_ReadRegister+0x1f0>)
 800210a:	4837      	ldr	r0, [pc, #220]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 800210c:	f7ff f800 	bl	8001110 <I2C_CheckEvent>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0ed      	beq.n	80020f2 <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002116:	2201      	movs	r2, #1
 8002118:	2194      	movs	r1, #148	; 0x94
 800211a:	4833      	ldr	r0, [pc, #204]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 800211c:	f7fe ff9c 	bl	8001058 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002126:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002128:	e00a      	b.n	8002140 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	492c      	ldr	r1, [pc, #176]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002132:	600a      	str	r2, [r1, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <Codec_ReadRegister+0x144>
 8002138:	f000 fb42 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 800213c:	4603      	mov	r3, r0
 800213e:	e04c      	b.n	80021da <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002140:	492d      	ldr	r1, [pc, #180]	; (80021f8 <Codec_ReadRegister+0x1fc>)
 8002142:	4829      	ldr	r0, [pc, #164]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002144:	f7ff f814 	bl	8001170 <I2C_GetFlagStatus>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ed      	beq.n	800212a <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 800214e:	2100      	movs	r1, #0
 8002150:	4825      	ldr	r0, [pc, #148]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002152:	f7fe ff9f 	bl	8001094 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002158:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 800215a:	2101      	movs	r1, #1
 800215c:	4822      	ldr	r0, [pc, #136]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 800215e:	f7fe ff5b 	bl	8001018 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002168:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 800216a:	e00a      	b.n	8002182 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	491c      	ldr	r1, [pc, #112]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 8002174:	600a      	str	r2, [r1, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <Codec_ReadRegister+0x186>
 800217a:	f000 fb21 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 800217e:	4603      	mov	r3, r0
 8002180:	e02b      	b.n	80021da <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002182:	491e      	ldr	r1, [pc, #120]	; (80021fc <Codec_ReadRegister+0x200>)
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002186:	f7fe fff3 	bl	8001170 <I2C_GetFlagStatus>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ed      	beq.n	800216c <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 8002192:	f7fe ffaf 	bl	80010f4 <I2C_ReceiveData>
 8002196:	4603      	mov	r3, r0
 8002198:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 800219c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a0:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80021a2:	e00a      	b.n	80021ba <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	490e      	ldr	r1, [pc, #56]	; (80021e4 <Codec_ReadRegister+0x1e8>)
 80021ac:	600a      	str	r2, [r1, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <Codec_ReadRegister+0x1be>
 80021b2:	f000 fb05 	bl	80027c0 <Codec_TIMEOUT_UserCallback>
 80021b6:	4603      	mov	r3, r0
 80021b8:	e00f      	b.n	80021da <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ed      	bne.n	80021a4 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 80021c8:	2101      	movs	r1, #1
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80021cc:	f7fe ff62 	bl	8001094 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 80021d0:	490b      	ldr	r1, [pc, #44]	; (8002200 <Codec_ReadRegister+0x204>)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <Codec_ReadRegister+0x1ec>)
 80021d4:	f7ff f800 	bl	80011d8 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 80021d8:	68fb      	ldr	r3, [r7, #12]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000002c 	.word	0x2000002c
 80021e8:	40005400 	.word	0x40005400
 80021ec:	00030001 	.word	0x00030001
 80021f0:	00070082 	.word	0x00070082
 80021f4:	10000004 	.word	0x10000004
 80021f8:	10000002 	.word	0x10000002
 80021fc:	10000040 	.word	0x10000040
 8002200:	10000400 	.word	0x10000400

08002204 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 800220a:	2101      	movs	r1, #1
 800220c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002210:	f7ff f8c4 	bl	800139c <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002214:	480f      	ldr	r0, [pc, #60]	; (8002254 <Codec_CtrlInterface_Init+0x50>)
 8002216:	f7fe fdc3 	bl	8000da0 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800221a:	2300      	movs	r3, #0
 800221c:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800221e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002222:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002224:	2333      	movs	r3, #51	; 0x33
 8002226:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222c:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800222e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002232:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <Codec_CtrlInterface_Init+0x54>)
 8002236:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002238:	2101      	movs	r1, #1
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <Codec_CtrlInterface_Init+0x50>)
 800223c:	f7fe feac 	bl	8000f98 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <Codec_CtrlInterface_Init+0x50>)
 8002246:	f7fe fde5 	bl	8000e14 <I2C_Init>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005400 	.word	0x40005400
 8002258:	000186a0 	.word	0x000186a0

0800225c <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002264:	2101      	movs	r1, #1
 8002266:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800226a:	f7ff f897 	bl	800139c <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 800226e:	481a      	ldr	r0, [pc, #104]	; (80022d8 <Codec_AudioInterface_Init+0x7c>)
 8002270:	f7ff f914 	bl	800149c <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002278:	2300      	movs	r3, #0
 800227a:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 800227c:	2300      	movs	r3, #0
 800227e:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002280:	2300      	movs	r3, #0
 8002282:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 800228a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228e:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	4619      	mov	r1, r3
 8002296:	4810      	ldr	r0, [pc, #64]	; (80022d8 <Codec_AudioInterface_Init+0x7c>)
 8002298:	f7ff f96e 	bl	8001578 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <Codec_AudioInterface_Init+0x80>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d114      	bne.n	80022ce <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80022a4:	2101      	movs	r1, #1
 80022a6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80022aa:	f7ff f877 	bl	800139c <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4619      	mov	r1, r3
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe f98f 	bl	80005e4 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 80022c6:	2101      	movs	r1, #1
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe f9bf 	bl	800064c <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40003c00 	.word	0x40003c00
 80022dc:	20000030 	.word	0x20000030

080022e0 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 80022e6:	2101      	movs	r1, #1
 80022e8:	2008      	movs	r0, #8
 80022ea:	f7ff f837 	bl	800135c <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 80022ee:	2310      	movs	r3, #16
 80022f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80022f2:	2301      	movs	r3, #1
 80022f4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80022f6:	2302      	movs	r3, #2
 80022f8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002302:	463b      	mov	r3, r7
 8002304:	4619      	mov	r1, r3
 8002306:	4839      	ldr	r0, [pc, #228]	; (80023ec <Codec_GPIO_Init+0x10c>)
 8002308:	f7fe fc40 	bl	8000b8c <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 800230c:	2101      	movs	r1, #1
 800230e:	2007      	movs	r0, #7
 8002310:	f7ff f824 	bl	800135c <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002314:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002318:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800231a:	2302      	movs	r3, #2
 800231c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800231e:	2302      	movs	r3, #2
 8002320:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002322:	2301      	movs	r3, #1
 8002324:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4830      	ldr	r0, [pc, #192]	; (80023f0 <Codec_GPIO_Init+0x110>)
 8002330:	f7fe fc2c 	bl	8000b8c <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002334:	2204      	movs	r2, #4
 8002336:	2106      	movs	r1, #6
 8002338:	482d      	ldr	r0, [pc, #180]	; (80023f0 <Codec_GPIO_Init+0x110>)
 800233a:	f7fe fce7 	bl	8000d0c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 800233e:	2204      	movs	r2, #4
 8002340:	2109      	movs	r1, #9
 8002342:	482b      	ldr	r0, [pc, #172]	; (80023f0 <Codec_GPIO_Init+0x110>)
 8002344:	f7fe fce2 	bl	8000d0c <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002348:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800234c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800234e:	2302      	movs	r3, #2
 8002350:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002352:	2302      	movs	r3, #2
 8002354:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002356:	2300      	movs	r3, #0
 8002358:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 800235e:	463b      	mov	r3, r7
 8002360:	4619      	mov	r1, r3
 8002362:	4824      	ldr	r0, [pc, #144]	; (80023f4 <Codec_GPIO_Init+0x114>)
 8002364:	f7fe fc12 	bl	8000b8c <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002368:	2206      	movs	r2, #6
 800236a:	2104      	movs	r1, #4
 800236c:	4822      	ldr	r0, [pc, #136]	; (80023f8 <Codec_GPIO_Init+0x118>)
 800236e:	f7fe fccd 	bl	8000d0c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002372:	2206      	movs	r2, #6
 8002374:	210a      	movs	r1, #10
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <Codec_GPIO_Init+0x114>)
 8002378:	f7fe fcc8 	bl	8000d0c <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <Codec_GPIO_Init+0x11c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d00c      	beq.n	800239e <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002384:	2310      	movs	r3, #16
 8002386:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	481a      	ldr	r0, [pc, #104]	; (80023f8 <Codec_GPIO_Init+0x118>)
 800238e:	f7fe fbfd 	bl	8000b8c <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002392:	2206      	movs	r2, #6
 8002394:	210c      	movs	r1, #12
 8002396:	4817      	ldr	r0, [pc, #92]	; (80023f4 <Codec_GPIO_Init+0x114>)
 8002398:	f7fe fcb8 	bl	8000d0c <GPIO_PinAFConfig>
 800239c:	e00e      	b.n	80023bc <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800239e:	2101      	movs	r1, #1
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe ffdb 	bl	800135c <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80023a6:	2310      	movs	r3, #16
 80023a8:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80023aa:	2303      	movs	r3, #3
 80023ac:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023b2:	463b      	mov	r3, r7
 80023b4:	4619      	mov	r1, r3
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <Codec_GPIO_Init+0x118>)
 80023b8:	f7fe fbe8 	bl	8000b8c <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80023c0:	2302      	movs	r3, #2
 80023c2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80023c4:	2302      	movs	r3, #2
 80023c6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 80023d0:	463b      	mov	r3, r7
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <Codec_GPIO_Init+0x114>)
 80023d6:	f7fe fbd9 	bl	8000b8c <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 80023da:	2206      	movs	r2, #6
 80023dc:	2107      	movs	r1, #7
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <Codec_GPIO_Init+0x114>)
 80023e0:	f7fe fc94 	bl	8000d0c <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	20000030 	.word	0x20000030

08002400 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002408:	e002      	b.n	8002410 <Delay+0x10>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3b01      	subs	r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <Delay+0xa>
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <Audio_MAL_Init+0x130>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d16e      	bne.n	8002510 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <Audio_MAL_Init+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ff8f 	bl	800135c <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <Audio_MAL_Init+0x138>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fa6f 	bl	8000928 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <Audio_MAL_Init+0x138>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f93e 	bl	80006d0 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002454:	4b42      	ldr	r3, [pc, #264]	; (8002560 <Audio_MAL_Init+0x13c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <Audio_MAL_Init+0x140>)
 800245a:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <Audio_MAL_Init+0x144>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a40      	ldr	r2, [pc, #256]	; (8002564 <Audio_MAL_Init+0x140>)
 8002462:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <Audio_MAL_Init+0x140>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <Audio_MAL_Init+0x140>)
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002470:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <Audio_MAL_Init+0x140>)
 8002472:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002476:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <Audio_MAL_Init+0x140>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800247e:	4b39      	ldr	r3, [pc, #228]	; (8002564 <Audio_MAL_Init+0x140>)
 8002480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002484:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <Audio_MAL_Init+0x140>)
 8002488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248c:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <Audio_MAL_Init+0x140>)
 8002490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002494:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <Audio_MAL_Init+0x140>)
 8002498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <Audio_MAL_Init+0x140>)
 80024a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <Audio_MAL_Init+0x140>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <Audio_MAL_Init+0x140>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80024b2:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <Audio_MAL_Init+0x140>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <Audio_MAL_Init+0x140>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <Audio_MAL_Init+0x138>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4928      	ldr	r1, [pc, #160]	; (8002564 <Audio_MAL_Init+0x140>)
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f9d7 	bl	8000878 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <Audio_MAL_Init+0x138>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2201      	movs	r2, #1
 80024d0:	2110      	movs	r1, #16
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe faae 	bl	8000a34 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <Audio_MAL_Init+0x138>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	2108      	movs	r1, #8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe faa7 	bl	8000a34 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <Audio_MAL_Init+0x138>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	2186      	movs	r1, #134	; 0x86
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe faa0 	bl	8000a34 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <Audio_MAL_Init+0x148>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 80024fc:	2300      	movs	r3, #0
 80024fe:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002500:	2300      	movs	r3, #0
 8002502:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd fe5c 	bl	80001c8 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <Audio_MAL_Init+0x130>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8002518:	2201      	movs	r2, #1
 800251a:	2102      	movs	r1, #2
 800251c:	4814      	ldr	r0, [pc, #80]	; (8002570 <Audio_MAL_Init+0x14c>)
 800251e:	f7ff f935 	bl	800178c <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002522:	e012      	b.n	800254a <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8002524:	f000 f86c 	bl	8002600 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8002528:	2201      	movs	r2, #1
 800252a:	2171      	movs	r1, #113	; 0x71
 800252c:	4810      	ldr	r0, [pc, #64]	; (8002570 <Audio_MAL_Init+0x14c>)
 800252e:	f7ff f951 	bl	80017d4 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 8002532:	2333      	movs	r3, #51	; 0x33
 8002534:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002536:	2300      	movs	r3, #0
 8002538:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800253a:	2300      	movs	r3, #0
 800253c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800253e:	2301      	movs	r3, #1
 8002540:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd fe3f 	bl	80001c8 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000030 	.word	0x20000030
 8002558:	20000034 	.word	0x20000034
 800255c:	20000038 	.word	0x20000038
 8002560:	200000a0 	.word	0x200000a0
 8002564:	20000370 	.word	0x20000370
 8002568:	2000003c 	.word	0x2000003c
 800256c:	20000040 	.word	0x20000040
 8002570:	40003c00 	.word	0x40003c00

08002574 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <Audio_MAL_Play+0x7c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d112      	bne.n	80025ac <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <Audio_MAL_Play+0x80>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <Audio_MAL_Play+0x80>)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <Audio_MAL_Play+0x84>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4917      	ldr	r1, [pc, #92]	; (80025f4 <Audio_MAL_Play+0x80>)
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe f96d 	bl	8000878 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <Audio_MAL_Play+0x84>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2101      	movs	r1, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe f9bf 	bl	8000928 <DMA_Cmd>
 80025aa:	e011      	b.n	80025d0 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <Audio_MAL_Play+0x80>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <Audio_MAL_Play+0x80>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <Audio_MAL_Play+0x84>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	490d      	ldr	r1, [pc, #52]	; (80025f4 <Audio_MAL_Play+0x80>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe f95a 	bl	8000878 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <Audio_MAL_Play+0x84>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe f9ac 	bl	8000928 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <Audio_MAL_Play+0x88>)
 80025d2:	8b9b      	ldrh	r3, [r3, #28]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 80025de:	2101      	movs	r1, #1
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <Audio_MAL_Play+0x88>)
 80025e2:	f7ff f8a3 	bl	800172c <I2S_Cmd>
  }
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000030 	.word	0x20000030
 80025f4:	20000370 	.word	0x20000370
 80025f8:	20000038 	.word	0x20000038
 80025fc:	40003c00 	.word	0x40003c00

08002600 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8002606:	2101      	movs	r1, #1
 8002608:	4813      	ldr	r0, [pc, #76]	; (8002658 <DAC_Config+0x58>)
 800260a:	f7fe fea7 	bl	800135c <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800260e:	2101      	movs	r1, #1
 8002610:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002614:	f7fe fec2 	bl	800139c <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002618:	2310      	movs	r3, #16
 800261a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800261c:	2303      	movs	r3, #3
 800261e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002624:	463b      	mov	r3, r7
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <DAC_Config+0x5c>)
 800262a:	f7fe faaf 	bl	8000b8c <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4619      	mov	r1, r3
 8002640:	2000      	movs	r0, #0
 8002642:	f7fd ffcf 	bl	80005e4 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 8002646:	2101      	movs	r1, #1
 8002648:	2000      	movs	r0, #0
 800264a:	f7fd ffff 	bl	800064c <DAC_Cmd>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	00200001 	.word	0x00200001
 800265c:	40020000 	.word	0x40020000

08002660 <square>:
 * Returns 1 if 0.5 < angle < 1.0
 *
 * Parameter angle: value from 0.0 to 1.0.
 */
float32_t square(uint16_t current_sample, uint16_t samples_half_cycle)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	80fb      	strh	r3, [r7, #6]
 800266c:	4613      	mov	r3, r2
 800266e:	80bb      	strh	r3, [r7, #4]
	// if(fmod(angle, 1) < 0.5)
	if (current_sample < samples_half_cycle)
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	88bb      	ldrh	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d202      	bcs.n	800267e <square+0x1e>
	{
		return square_min;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <square+0x34>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	e001      	b.n	8002682 <square+0x22>
	}
	else
	{
		return square_max;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <square+0x38>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	ee07 3a90 	vmov	s15, r3
	}
}
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000070 	.word	0x20000070
 8002698:	20000074 	.word	0x20000074

0800269c <sawtooth>:
 *		Parameter current_sample is the n'th sample in the current cycle.  This corresponds to x in f(x) = mx+b

 *
 */
float32_t sawtooth(uint16_t current_sample, uint16_t samples_cycle)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	460a      	mov	r2, r1
 80026a6:	80fb      	strh	r3, [r7, #6]
 80026a8:	4613      	mov	r3, r2
 80026aa:	80bb      	strh	r3, [r7, #4]
	float32_t m = (sawtooth_max - sawtooth_min)/samples_cycle;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <sawtooth+0x5c>)
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <sawtooth+0x60>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ca:	edc7 7a03 	vstr	s15, [r7, #12]

	// y = mx + b
	return (m * current_sample + sawtooth_min);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <sawtooth+0x60>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
	// return (float32_t) current_sample;
}
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	20000078 	.word	0x20000078
 80026fc:	2000032c 	.word	0x2000032c

08002700 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  int i = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
  // int datasize = sizeof(data)/2;
  int retVal = -1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	603b      	str	r3, [r7, #0]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

   /* Initialize LEDS */
   STM_EVAL_LEDInit(LED3); // orange LED
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff f8ef 	bl	80018f4 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED4); // green LED
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff f8ec 	bl	80018f4 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED5); // red LED
 800271c:	2002      	movs	r0, #2
 800271e:	f7ff f8e9 	bl	80018f4 <STM_EVAL_LEDInit>
   STM_EVAL_LEDInit(LED6); // blue LED
 8002722:	2003      	movs	r0, #3
 8002724:	f7ff f8e6 	bl	80018f4 <STM_EVAL_LEDInit>

   /* Green Led On: start of application */
   STM_EVAL_LEDOn(LED4);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff f911 	bl	8001950 <STM_EVAL_LEDOn>
   /* ADC3 configuration *******************************************************/
    /*  - Enable peripheral clocks                                              */
    /*  - DMA2_Stream0 channel2 configuration                                   */
    /*  - Configure ADC Channel12 pin as analog input  : PC2                    */
    /*  - Configure ADC3 Channel12                                              */
    ADC3_CH12_DMA_Config();
 800272e:	f000 ff8f 	bl	8003650 <ADC3_CH12_DMA_Config>

    /* Start ADC3 Software Conversion */
    ADC_SoftwareStartConv(ADC3);
 8002732:	481f      	ldr	r0, [pc, #124]	; (80027b0 <main+0xb0>)
 8002734:	f7fd ff0e 	bl	8000554 <ADC_SoftwareStartConv>

	/* Initialize User Button */
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 8002738:	2100      	movs	r1, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff f938 	bl	80019b0 <STM_EVAL_PBInit>

	retVal = EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8002740:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002744:	2150      	movs	r1, #80	; 0x50
 8002746:	2004      	movs	r0, #4
 8002748:	f7ff f994 	bl	8001a74 <EVAL_AUDIO_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	603b      	str	r3, [r7, #0]
	retVal = EVAL_AUDIO_Play(buffer_output, BUFF_LEN);
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <main+0xb4>)
 8002754:	f7ff f9ba 	bl	8001acc <EVAL_AUDIO_Play>
 8002758:	4603      	mov	r3, r0
 800275a:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  while (1)
  {
	i++;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	607b      	str	r3, [r7, #4]


    if (STM_EVAL_PBGetState(BUTTON_USER) && (state == OFF))
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff f970 	bl	8001a48 <STM_EVAL_PBGetState>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00e      	beq.n	800278c <main+0x8c>
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <main+0xb8>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <main+0x8c>
    {
      state = ON;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <main+0xb8>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
      STM_EVAL_LEDOn(LED6); // blue LED ON
 800277c:	2003      	movs	r0, #3
 800277e:	f7ff f8e7 	bl	8001950 <STM_EVAL_LEDOn>
      pass = 0.5f;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <main+0xbc>)
 8002784:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e00f      	b.n	80027ac <main+0xac>
    }
    else
    {
      if (! STM_EVAL_PBGetState(BUTTON_USER))
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff f95b 	bl	8001a48 <STM_EVAL_PBGetState>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e1      	bne.n	800275c <main+0x5c>
      {
        STM_EVAL_LEDOff(LED6); // blue LED OFF
 8002798:	2003      	movs	r0, #3
 800279a:	f7ff f8f1 	bl	8001980 <STM_EVAL_LEDOff>
        pass = 0.0f;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <main+0xbc>)
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
        state = OFF;
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <main+0xb8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
      }
    }

  }
 80027ac:	e7d6      	b.n	800275c <main+0x5c>
 80027ae:	bf00      	nop
 80027b0:	40012200 	.word	0x40012200
 80027b4:	20000228 	.word	0x20000228
 80027b8:	200000a6 	.word	0x200000a6
 80027bc:	20000058 	.word	0x20000058

080027c0 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	STM_EVAL_LEDOn(LED5); /*  alert : red LED !  */
 80027c4:	2002      	movs	r0, #2
 80027c6:	f7ff f8c3 	bl	8001950 <STM_EVAL_LEDOn>
	return (0);
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
	// TODO: test frequency accuracy.  Might need to remove 2*PI
	// TODO: Consider using arm_sin_q15 instead of arm_sin_f32.  However, results might cause clipping.
	// TODO: Store vco default amplitude in global and set with a defined value.

	// Odd frequencies cause beating.
	if (freq_vco % 2) { /* x is odd */  freq_vco +=1; }
 80027da:	4ba6      	ldr	r3, [pc, #664]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <EVAL_AUDIO_HalfTransfer_CallBack+0x28>
 80027ea:	4ba2      	ldr	r3, [pc, #648]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b9f      	ldr	r3, [pc, #636]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 80027f6:	801a      	strh	r2, [r3, #0]
	if (freq_lfo % 2) { /* x is odd */  freq_lfo +=1; }
 80027f8:	4b9f      	ldr	r3, [pc, #636]	; (8002a78 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a8>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <EVAL_AUDIO_HalfTransfer_CallBack+0x46>
 8002808:	4b9b      	ldr	r3, [pc, #620]	; (8002a78 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a8>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b99      	ldr	r3, [pc, #612]	; (8002a78 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a8>)
 8002814:	801a      	strh	r2, [r3, #0]

	volatile int i = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24

	// freq_vco = 2 * ADC3ConvertedValue;
	// freq_lfo = (float32_t) ADC3ConvertedValue/100;
	volatile float32_t angle_vco = freq_vco*PI/SAMPLERATE;
 800281a:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8002a7c <EVAL_AUDIO_HalfTransfer_CallBack+0x2ac>
 800282c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002830:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002a80 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b0>
 8002834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002838:	edc7 7a08 	vstr	s15, [r7, #32]
	volatile float32_t angle_lfo = freq_lfo*PI/SAMPLERATE;
 800283c:	4b8e      	ldr	r3, [pc, #568]	; (8002a78 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a8>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002a7c <EVAL_AUDIO_HalfTransfer_CallBack+0x2ac>
 800284e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002852:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8002a80 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b0>
 8002856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285a:	edc7 7a07 	vstr	s15, [r7, #28]

	// For square
	// Fill buffer from 0 to BUFF_LEN/2
	volatile int samples_cycle = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
	volatile int samples_half_cycle = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
	// volatile float32_t angle_vco_norm = freq_vco/SAMPLERATE;

	// Sine VCO
	// TODO: to save cpu cycles, consider calculating one cycle of the sine wave and then copying it into the rest of the buffer.
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
 8002866:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b4>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d135      	bne.n	80028da <EVAL_AUDIO_HalfTransfer_CallBack+0x10a>
 800286e:	4b86      	ldr	r3, [pc, #536]	; (8002a88 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b8>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d031      	beq.n	80028da <EVAL_AUDIO_HalfTransfer_CallBack+0x10a>
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	e02a      	b.n	80028d2 <EVAL_AUDIO_HalfTransfer_CallBack+0x102>
		{
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+i)*angle_vco);
 800287c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800287e:	4b83      	ldr	r3, [pc, #524]	; (8002a8c <EVAL_AUDIO_HalfTransfer_CallBack+0x2bc>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	4413      	add	r3, r2
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002892:	edd7 7a08 	vldr	s15, [r7, #32]
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	f001 f89b 	bl	80039d8 <arm_sin_f32>
 80028a2:	eeb0 7a40 	vmov.f32	s14, s0
 80028a6:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c0>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b0:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c0>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028be:	edc7 7a01 	vstr	s15, [r7, #4]
 80028c2:	88bb      	ldrh	r3, [r7, #4]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c4>)
 80028c8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sine VCO
	// TODO: to save cpu cycles, consider calculating one cycle of the sine wave and then copying it into the rest of the buffer.
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	3301      	adds	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	2b1f      	cmp	r3, #31
 80028d6:	ddd1      	ble.n	800287c <EVAL_AUDIO_HalfTransfer_CallBack+0xac>
	volatile int samples_half_cycle = 0;
	// volatile float32_t angle_vco_norm = freq_vco/SAMPLERATE;

	// Sine VCO
	// TODO: to save cpu cycles, consider calculating one cycle of the sine wave and then copying it into the rest of the buffer.
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
 80028d8:	e084      	b.n	80029e4 <EVAL_AUDIO_HalfTransfer_CallBack+0x214>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+i)*angle_vco);
		}
	}

	// Square VCO
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b4>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d13f      	bne.n	8002962 <EVAL_AUDIO_HalfTransfer_CallBack+0x192>
 80028e2:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b8>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d03b      	beq.n	8002962 <EVAL_AUDIO_HalfTransfer_CallBack+0x192>
		 * --> n = 48000/f
		 * Therefore, duration of positive (one) half is n/2 = 48000/2f.  Same for negative (zero) half.
		 *
		 */

		samples_cycle = SAMPLERATE/freq_vco;
 80028ea:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80028f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	0fda      	lsrs	r2, r3, #31
 8002900:	4413      	add	r3, r2
 8002902:	105b      	asrs	r3, r3, #1
 8002904:	617b      	str	r3, [r7, #20]

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e026      	b.n	800295a <EVAL_AUDIO_HalfTransfer_CallBack+0x18a>
		{
			buffer_vco[i] = vco_amp * square((sample_count+i) % samples_cycle, samples_half_cycle);
 800290c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <EVAL_AUDIO_HalfTransfer_CallBack+0x2bc>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	4413      	add	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002920:	fb02 f201 	mul.w	r2, r2, r1
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	b292      	uxth	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fe96 	bl	8002660 <square>
 8002934:	eeb0 7a40 	vmov.f32	s14, s0
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c0>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002946:	edc7 7a01 	vstr	s15, [r7, #4]
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c4>)
 8002950:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		 */

		samples_cycle = SAMPLERATE/freq_vco;
		samples_half_cycle = samples_cycle/2;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	2b1f      	cmp	r3, #31
 800295e:	ddd5      	ble.n	800290c <EVAL_AUDIO_HalfTransfer_CallBack+0x13c>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+i)*angle_vco);
		}
	}

	// Square VCO
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 8002960:	e040      	b.n	80029e4 <EVAL_AUDIO_HalfTransfer_CallBack+0x214>
			buffer_vco[i] = vco_amp * square((sample_count+i) % samples_cycle, samples_half_cycle);
		}
	}

	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b4>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d13c      	bne.n	80029e4 <EVAL_AUDIO_HalfTransfer_CallBack+0x214>
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <EVAL_AUDIO_HalfTransfer_CallBack+0x2b8>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d038      	beq.n	80029e4 <EVAL_AUDIO_HalfTransfer_CallBack+0x214>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 8002972:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a4>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800297e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002982:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e029      	b.n	80029de <EVAL_AUDIO_HalfTransfer_CallBack+0x20e>
		{
			// TODO: store amplitude in a variable.
			buffer_vco[i] = 4000 * sawtooth(samples_cycle - ((sample_count+i) % samples_cycle), samples_cycle);
 800298a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	b299      	uxth	r1, r3
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <EVAL_AUDIO_HalfTransfer_CallBack+0x2bc>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	4413      	add	r3, r2
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	fb93 f0f2 	sdiv	r0, r3, r2
 80029a2:	fb02 f200 	mul.w	r2, r2, r0
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	1acb      	subs	r3, r1, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	b292      	uxth	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fe71 	bl	800269c <sawtooth>
 80029ba:	eeb0 7a40 	vmov.f32	s14, s0
 80029be:	eddf 7a36 	vldr	s15, [pc, #216]	; 8002a98 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c8>
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80029ce:	88bb      	ldrh	r3, [r7, #4]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <EVAL_AUDIO_HalfTransfer_CallBack+0x2c4>)
 80029d4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	3301      	adds	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	2b1f      	cmp	r3, #31
 80029e2:	ddd2      	ble.n	800298a <EVAL_AUDIO_HalfTransfer_CallBack+0x1ba>

	// SINE LFO
	// TODO: the amplitude depends on whether it's used for AM (low value) or FM (high value).
	// TODO: figure out how to allow for sub 2 hz frequencies
	// 			manually set angle_lfo very low and see what happens.
	if(wav_lfo == WAVE_SINE)
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <EVAL_AUDIO_HalfTransfer_CallBack+0x2cc>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d12d      	bne.n	8002a48 <EVAL_AUDIO_HalfTransfer_CallBack+0x278>
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e026      	b.n	8002a40 <EVAL_AUDIO_HalfTransfer_CallBack+0x270>
		{
			// buffer_lfo_float[i] = 0.4 + 0.4*arm_sin_f32((sample_count+i)*angle_lfo);		// Small amplitude for AM mod of sine
			// buffer_lfo_float[i] = 40.0 + 40.0*arm_sin_f32((sample_count+i)*angle_lfo);	// Large amplitude for FM mod of sine
			// buffer_lfo_float[i] = 10 + 10*arm_sin_f32((sample_count+i)*angle_lfo);		// Medium amplitude for FM mod of square
			buffer_lfo_float[i] = lfo_amp + lfo_amp*arm_sin_f32((sample_count+i)*angle_lfo);
 80029f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <EVAL_AUDIO_HalfTransfer_CallBack+0x2bc>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	4413      	add	r3, r2
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a10:	eeb0 0a67 	vmov.f32	s0, s15
 8002a14:	f000 ffe0 	bl	80039d8 <arm_sin_f32>
 8002a18:	eeb0 7a40 	vmov.f32	s14, s0
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <EVAL_AUDIO_HalfTransfer_CallBack+0x2d0>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <EVAL_AUDIO_HalfTransfer_CallBack+0x2d0>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <EVAL_AUDIO_HalfTransfer_CallBack+0x2d4>)
 8002a32:	00a3      	lsls	r3, r4, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	edc3 7a00 	vstr	s15, [r3]
	// TODO: the amplitude depends on whether it's used for AM (low value) or FM (high value).
	// TODO: figure out how to allow for sub 2 hz frequencies
	// 			manually set angle_lfo very low and see what happens.
	if(wav_lfo == WAVE_SINE)
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b1f      	cmp	r3, #31
 8002a44:	ddd5      	ble.n	80029f2 <EVAL_AUDIO_HalfTransfer_CallBack+0x222>
 8002a46:	e082      	b.n	8002b4e <EVAL_AUDIO_HalfTransfer_CallBack+0x37e>
		}
	}

	// Square LFO
	// TODO: amplitude adjustment -- so it's not just 000011111, but could be 0.2 0.2 0.2 0.6 0.6 0.6
	else if(wav_lfo == WAVE_SQUARE)
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <EVAL_AUDIO_HalfTransfer_CallBack+0x2cc>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14d      	bne.n	8002aec <EVAL_AUDIO_HalfTransfer_CallBack+0x31c>
	{
		samples_cycle = SAMPLERATE/freq_lfo;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <EVAL_AUDIO_HalfTransfer_CallBack+0x2a8>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	0fda      	lsrs	r2, r3, #31
 8002a66:	4413      	add	r3, r2
 8002a68:	105b      	asrs	r3, r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e038      	b.n	8002ae4 <EVAL_AUDIO_HalfTransfer_CallBack+0x314>
 8002a72:	bf00      	nop
 8002a74:	2000005c 	.word	0x2000005c
 8002a78:	2000005e 	.word	0x2000005e
 8002a7c:	40490fdb 	.word	0x40490fdb
 8002a80:	473b8000 	.word	0x473b8000
 8002a84:	20000062 	.word	0x20000062
 8002a88:	20000066 	.word	0x20000066
 8002a8c:	20000328 	.word	0x20000328
 8002a90:	20000068 	.word	0x20000068
 8002a94:	200000a8 	.word	0x200000a8
 8002a98:	457a0000 	.word	0x457a0000
 8002a9c:	20000064 	.word	0x20000064
 8002aa0:	2000006c 	.word	0x2000006c
 8002aa4:	20000128 	.word	0x20000128
		{
			buffer_lfo_float[i] = square((sample_count+i) % samples_cycle, samples_half_cycle);
 8002aa8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002aaa:	4bab      	ldr	r3, [pc, #684]	; (8002d58 <EVAL_AUDIO_HalfTransfer_CallBack+0x588>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	4413      	add	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	fb93 f1f2 	sdiv	r1, r3, r2
 8002abc:	fb02 f201 	mul.w	r2, r2, r1
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fdc8 	bl	8002660 <square>
 8002ad0:	eef0 7a40 	vmov.f32	s15, s0
 8002ad4:	4aa1      	ldr	r2, [pc, #644]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002ad6:	00a3      	lsls	r3, r4, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	edc3 7a00 	vstr	s15, [r3]
	else if(wav_lfo == WAVE_SQUARE)
	{
		samples_cycle = SAMPLERATE/freq_lfo;
		samples_half_cycle = samples_cycle/2;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b1f      	cmp	r3, #31
 8002ae8:	ddde      	ble.n	8002aa8 <EVAL_AUDIO_HalfTransfer_CallBack+0x2d8>
 8002aea:	e030      	b.n	8002b4e <EVAL_AUDIO_HalfTransfer_CallBack+0x37e>
			buffer_lfo_float[i] = square((sample_count+i) % samples_cycle, samples_half_cycle);
		}
	}

	// Sawtooth LFO
	else if(wav_lfo == WAVE_SAWTOOTH)
 8002aec:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <EVAL_AUDIO_HalfTransfer_CallBack+0x590>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d12c      	bne.n	8002b4e <EVAL_AUDIO_HalfTransfer_CallBack+0x37e>
	{
		samples_cycle = SAMPLERATE/freq_lfo;
 8002af4:	4b9b      	ldr	r3, [pc, #620]	; (8002d64 <EVAL_AUDIO_HalfTransfer_CallBack+0x594>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002b00:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e01d      	b.n	8002b48 <EVAL_AUDIO_HalfTransfer_CallBack+0x378>
		{
			// TODO: store amplitude in a variable.
			// TODO: outputs zeros.
			buffer_lfo_float[i] = sawtooth((sample_count+i) % samples_cycle, samples_cycle);
 8002b0c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <EVAL_AUDIO_HalfTransfer_CallBack+0x588>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	4413      	add	r3, r2
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b20:	fb02 f201 	mul.w	r2, r2, r1
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fdb4 	bl	800269c <sawtooth>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	4a88      	ldr	r2, [pc, #544]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002b3a:	00a3      	lsls	r3, r4, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
	// Sawtooth LFO
	else if(wav_lfo == WAVE_SAWTOOTH)
	{
		samples_cycle = SAMPLERATE/freq_lfo;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2b1f      	cmp	r3, #31
 8002b4c:	ddde      	ble.n	8002b0c <EVAL_AUDIO_HalfTransfer_CallBack+0x33c>
	{
		// TODO: fill lfo buffer with zeros.
	}

	// ADSR: Attack decay sustain release
	if(adsr)
 8002b4e:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <EVAL_AUDIO_HalfTransfer_CallBack+0x598>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <EVAL_AUDIO_HalfTransfer_CallBack+0x3a2>
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e007      	b.n	8002b6c <EVAL_AUDIO_HalfTransfer_CallBack+0x39c>
		{
			buffer_adsr[i] = 0;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	4a83      	ldr	r2, [pc, #524]	; (8002d6c <EVAL_AUDIO_HalfTransfer_CallBack+0x59c>)
 8002b60:	2100      	movs	r1, #0
 8002b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// ADSR: Attack decay sustain release
	if(adsr)
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	2b1f      	cmp	r3, #31
 8002b70:	ddf4      	ble.n	8002b5c <EVAL_AUDIO_HalfTransfer_CallBack+0x38c>
		}
	}


	// VCO-LFO modulation
	if(mod_type == MOD_AM)
 8002b72:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a0>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d124      	bne.n	8002bc4 <EVAL_AUDIO_HalfTransfer_CallBack+0x3f4>
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e01d      	b.n	8002bbc <EVAL_AUDIO_HalfTransfer_CallBack+0x3ec>
		{
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	497b      	ldr	r1, [pc, #492]	; (8002d74 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a4>)
 8002b86:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	ee07 2a90 	vmov	s15, r2
 8002b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	4971      	ldr	r1, [pc, #452]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	440a      	add	r2, r1
 8002b9c:	edd2 7a00 	vldr	s15, [r2]
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bac:	88ba      	ldrh	r2, [r7, #4]
 8002bae:	b291      	uxth	r1, r2
 8002bb0:	4a71      	ldr	r2, [pc, #452]	; (8002d78 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a8>)
 8002bb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


	// VCO-LFO modulation
	if(mod_type == MOD_AM)
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	3301      	adds	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	2b1f      	cmp	r3, #31
 8002bc0:	ddde      	ble.n	8002b80 <EVAL_AUDIO_HalfTransfer_CallBack+0x3b0>
 8002bc2:	e168      	b.n	8002e96 <EVAL_AUDIO_HalfTransfer_CallBack+0x6c6>
		}
	}

	// FM for sine wave VCO.
	// TODO: doesn't FM modulate sine wave with square wave
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
 8002bc4:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <EVAL_AUDIO_HalfTransfer_CallBack+0x5ac>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d146      	bne.n	8002c5a <EVAL_AUDIO_HalfTransfer_CallBack+0x48a>
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a0>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d142      	bne.n	8002c5a <EVAL_AUDIO_HalfTransfer_CallBack+0x48a>
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e03b      	b.n	8002c52 <EVAL_AUDIO_HalfTransfer_CallBack+0x482>

			// For modulating with square wave
			// buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+i)*angle_vco * buffer_lfo_float[i]);

			// For modulating with sawtooth wave
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+i)*angle_vco*buffer_lfo_float[i]);
 8002bda:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <EVAL_AUDIO_HalfTransfer_CallBack+0x588>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	4413      	add	r3, r2
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0c:	f000 fee4 	bl	80039d8 <arm_sin_f32>
 8002c10:	eeb0 7a40 	vmov.f32	s14, s0
 8002c14:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b0>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c1e:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b0>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a4>)
 8002c36:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3e:	494d      	ldr	r1, [pc, #308]	; (8002d74 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a4>)
 8002c40:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002c44:	b291      	uxth	r1, r2
 8002c46:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a8>)
 8002c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// FM for sine wave VCO.
	// TODO: doesn't FM modulate sine wave with square wave
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3301      	adds	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	2b1f      	cmp	r3, #31
 8002c56:	ddc0      	ble.n	8002bda <EVAL_AUDIO_HalfTransfer_CallBack+0x40a>
		}
	}

	// FM for sine wave VCO.
	// TODO: doesn't FM modulate sine wave with square wave
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
 8002c58:	e11d      	b.n	8002e96 <EVAL_AUDIO_HalfTransfer_CallBack+0x6c6>
		}
	}

	// FM for square wave VCO.
	// TODO: Fix glitchiness.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <EVAL_AUDIO_HalfTransfer_CallBack+0x5ac>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	f040 8094 	bne.w	8002d8c <EVAL_AUDIO_HalfTransfer_CallBack+0x5bc>
 8002c64:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a0>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f040 808f 	bne.w	8002d8c <EVAL_AUDIO_HalfTransfer_CallBack+0x5bc>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 8002c6e:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b4>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	0fda      	lsrs	r2, r3, #31
 8002c84:	4413      	add	r3, r2
 8002c86:	105b      	asrs	r3, r3, #1
 8002c88:	617b      	str	r3, [r7, #20]

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e05f      	b.n	8002d50 <EVAL_AUDIO_HalfTransfer_CallBack+0x580>
		{
			// buffer_vco[i] = vco_amp * square( (sample_count+i) % ( (uint16_t)(samples_cycle + 20*buffer_lfo_float[i]) ), ( samples_cycle + 20*buffer_lfo_float[i])/2 );
			buffer_vco[i] = vco_amp * square( (sample_count+i) % ( (uint16_t)(samples_cycle*fm_mod_level*buffer_lfo_float[i]) ), ( samples_cycle*fm_mod_level*buffer_lfo_float[i])/2 );
 8002c90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <EVAL_AUDIO_HalfTransfer_CallBack+0x588>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	4413      	add	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	ee07 2a90 	vmov	s15, r2
 8002ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca8:	4a37      	ldr	r2, [pc, #220]	; (8002d88 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b8>)
 8002caa:	edd2 7a00 	vldr	s15, [r2]
 8002cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	4929      	ldr	r1, [pc, #164]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	440a      	add	r2, r1
 8002cba:	edd2 7a00 	vldr	s15, [r2]
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002cca:	88ba      	ldrh	r2, [r7, #4]
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	fb93 f1f2 	sdiv	r1, r3, r2
 8002cd2:	fb02 f201 	mul.w	r2, r2, r1
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b8>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <EVAL_AUDIO_HalfTransfer_CallBack+0x58c>)
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7ff fca4 	bl	8002660 <square>
 8002d18:	eeb0 7a40 	vmov.f32	s14, s0
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <EVAL_AUDIO_HalfTransfer_CallBack+0x5b0>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d2e:	88bb      	ldrh	r3, [r7, #4]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a4>)
 8002d34:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	490d      	ldr	r1, [pc, #52]	; (8002d74 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a4>)
 8002d3e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002d42:	b291      	uxth	r1, r2
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <EVAL_AUDIO_HalfTransfer_CallBack+0x5a8>)
 8002d46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;
		samples_half_cycle = samples_cycle/2;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2b1f      	cmp	r3, #31
 8002d54:	dd9c      	ble.n	8002c90 <EVAL_AUDIO_HalfTransfer_CallBack+0x4c0>
		}
	}

	// FM for square wave VCO.
	// TODO: Fix glitchiness.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 8002d56:	e09e      	b.n	8002e96 <EVAL_AUDIO_HalfTransfer_CallBack+0x6c6>
 8002d58:	20000328 	.word	0x20000328
 8002d5c:	20000128 	.word	0x20000128
 8002d60:	20000064 	.word	0x20000064
 8002d64:	2000005e 	.word	0x2000005e
 8002d68:	20000060 	.word	0x20000060
 8002d6c:	200002a8 	.word	0x200002a8
 8002d70:	20000066 	.word	0x20000066
 8002d74:	200000a8 	.word	0x200000a8
 8002d78:	20000228 	.word	0x20000228
 8002d7c:	20000062 	.word	0x20000062
 8002d80:	20000068 	.word	0x20000068
 8002d84:	2000005c 	.word	0x2000005c
 8002d88:	2000007c 	.word	0x2000007c
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sawtooth wave VCO.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 8002d8c:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <EVAL_AUDIO_HalfTransfer_CallBack+0x6f8>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d16e      	bne.n	8002e72 <EVAL_AUDIO_HalfTransfer_CallBack+0x6a2>
 8002d94:	4b4d      	ldr	r3, [pc, #308]	; (8002ecc <EVAL_AUDIO_HalfTransfer_CallBack+0x6fc>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d16a      	bne.n	8002e72 <EVAL_AUDIO_HalfTransfer_CallBack+0x6a2>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 8002d9c:	4b4c      	ldr	r3, [pc, #304]	; (8002ed0 <EVAL_AUDIO_HalfTransfer_CallBack+0x700>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
		// samples_half_cycle = samples_cycle/2;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e05a      	b.n	8002e6a <EVAL_AUDIO_HalfTransfer_CallBack+0x69a>
		{
			// buffer_vco[i] = 40 * sawtooth(  samples_cycle - ((sample_count+i) % samples_cycle));

			buffer_vco[i] = vco_amp * sawtooth( samples_cycle - (sample_count+i) % ( (uint16_t)(samples_cycle*buffer_lfo_float[i]) ), samples_cycle*fm_mod_level*buffer_lfo_float[i]);
 8002db4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	b299      	uxth	r1, r3
 8002dba:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <EVAL_AUDIO_HalfTransfer_CallBack+0x704>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	4413      	add	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	ee07 2a90 	vmov	s15, r2
 8002dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	4841      	ldr	r0, [pc, #260]	; (8002ed8 <EVAL_AUDIO_HalfTransfer_CallBack+0x708>)
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4402      	add	r2, r0
 8002dd8:	edd2 7a00 	vldr	s15, [r2]
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de4:	edc7 7a01 	vstr	s15, [r7, #4]
 8002de8:	88ba      	ldrh	r2, [r7, #4]
 8002dea:	b292      	uxth	r2, r2
 8002dec:	fb93 f0f2 	sdiv	r0, r3, r2
 8002df0:	fb02 f200 	mul.w	r2, r2, r0
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	1acb      	subs	r3, r1, r3
 8002dfa:	b298      	uxth	r0, r3
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <EVAL_AUDIO_HalfTransfer_CallBack+0x70c>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	4a31      	ldr	r2, [pc, #196]	; (8002ed8 <EVAL_AUDIO_HalfTransfer_CallBack+0x708>)
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e24:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e28:	88bb      	ldrh	r3, [r7, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7ff fc35 	bl	800269c <sawtooth>
 8002e32:	eeb0 7a40 	vmov.f32	s14, s0
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <EVAL_AUDIO_HalfTransfer_CallBack+0x710>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e44:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <EVAL_AUDIO_HalfTransfer_CallBack+0x714>)
 8002e4e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4923      	ldr	r1, [pc, #140]	; (8002ee4 <EVAL_AUDIO_HalfTransfer_CallBack+0x714>)
 8002e58:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002e5c:	b291      	uxth	r1, r2
 8002e5e:	4a22      	ldr	r2, [pc, #136]	; (8002ee8 <EVAL_AUDIO_HalfTransfer_CallBack+0x718>)
 8002e60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;
		// samples_half_cycle = samples_cycle/2;

		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b1f      	cmp	r3, #31
 8002e6e:	dda1      	ble.n	8002db4 <EVAL_AUDIO_HalfTransfer_CallBack+0x5e4>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sawtooth wave VCO.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 8002e70:	e011      	b.n	8002e96 <EVAL_AUDIO_HalfTransfer_CallBack+0x6c6>
	}

	// No modulation
	else
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e00b      	b.n	8002e90 <EVAL_AUDIO_HalfTransfer_CallBack+0x6c0>
		{
			buffer_output[i] = buffer_vco[i];
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4919      	ldr	r1, [pc, #100]	; (8002ee4 <EVAL_AUDIO_HalfTransfer_CallBack+0x714>)
 8002e7e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002e82:	b291      	uxth	r1, r2
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <EVAL_AUDIO_HalfTransfer_CallBack+0x718>)
 8002e86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No modulation
	else
	{
		for(i = 0; i < BUFF_LEN_DIV2; i++)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2b1f      	cmp	r3, #31
 8002e94:	ddf0      	ble.n	8002e78 <EVAL_AUDIO_HalfTransfer_CallBack+0x6a8>

	// Remember lfo phase and resume next run of callback.
	// TODO: This line may be causing problems.
	//		 Might be able to rollover at end of waveform instead of samplerate.
	// 		However.. might need to also account for size of integer.
	sample_count = (sample_count + i) % SAMPLERATE;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <EVAL_AUDIO_HalfTransfer_CallBack+0x704>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <EVAL_AUDIO_HalfTransfer_CallBack+0x71c>)
 8002ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ea8:	1291      	asrs	r1, r2, #10
 8002eaa:	17da      	asrs	r2, r3, #31
 8002eac:	1a8a      	subs	r2, r1, r2
 8002eae:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8002eb2:	fb01 f202 	mul.w	r2, r1, r2
 8002eb6:	1a9a      	subs	r2, r3, r2
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <EVAL_AUDIO_HalfTransfer_CallBack+0x704>)
 8002ebc:	801a      	strh	r2, [r3, #0]
	return;
 8002ebe:	bf00      	nop
}
 8002ec0:	372c      	adds	r7, #44	; 0x2c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000062 	.word	0x20000062
 8002ecc:	20000066 	.word	0x20000066
 8002ed0:	2000005c 	.word	0x2000005c
 8002ed4:	20000328 	.word	0x20000328
 8002ed8:	20000128 	.word	0x20000128
 8002edc:	2000007c 	.word	0x2000007c
 8002ee0:	20000068 	.word	0x20000068
 8002ee4:	200000a8 	.word	0x200000a8
 8002ee8:	20000228 	.word	0x20000228
 8002eec:	057619f1 	.word	0x057619f1

08002ef0 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b08b      	sub	sp, #44	; 0x2c
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
	// Turns off yellow LED -- indicates no error occurred.
	STM_EVAL_LEDOff(LED3);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7fe fd40 	bl	8001980 <STM_EVAL_LEDOff>

	// Odd frequencies cause beating.
	if (freq_vco % 2) { /* x is odd */  freq_vco +=1; }
 8002f00:	4ba5      	ldr	r3, [pc, #660]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d006      	beq.n	8002f1e <EVAL_AUDIO_TransferComplete_CallBack+0x2e>
 8002f10:	4ba1      	ldr	r3, [pc, #644]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b9f      	ldr	r3, [pc, #636]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	if (freq_lfo % 2) { /* x is odd */  freq_lfo +=1; }
 8002f1e:	4b9f      	ldr	r3, [pc, #636]	; (800319c <EVAL_AUDIO_TransferComplete_CallBack+0x2ac>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <EVAL_AUDIO_TransferComplete_CallBack+0x4c>
 8002f2e:	4b9b      	ldr	r3, [pc, #620]	; (800319c <EVAL_AUDIO_TransferComplete_CallBack+0x2ac>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b98      	ldr	r3, [pc, #608]	; (800319c <EVAL_AUDIO_TransferComplete_CallBack+0x2ac>)
 8002f3a:	801a      	strh	r2, [r3, #0]

	// freq_vco = 2 * ADC3ConvertedValue;
	// freq_lfo = (float32_t) ADC3ConvertedValue/100;
	volatile float32_t angle_vco = freq_vco*PI/SAMPLERATE;
 8002f3c:	4b96      	ldr	r3, [pc, #600]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80031a0 <EVAL_AUDIO_TransferComplete_CallBack+0x2b0>
 8002f4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f52:	eddf 6a94 	vldr	s13, [pc, #592]	; 80031a4 <EVAL_AUDIO_TransferComplete_CallBack+0x2b4>
 8002f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	volatile float32_t angle_lfo = freq_lfo*PI/SAMPLERATE;
 8002f5e:	4b8f      	ldr	r3, [pc, #572]	; (800319c <EVAL_AUDIO_TransferComplete_CallBack+0x2ac>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80031a0 <EVAL_AUDIO_TransferComplete_CallBack+0x2b0>
 8002f70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f74:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80031a4 <EVAL_AUDIO_TransferComplete_CallBack+0x2b4>
 8002f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f7c:	edc7 7a08 	vstr	s15, [r7, #32]

	// float32_t  sinOutput;
	volatile int i = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
	volatile int samples_cycle = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
	volatile int samples_half_cycle = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
	// TODO: remove after testing.
	// memset(buffer_vco, 0, sizeof(buffer_vco));
	// memset(buffer_output, 0, sizeof(buffer_output));

	// Sine VCO
	if(wav_vco == WAVE_SINE)
 8002f8c:	4b86      	ldr	r3, [pc, #536]	; (80031a8 <EVAL_AUDIO_TransferComplete_CallBack+0x2b8>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d132      	bne.n	8002ffa <EVAL_AUDIO_TransferComplete_CallBack+0x10a>
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8002f94:	2320      	movs	r3, #32
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	e02b      	b.n	8002ff2 <EVAL_AUDIO_TransferComplete_CallBack+0x102>
		{
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_vco);
 8002f9a:	69fc      	ldr	r4, [r7, #28]
 8002f9c:	4b83      	ldr	r3, [pc, #524]	; (80031ac <EVAL_AUDIO_TransferComplete_CallBack+0x2bc>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3b20      	subs	r3, #32
 8002fa8:	4413      	add	r3, r2
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fba:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbe:	f000 fd0b 	bl	80039d8 <arm_sin_f32>
 8002fc2:	eeb0 7a40 	vmov.f32	s14, s0
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <EVAL_AUDIO_TransferComplete_CallBack+0x2c0>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <EVAL_AUDIO_TransferComplete_CallBack+0x2c0>)
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fde:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <EVAL_AUDIO_TransferComplete_CallBack+0x2c4>)
 8002fe8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	// memset(buffer_output, 0, sizeof(buffer_output));

	// Sine VCO
	if(wav_vco == WAVE_SINE)
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ff6:	ddd0      	ble.n	8002f9a <EVAL_AUDIO_TransferComplete_CallBack+0xaa>
 8002ff8:	e086      	b.n	8003108 <EVAL_AUDIO_TransferComplete_CallBack+0x218>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_vco);
		}
	}

	// SQUARE
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 8002ffa:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <EVAL_AUDIO_TransferComplete_CallBack+0x2b8>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d140      	bne.n	8003084 <EVAL_AUDIO_TransferComplete_CallBack+0x194>
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <EVAL_AUDIO_TransferComplete_CallBack+0x2c8>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d03c      	beq.n	8003084 <EVAL_AUDIO_TransferComplete_CallBack+0x194>
		 * --> n = 48000/f
		 * Therefore, duration of positive (one) half is n/2 = 48000/2f.  Same for negative (zero) half.
		 *
		 */

		samples_cycle = SAMPLERATE/freq_vco;
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003016:	fb93 f3f2 	sdiv	r3, r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	0fda      	lsrs	r2, r3, #31
 8003020:	4413      	add	r3, r2
 8003022:	105b      	asrs	r3, r3, #1
 8003024:	617b      	str	r3, [r7, #20]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003026:	2320      	movs	r3, #32
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e027      	b.n	800307c <EVAL_AUDIO_TransferComplete_CallBack+0x18c>
			// in order to point correctly to the 2nd half of the buffer.
			// However, i must also point to the correct sample.

			// Instead, i could have counted from 0.  In that case, we would use buffer_vco[i+BUFF_LEN_DIV2].
			// This might have been simpler.
			buffer_vco[i] = vco_amp * square((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_half_cycle);
 800302c:	69fc      	ldr	r4, [r7, #28]
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <EVAL_AUDIO_TransferComplete_CallBack+0x2bc>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b20      	subs	r3, #32
 800303a:	4413      	add	r3, r2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003042:	fb02 f201 	mul.w	r2, r2, r1
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	b29b      	uxth	r3, r3
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	b292      	uxth	r2, r2
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fb05 	bl	8002660 <square>
 8003056:	eeb0 7a40 	vmov.f32	s14, s0
 800305a:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <EVAL_AUDIO_TransferComplete_CallBack+0x2c0>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003068:	edc7 7a01 	vstr	s15, [r7, #4]
 800306c:	88bb      	ldrh	r3, [r7, #4]
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <EVAL_AUDIO_TransferComplete_CallBack+0x2c4>)
 8003072:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		 */

		samples_cycle = SAMPLERATE/freq_vco;
		samples_half_cycle = samples_cycle/2;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b3f      	cmp	r3, #63	; 0x3f
 8003080:	ddd4      	ble.n	800302c <EVAL_AUDIO_TransferComplete_CallBack+0x13c>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_vco);
		}
	}

	// SQUARE
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 8003082:	e041      	b.n	8003108 <EVAL_AUDIO_TransferComplete_CallBack+0x218>
			buffer_vco[i] = vco_amp * square((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_half_cycle);
		}
	}

	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <EVAL_AUDIO_TransferComplete_CallBack+0x2b8>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d13d      	bne.n	8003108 <EVAL_AUDIO_TransferComplete_CallBack+0x218>
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <EVAL_AUDIO_TransferComplete_CallBack+0x2c8>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d039      	beq.n	8003108 <EVAL_AUDIO_TransferComplete_CallBack+0x218>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <EVAL_AUDIO_TransferComplete_CallBack+0x2a8>)
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80030a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80030a6:	2320      	movs	r3, #32
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e02a      	b.n	8003102 <EVAL_AUDIO_TransferComplete_CallBack+0x212>
		{
			// TODO: store amplitude in a variable
			buffer_vco[i] = 4000 * sawtooth(samples_cycle - ((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle), samples_cycle);
 80030ac:	69fc      	ldr	r4, [r7, #28]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	b299      	uxth	r1, r3
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <EVAL_AUDIO_TransferComplete_CallBack+0x2bc>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b20      	subs	r3, #32
 80030be:	4413      	add	r3, r2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	fb93 f0f2 	sdiv	r0, r3, r2
 80030c6:	fb02 f200 	mul.w	r2, r2, r0
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	1acb      	subs	r3, r1, r3
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	b292      	uxth	r2, r2
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fadf 	bl	800269c <sawtooth>
 80030de:	eeb0 7a40 	vmov.f32	s14, s0
 80030e2:	eddf 7a36 	vldr	s15, [pc, #216]	; 80031bc <EVAL_AUDIO_TransferComplete_CallBack+0x2cc>
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80030f2:	88bb      	ldrh	r3, [r7, #4]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <EVAL_AUDIO_TransferComplete_CallBack+0x2c4>)
 80030f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b3f      	cmp	r3, #63	; 0x3f
 8003106:	ddd1      	ble.n	80030ac <EVAL_AUDIO_TransferComplete_CallBack+0x1bc>
			buffer_vco[i] = 4000 * sawtooth(samples_cycle - ((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle), samples_cycle);
		}
	}

	// SINE LFO
	if(wav_lfo == WAVE_SINE)
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <EVAL_AUDIO_TransferComplete_CallBack+0x2d0>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d12e      	bne.n	800316e <EVAL_AUDIO_TransferComplete_CallBack+0x27e>
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003110:	2320      	movs	r3, #32
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e027      	b.n	8003166 <EVAL_AUDIO_TransferComplete_CallBack+0x276>
		{
			buffer_lfo_float[i] = lfo_amp + lfo_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_lfo);
 8003116:	69fc      	ldr	r4, [r7, #28]
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <EVAL_AUDIO_TransferComplete_CallBack+0x2bc>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3b20      	subs	r3, #32
 8003124:	4413      	add	r3, r2
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	f000 fc4d 	bl	80039d8 <arm_sin_f32>
 800313e:	eeb0 7a40 	vmov.f32	s14, s0
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <EVAL_AUDIO_TransferComplete_CallBack+0x2d4>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <EVAL_AUDIO_TransferComplete_CallBack+0x2d4>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <EVAL_AUDIO_TransferComplete_CallBack+0x2d8>)
 8003158:	00a3      	lsls	r3, r4, #2
 800315a:	4413      	add	r3, r2
 800315c:	edc3 7a00 	vstr	s15, [r3]
	}

	// SINE LFO
	if(wav_lfo == WAVE_SINE)
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b3f      	cmp	r3, #63	; 0x3f
 800316a:	ddd4      	ble.n	8003116 <EVAL_AUDIO_TransferComplete_CallBack+0x226>
 800316c:	e083      	b.n	8003276 <EVAL_AUDIO_TransferComplete_CallBack+0x386>
		{
			buffer_lfo_float[i] = lfo_amp + lfo_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_lfo);

		}
	}
	else if(wav_lfo == WAVE_SQUARE)
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <EVAL_AUDIO_TransferComplete_CallBack+0x2d0>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d14d      	bne.n	8003212 <EVAL_AUDIO_TransferComplete_CallBack+0x322>
	{
		samples_cycle = SAMPLERATE/freq_lfo;
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <EVAL_AUDIO_TransferComplete_CallBack+0x2ac>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003182:	fb93 f3f2 	sdiv	r3, r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	0fda      	lsrs	r2, r3, #31
 800318c:	4413      	add	r3, r2
 800318e:	105b      	asrs	r3, r3, #1
 8003190:	617b      	str	r3, [r7, #20]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003192:	2320      	movs	r3, #32
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	e038      	b.n	800320a <EVAL_AUDIO_TransferComplete_CallBack+0x31a>
 8003198:	2000005c 	.word	0x2000005c
 800319c:	2000005e 	.word	0x2000005e
 80031a0:	40490fdb 	.word	0x40490fdb
 80031a4:	473b8000 	.word	0x473b8000
 80031a8:	20000062 	.word	0x20000062
 80031ac:	20000328 	.word	0x20000328
 80031b0:	20000068 	.word	0x20000068
 80031b4:	200000a8 	.word	0x200000a8
 80031b8:	20000066 	.word	0x20000066
 80031bc:	457a0000 	.word	0x457a0000
 80031c0:	20000064 	.word	0x20000064
 80031c4:	2000006c 	.word	0x2000006c
 80031c8:	20000128 	.word	0x20000128
		{
			buffer_lfo_float[i] = square((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_half_cycle);
 80031cc:	69fc      	ldr	r4, [r7, #28]
 80031ce:	4bad      	ldr	r3, [pc, #692]	; (8003484 <EVAL_AUDIO_TransferComplete_CallBack+0x594>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b20      	subs	r3, #32
 80031da:	4413      	add	r3, r2
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	fb93 f1f2 	sdiv	r1, r3, r2
 80031e2:	fb02 f201 	mul.w	r2, r2, r1
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	b292      	uxth	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fa35 	bl	8002660 <square>
 80031f6:	eef0 7a40 	vmov.f32	s15, s0
 80031fa:	4aa3      	ldr	r2, [pc, #652]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 80031fc:	00a3      	lsls	r3, r4, #2
 80031fe:	4413      	add	r3, r2
 8003200:	edc3 7a00 	vstr	s15, [r3]
	else if(wav_lfo == WAVE_SQUARE)
	{
		samples_cycle = SAMPLERATE/freq_lfo;
		samples_half_cycle = samples_cycle/2;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b3f      	cmp	r3, #63	; 0x3f
 800320e:	dddd      	ble.n	80031cc <EVAL_AUDIO_TransferComplete_CallBack+0x2dc>
 8003210:	e031      	b.n	8003276 <EVAL_AUDIO_TransferComplete_CallBack+0x386>
			buffer_lfo_float[i] = square((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_half_cycle);
		}
	}

	// Sawtooth LFO
	else if(wav_lfo == WAVE_SAWTOOTH)
 8003212:	4b9e      	ldr	r3, [pc, #632]	; (800348c <EVAL_AUDIO_TransferComplete_CallBack+0x59c>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d12d      	bne.n	8003276 <EVAL_AUDIO_TransferComplete_CallBack+0x386>
	{
		samples_cycle = SAMPLERATE/freq_lfo;
 800321a:	4b9d      	ldr	r3, [pc, #628]	; (8003490 <EVAL_AUDIO_TransferComplete_CallBack+0x5a0>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003226:	fb93 f3f2 	sdiv	r3, r3, r2
 800322a:	61bb      	str	r3, [r7, #24]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 800322c:	2320      	movs	r3, #32
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e01e      	b.n	8003270 <EVAL_AUDIO_TransferComplete_CallBack+0x380>
		{
			buffer_lfo_float[i] = sawtooth((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_cycle);
 8003232:	69fc      	ldr	r4, [r7, #28]
 8003234:	4b93      	ldr	r3, [pc, #588]	; (8003484 <EVAL_AUDIO_TransferComplete_CallBack+0x594>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	3b20      	subs	r3, #32
 8003240:	4413      	add	r3, r2
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	fb93 f1f2 	sdiv	r1, r3, r2
 8003248:	fb02 f201 	mul.w	r2, r2, r1
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	b292      	uxth	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fa20 	bl	800269c <sawtooth>
 800325c:	eef0 7a40 	vmov.f32	s15, s0
 8003260:	4a89      	ldr	r2, [pc, #548]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 8003262:	00a3      	lsls	r3, r4, #2
 8003264:	4413      	add	r3, r2
 8003266:	edc3 7a00 	vstr	s15, [r3]
	// Sawtooth LFO
	else if(wav_lfo == WAVE_SAWTOOTH)
	{
		samples_cycle = SAMPLERATE/freq_lfo;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3301      	adds	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b3f      	cmp	r3, #63	; 0x3f
 8003274:	dddd      	ble.n	8003232 <EVAL_AUDIO_TransferComplete_CallBack+0x342>
			buffer_lfo_float[i] = sawtooth((sample_count+(i-BUFF_LEN_DIV2)) % samples_cycle, samples_cycle);
		}
	}

	// Envelope
	if(adsr)
 8003276:	4b87      	ldr	r3, [pc, #540]	; (8003494 <EVAL_AUDIO_TransferComplete_CallBack+0x5a4>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <EVAL_AUDIO_TransferComplete_CallBack+0x3aa>
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 800327e:	2320      	movs	r3, #32
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e007      	b.n	8003294 <EVAL_AUDIO_TransferComplete_CallBack+0x3a4>
		{
			buffer_adsr[i] = 0;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4a84      	ldr	r2, [pc, #528]	; (8003498 <EVAL_AUDIO_TransferComplete_CallBack+0x5a8>)
 8003288:	2100      	movs	r1, #0
 800328a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Envelope
	if(adsr)
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b3f      	cmp	r3, #63	; 0x3f
 8003298:	ddf4      	ble.n	8003284 <EVAL_AUDIO_TransferComplete_CallBack+0x394>
		}
	}


	// VCO-LFO modulation
	if(mod_type == MOD_AM)
 800329a:	4b80      	ldr	r3, [pc, #512]	; (800349c <EVAL_AUDIO_TransferComplete_CallBack+0x5ac>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d124      	bne.n	80032ec <EVAL_AUDIO_TransferComplete_CallBack+0x3fc>
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80032a2:	2320      	movs	r3, #32
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e01d      	b.n	80032e4 <EVAL_AUDIO_TransferComplete_CallBack+0x3f4>
		{
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	497c      	ldr	r1, [pc, #496]	; (80034a0 <EVAL_AUDIO_TransferComplete_CallBack+0x5b0>)
 80032ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80032b2:	b292      	uxth	r2, r2
 80032b4:	ee07 2a90 	vmov	s15, r2
 80032b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	4972      	ldr	r1, [pc, #456]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 80032c0:	0092      	lsls	r2, r2, #2
 80032c2:	440a      	add	r2, r1
 80032c4:	edd2 7a00 	vldr	s15, [r2]
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80032d4:	88ba      	ldrh	r2, [r7, #4]
 80032d6:	b291      	uxth	r1, r2
 80032d8:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <EVAL_AUDIO_TransferComplete_CallBack+0x5b4>)
 80032da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


	// VCO-LFO modulation
	if(mod_type == MOD_AM)
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b3f      	cmp	r3, #63	; 0x3f
 80032e8:	ddde      	ble.n	80032a8 <EVAL_AUDIO_TransferComplete_CallBack+0x3b8>
 80032ea:	e170      	b.n	80035ce <EVAL_AUDIO_TransferComplete_CallBack+0x6de>
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
 80032ec:	4b6e      	ldr	r3, [pc, #440]	; (80034a8 <EVAL_AUDIO_TransferComplete_CallBack+0x5b8>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d147      	bne.n	8003384 <EVAL_AUDIO_TransferComplete_CallBack+0x494>
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <EVAL_AUDIO_TransferComplete_CallBack+0x5ac>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d143      	bne.n	8003384 <EVAL_AUDIO_TransferComplete_CallBack+0x494>
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80032fc:	2320      	movs	r3, #32
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e03c      	b.n	800337c <EVAL_AUDIO_TransferComplete_CallBack+0x48c>

			// For modulating with square wave
			// buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_vco * buffer_lfo_float[i]);

			// For modulating with sawtooth wave
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-BUFF_LEN_DIV2))*angle_vco * buffer_lfo_float[i]);
 8003302:	69fc      	ldr	r4, [r7, #28]
 8003304:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <EVAL_AUDIO_TransferComplete_CallBack+0x594>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3b20      	subs	r3, #32
 8003310:	4413      	add	r3, r2
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800331e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4a58      	ldr	r2, [pc, #352]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	eeb0 0a67 	vmov.f32	s0, s15
 8003336:	f000 fb4f 	bl	80039d8 <arm_sin_f32>
 800333a:	eeb0 7a40 	vmov.f32	s14, s0
 800333e:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <EVAL_AUDIO_TransferComplete_CallBack+0x5bc>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003348:	4b58      	ldr	r3, [pc, #352]	; (80034ac <EVAL_AUDIO_TransferComplete_CallBack+0x5bc>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003356:	edc7 7a01 	vstr	s15, [r7, #4]
 800335a:	88bb      	ldrh	r3, [r7, #4]
 800335c:	b29a      	uxth	r2, r3
 800335e:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <EVAL_AUDIO_TransferComplete_CallBack+0x5b0>)
 8003360:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	494d      	ldr	r1, [pc, #308]	; (80034a0 <EVAL_AUDIO_TransferComplete_CallBack+0x5b0>)
 800336a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800336e:	b291      	uxth	r1, r2
 8003370:	4a4c      	ldr	r2, [pc, #304]	; (80034a4 <EVAL_AUDIO_TransferComplete_CallBack+0x5b4>)
 8003372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b3f      	cmp	r3, #63	; 0x3f
 8003380:	ddbf      	ble.n	8003302 <EVAL_AUDIO_TransferComplete_CallBack+0x412>
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM)
 8003382:	e124      	b.n	80035ce <EVAL_AUDIO_TransferComplete_CallBack+0x6de>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for square wave VCO.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 8003384:	4b48      	ldr	r3, [pc, #288]	; (80034a8 <EVAL_AUDIO_TransferComplete_CallBack+0x5b8>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	2b02      	cmp	r3, #2
 800338a:	f040 8095 	bne.w	80034b8 <EVAL_AUDIO_TransferComplete_CallBack+0x5c8>
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <EVAL_AUDIO_TransferComplete_CallBack+0x5ac>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	f040 8090 	bne.w	80034b8 <EVAL_AUDIO_TransferComplete_CallBack+0x5c8>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 8003398:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <EVAL_AUDIO_TransferComplete_CallBack+0x5c0>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80033a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	0fda      	lsrs	r2, r3, #31
 80033ae:	4413      	add	r3, r2
 80033b0:	105b      	asrs	r3, r3, #1
 80033b2:	617b      	str	r3, [r7, #20]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80033b4:	2320      	movs	r3, #32
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e060      	b.n	800347c <EVAL_AUDIO_TransferComplete_CallBack+0x58c>
		{
			// buffer_vco[i] = vco_amp * square( (sample_count+(i-BUFF_LEN_DIV2)) % ( (uint16_t)(samples_cycle + 20*buffer_lfo_float[i]) ), ( samples_cycle + 20*buffer_lfo_float[i])/2 );
			buffer_vco[i] = vco_amp * square( (sample_count+(i-BUFF_LEN_DIV2)) % ( (uint16_t)(samples_cycle*fm_mod_level*buffer_lfo_float[i]) ), ( samples_cycle*fm_mod_level*buffer_lfo_float[i])/2 );
 80033ba:	69fc      	ldr	r4, [r7, #28]
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <EVAL_AUDIO_TransferComplete_CallBack+0x594>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3b20      	subs	r3, #32
 80033c8:	4413      	add	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	ee07 2a90 	vmov	s15, r2
 80033d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d4:	4a37      	ldr	r2, [pc, #220]	; (80034b4 <EVAL_AUDIO_TransferComplete_CallBack+0x5c4>)
 80033d6:	edd2 7a00 	vldr	s15, [r2]
 80033da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	4929      	ldr	r1, [pc, #164]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	440a      	add	r2, r1
 80033e6:	edd2 7a00 	vldr	s15, [r2]
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80033f6:	88ba      	ldrh	r2, [r7, #4]
 80033f8:	b292      	uxth	r2, r2
 80033fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80033fe:	fb02 f201 	mul.w	r2, r2, r1
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	b298      	uxth	r0, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003410:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <EVAL_AUDIO_TransferComplete_CallBack+0x5c4>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <EVAL_AUDIO_TransferComplete_CallBack+0x598>)
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800342e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003436:	edc7 7a01 	vstr	s15, [r7, #4]
 800343a:	88bb      	ldrh	r3, [r7, #4]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	f7ff f90e 	bl	8002660 <square>
 8003444:	eeb0 7a40 	vmov.f32	s14, s0
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <EVAL_AUDIO_TransferComplete_CallBack+0x5bc>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003456:	edc7 7a01 	vstr	s15, [r7, #4]
 800345a:	88bb      	ldrh	r3, [r7, #4]
 800345c:	b29a      	uxth	r2, r3
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <EVAL_AUDIO_TransferComplete_CallBack+0x5b0>)
 8003460:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	490d      	ldr	r1, [pc, #52]	; (80034a0 <EVAL_AUDIO_TransferComplete_CallBack+0x5b0>)
 800346a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800346e:	b291      	uxth	r1, r2
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <EVAL_AUDIO_TransferComplete_CallBack+0x5b4>)
 8003472:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;
		samples_half_cycle = samples_cycle/2;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3301      	adds	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b3f      	cmp	r3, #63	; 0x3f
 8003480:	dd9b      	ble.n	80033ba <EVAL_AUDIO_TransferComplete_CallBack+0x4ca>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for square wave VCO.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 8003482:	e0a4      	b.n	80035ce <EVAL_AUDIO_TransferComplete_CallBack+0x6de>
 8003484:	20000328 	.word	0x20000328
 8003488:	20000128 	.word	0x20000128
 800348c:	20000064 	.word	0x20000064
 8003490:	2000005e 	.word	0x2000005e
 8003494:	20000060 	.word	0x20000060
 8003498:	200002a8 	.word	0x200002a8
 800349c:	20000066 	.word	0x20000066
 80034a0:	200000a8 	.word	0x200000a8
 80034a4:	20000228 	.word	0x20000228
 80034a8:	20000062 	.word	0x20000062
 80034ac:	20000068 	.word	0x20000068
 80034b0:	2000005c 	.word	0x2000005c
 80034b4:	2000007c 	.word	0x2000007c
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sawtooth wave VCO.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 80034b8:	4b51      	ldr	r3, [pc, #324]	; (8003600 <EVAL_AUDIO_TransferComplete_CallBack+0x710>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d174      	bne.n	80035aa <EVAL_AUDIO_TransferComplete_CallBack+0x6ba>
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <EVAL_AUDIO_TransferComplete_CallBack+0x714>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d170      	bne.n	80035aa <EVAL_AUDIO_TransferComplete_CallBack+0x6ba>
	{
		samples_cycle = SAMPLERATE/freq_vco;
 80034c8:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <EVAL_AUDIO_TransferComplete_CallBack+0x718>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80034d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
		samples_half_cycle = samples_cycle/2;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	0fda      	lsrs	r2, r3, #31
 80034de:	4413      	add	r3, r2
 80034e0:	105b      	asrs	r3, r3, #1
 80034e2:	617b      	str	r3, [r7, #20]

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80034e4:	2320      	movs	r3, #32
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e05b      	b.n	80035a2 <EVAL_AUDIO_TransferComplete_CallBack+0x6b2>
		{
			// buffer_vco[i] = vco_amp * sawtooth( (sample_count+(i-BUFF_LEN_DIV2)) % ( (uint16_t)(samples_cycle + 20*buffer_lfo_float[i]) ), ( samples_cycle + 20*buffer_lfo_float[i])/2 );
			buffer_vco[i] = vco_amp * sawtooth( samples_cycle - (sample_count+(i-BUFF_LEN_DIV2)) % ( (uint16_t)(samples_cycle*buffer_lfo_float[i]) ), samples_cycle*fm_mod_level*buffer_lfo_float[i]);
 80034ea:	69fc      	ldr	r4, [r7, #28]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	b299      	uxth	r1, r3
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <EVAL_AUDIO_TransferComplete_CallBack+0x71c>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3b20      	subs	r3, #32
 80034fc:	4413      	add	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	ee07 2a90 	vmov	s15, r2
 8003504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	4841      	ldr	r0, [pc, #260]	; (8003610 <EVAL_AUDIO_TransferComplete_CallBack+0x720>)
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	4402      	add	r2, r0
 8003510:	edd2 7a00 	vldr	s15, [r2]
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003520:	88ba      	ldrh	r2, [r7, #4]
 8003522:	b292      	uxth	r2, r2
 8003524:	fb93 f0f2 	sdiv	r0, r3, r2
 8003528:	fb02 f200 	mul.w	r2, r2, r0
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	1acb      	subs	r3, r1, r3
 8003532:	b298      	uxth	r0, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <EVAL_AUDIO_TransferComplete_CallBack+0x724>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <EVAL_AUDIO_TransferComplete_CallBack+0x720>)
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800355c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003560:	88bb      	ldrh	r3, [r7, #4]
 8003562:	b29b      	uxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	f7ff f899 	bl	800269c <sawtooth>
 800356a:	eeb0 7a40 	vmov.f32	s14, s0
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <EVAL_AUDIO_TransferComplete_CallBack+0x728>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003580:	88bb      	ldrh	r3, [r7, #4]
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <EVAL_AUDIO_TransferComplete_CallBack+0x72c>)
 8003586:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	4923      	ldr	r1, [pc, #140]	; (800361c <EVAL_AUDIO_TransferComplete_CallBack+0x72c>)
 8003590:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003594:	b291      	uxth	r1, r2
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <EVAL_AUDIO_TransferComplete_CallBack+0x730>)
 8003598:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
	{
		samples_cycle = SAMPLERATE/freq_vco;
		samples_half_cycle = samples_cycle/2;

		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b3f      	cmp	r3, #63	; 0x3f
 80035a6:	dda0      	ble.n	80034ea <EVAL_AUDIO_TransferComplete_CallBack+0x5fa>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sawtooth wave VCO.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 80035a8:	e011      	b.n	80035ce <EVAL_AUDIO_TransferComplete_CallBack+0x6de>
	}

	// No modulation
	else
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80035aa:	2320      	movs	r3, #32
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e00b      	b.n	80035c8 <EVAL_AUDIO_TransferComplete_CallBack+0x6d8>
		{
			buffer_output[i] = buffer_vco[i];
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	4919      	ldr	r1, [pc, #100]	; (800361c <EVAL_AUDIO_TransferComplete_CallBack+0x72c>)
 80035b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80035ba:	b291      	uxth	r1, r2
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <EVAL_AUDIO_TransferComplete_CallBack+0x730>)
 80035be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No modulation
	else
	{
		for(i = BUFF_LEN_DIV2; i < BUFF_LEN; i++)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b3f      	cmp	r3, #63	; 0x3f
 80035cc:	ddf0      	ble.n	80035b0 <EVAL_AUDIO_TransferComplete_CallBack+0x6c0>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// Remember lfo phase and resume next run of callback.
	sample_count = (sample_count + i - BUFF_LEN_DIV2) % SAMPLERATE;
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <EVAL_AUDIO_TransferComplete_CallBack+0x71c>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	3b20      	subs	r3, #32
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <EVAL_AUDIO_TransferComplete_CallBack+0x734>)
 80035de:	fb82 1203 	smull	r1, r2, r2, r3
 80035e2:	1291      	asrs	r1, r2, #10
 80035e4:	17da      	asrs	r2, r3, #31
 80035e6:	1a8a      	subs	r2, r1, r2
 80035e8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80035ec:	fb01 f202 	mul.w	r2, r1, r2
 80035f0:	1a9a      	subs	r2, r3, r2
 80035f2:	b292      	uxth	r2, r2
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <EVAL_AUDIO_TransferComplete_CallBack+0x71c>)
 80035f6:	801a      	strh	r2, [r3, #0]
	return;
 80035f8:	bf00      	nop
}
 80035fa:	372c      	adds	r7, #44	; 0x2c
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}
 8003600:	20000062 	.word	0x20000062
 8003604:	20000066 	.word	0x20000066
 8003608:	2000005c 	.word	0x2000005c
 800360c:	20000328 	.word	0x20000328
 8003610:	20000128 	.word	0x20000128
 8003614:	2000007c 	.word	0x2000007c
 8003618:	20000068 	.word	0x20000068
 800361c:	200000a8 	.word	0x200000a8
 8003620:	20000228 	.word	0x20000228
 8003624:	057619f1 	.word	0x057619f1

08003628 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */

  // return -1;
	return 0;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8003640:	2001      	movs	r0, #1
 8003642:	f7fe f985 	bl	8001950 <STM_EVAL_LEDOn>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop

08003650 <ADC3_CH12_DMA_Config>:
  * @brief  ADC3 channel12 with DMA configuration
  * @param  None
  * @retval None
  */
void ADC3_CH12_DMA_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b09c      	sub	sp, #112	; 0x70
 8003654:	af00      	add	r7, sp, #0
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC, ENABLE);
 8003656:	2101      	movs	r1, #1
 8003658:	483b      	ldr	r0, [pc, #236]	; (8003748 <ADC3_CH12_DMA_Config+0xf8>)
 800365a:	f7fd fe7f 	bl	800135c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 800365e:	2101      	movs	r1, #1
 8003660:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003664:	f7fd feba 	bl	80013dc <RCC_APB2PeriphClockCmd>

  /* DMA2 Stream0 channel0 configuration **************************************/
  DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 8003668:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800366c:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC3_DR_ADDRESS;
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <ADC3_CH12_DMA_Config+0xfc>)
 8003670:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC3ConvertedValue;
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <ADC3_CH12_DMA_Config+0x100>)
 8003674:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_BufferSize = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8003686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800368c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8003692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_Priority = DMA_Priority_Low;
 8003698:	2300      	movs	r3, #0
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800369c:	2300      	movs	r3, #0
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80036a0:	2301      	movs	r3, #1
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80036a4:	2300      	movs	r3, #0
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80036a8:	2300      	movs	r3, #0
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4619      	mov	r1, r3
 80036b2:	4828      	ldr	r0, [pc, #160]	; (8003754 <ADC3_CH12_DMA_Config+0x104>)
 80036b4:	f7fd f8e0 	bl	8000878 <DMA_Init>
  DMA_Cmd(DMA2_Stream0, ENABLE);
 80036b8:	2101      	movs	r1, #1
 80036ba:	4826      	ldr	r0, [pc, #152]	; (8003754 <ADC3_CH12_DMA_Config+0x104>)
 80036bc:	f7fd f934 	bl	8000928 <DMA_Cmd>

  /* Configure ADC3 Channel12 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80036c0:	2304      	movs	r3, #4
 80036c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80036c4:	2303      	movs	r3, #3
 80036c6:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80036c8:	2300      	movs	r3, #0
 80036ca:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4821      	ldr	r0, [pc, #132]	; (8003758 <ADC3_CH12_DMA_Config+0x108>)
 80036d2:	f7fd fa5b 	bl	8000b8c <GPIO_Init>

  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80036d6:	2300      	movs	r3, #0
 80036d8:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80036da:	2300      	movs	r3, #0
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80036de:	2300      	movs	r3, #0
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	; 0x54
  ADC_CommonInit(&ADC_CommonInitStructure);
 80036e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc fe24 	bl	8000338 <ADC_CommonInit>

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_8b;
 80036f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f4:	65bb      	str	r3, [r7, #88]	; 0x58
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8003702:	2300      	movs	r3, #0
 8003704:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8003706:	2300      	movs	r3, #0
 8003708:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_InitStructure.ADC_NbrOfConversion = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  ADC_Init(ADC3, &ADC_InitStructure);
 8003710:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003714:	4619      	mov	r1, r3
 8003716:	4811      	ldr	r0, [pc, #68]	; (800375c <ADC3_CH12_DMA_Config+0x10c>)
 8003718:	f7fc fdb8 	bl	800028c <ADC_Init>

  /* ADC3 regular channel12 configuration *************************************/
  ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);
 800371c:	2300      	movs	r3, #0
 800371e:	2201      	movs	r2, #1
 8003720:	210c      	movs	r1, #12
 8003722:	480e      	ldr	r0, [pc, #56]	; (800375c <ADC3_CH12_DMA_Config+0x10c>)
 8003724:	f7fc fe4c 	bl	80003c0 <ADC_RegularChannelConfig>

 /* Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);
 8003728:	2101      	movs	r1, #1
 800372a:	480c      	ldr	r0, [pc, #48]	; (800375c <ADC3_CH12_DMA_Config+0x10c>)
 800372c:	f7fc ff3e 	bl	80005ac <ADC_DMARequestAfterLastTransferCmd>

  /* Enable ADC3 DMA */
  ADC_DMACmd(ADC3, ENABLE);
 8003730:	2101      	movs	r1, #1
 8003732:	480a      	ldr	r0, [pc, #40]	; (800375c <ADC3_CH12_DMA_Config+0x10c>)
 8003734:	f7fc ff1e 	bl	8000574 <ADC_DMACmd>

  /* Enable ADC3 */
  ADC_Cmd(ADC3, ENABLE);
 8003738:	2101      	movs	r1, #1
 800373a:	4808      	ldr	r0, [pc, #32]	; (800375c <ADC3_CH12_DMA_Config+0x10c>)
 800373c:	f7fc fe24 	bl	8000388 <ADC_Cmd>
}
 8003740:	bf00      	nop
 8003742:	3770      	adds	r7, #112	; 0x70
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	00400004 	.word	0x00400004
 800374c:	4001224c 	.word	0x4001224c
 8003750:	200000a4 	.word	0x200000a4
 8003754:	40026410 	.word	0x40026410
 8003758:	40020800 	.word	0x40020800
 800375c:	40012200 	.word	0x40012200

08003760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003766:	e003      	b.n	8003770 <LoopCopyDataInit>

08003768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800376a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800376c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800376e:	3104      	adds	r1, #4

08003770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003770:	480b      	ldr	r0, [pc, #44]	; (80037a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003778:	d3f6      	bcc.n	8003768 <CopyDataInit>
  ldr  r2, =_sbss
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800377c:	e002      	b.n	8003784 <LoopFillZerobss>

0800377e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800377e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003780:	f842 3b04 	str.w	r3, [r2], #4

08003784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003788:	d3f9      	bcc.n	800377e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800378a:	f000 f85b 	bl	8003844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800378e:	f000 f95f 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003792:	f7fe ffb5 	bl	8002700 <main>
  bx  lr    
 8003796:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003798:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800379c:	080042d8 	.word	0x080042d8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037a4:	20000080 	.word	0x20000080
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80037a8:	20000080 	.word	0x20000080
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037ac:	200003ac 	.word	0x200003ac

080037b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC_IRQHandler>
	...

080037b4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80037c8:	e7fe      	b.n	80037c8 <HardFault_Handler+0x4>
 80037ca:	bf00      	nop

080037cc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80037d0:	e7fe      	b.n	80037d0 <MemManage_Handler+0x4>
 80037d2:	bf00      	nop

080037d4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80037d8:	e7fe      	b.n	80037d8 <BusFault_Handler+0x4>
 80037da:	bf00      	nop

080037dc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80037e0:	e7fe      	b.n	80037e0 <UsageFault_Handler+0x4>
 80037e2:	bf00      	nop

080037e4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop

08003814 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
//		// f1 = ADC3ConvertedValue * 10;
//
//		/*  update the duration between each note   */
//		// TimingDelay = (uint32_t)(5.f + 50.f * ((float)ADC3ConvertedValue) / 255.f);
//	}
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop

08003824 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  //#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003848:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <SystemInit+0x60>)
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <SystemInit+0x60>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  //#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <SystemInit+0x64>)
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <SystemInit+0x64>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <SystemInit+0x64>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <SystemInit+0x64>)
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <SystemInit+0x64>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003878:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <SystemInit+0x64>)
 800387c:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <SystemInit+0x68>)
 800387e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <SystemInit+0x64>)
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <SystemInit+0x64>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <SystemInit+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003892:	f000 f80d 	bl	80038b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <SystemInit+0x60>)
 8003898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800389c:	609a      	str	r2, [r3, #8]
#endif
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	24003010 	.word	0x24003010

080038b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	2300      	movs	r3, #0
 80038bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80038be:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <SetSysClock+0x114>)
 80038c0:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <SetSysClock+0x114>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <SetSysClock+0x114>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3301      	adds	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <SetSysClock+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038e6:	d1f0      	bne.n	80038ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80038e8:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <SetSysClock+0x114>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80038f4:	2301      	movs	r3, #1
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	e001      	b.n	80038fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80038fa:	2300      	movs	r3, #0
 80038fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d142      	bne.n	800398a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <SetSysClock+0x114>)
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <SetSysClock+0x114>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <SetSysClock+0x118>)
 8003912:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <SetSysClock+0x118>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800391c:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <SetSysClock+0x114>)
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <SetSysClock+0x114>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <SetSysClock+0x114>)
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <SetSysClock+0x114>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <SetSysClock+0x114>)
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <SetSysClock+0x114>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800393a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <SetSysClock+0x114>)
 800393e:	4a23      	ldr	r2, [pc, #140]	; (80039cc <SetSysClock+0x11c>)
 8003940:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <SetSysClock+0x114>)
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <SetSysClock+0x114>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800394e:	bf00      	nop
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <SetSysClock+0x114>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f9      	beq.n	8003950 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <SetSysClock+0x120>)
 800395e:	f240 6205 	movw	r2, #1541	; 0x605
 8003962:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <SetSysClock+0x114>)
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <SetSysClock+0x114>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <SetSysClock+0x114>)
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <SetSysClock+0x114>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800397c:	bf00      	nop
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <SetSysClock+0x114>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d1f9      	bne.n	800397e <SetSysClock+0xce>

/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800398a:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <SetSysClock+0x114>)
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <SetSysClock+0x114>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003994:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <SetSysClock+0x114>)
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <SetSysClock+0x124>)
 800399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <SetSysClock+0x114>)
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <SetSysClock+0x114>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80039aa:	bf00      	nop
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SetSysClock+0x114>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f9      	beq.n	80039ac <SetSysClock+0xfc>
  {
  }
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000
 80039cc:	07405408 	.word	0x07405408
 80039d0:	40023c00 	.word	0x40023c00
 80039d4:	30004080 	.word	0x30004080

080039d8 <arm_sin_f32>:
 80039d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003a44 <arm_sin_f32+0x6c>
 80039dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80039e0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80039ec:	d504      	bpl.n	80039f8 <arm_sin_f32+0x20>
 80039ee:	ee17 3a90 	vmov	r3, s15
 80039f2:	3b01      	subs	r3, #1
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003a48 <arm_sin_f32+0x70>
 8003a00:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <arm_sin_f32+0x74>)
 8003a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a0e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003a12:	ee16 3a90 	vmov	r3, s13
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee06 3a90 	vmov	s13, r3
 8003a1e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8003a22:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a2a:	edd1 6a00 	vldr	s13, [r1]
 8003a2e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003a32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3a:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003a3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003a42:	4770      	bx	lr
 8003a44:	3e22f983 	.word	0x3e22f983
 8003a48:	44000000 	.word	0x44000000
 8003a4c:	08003acc 	.word	0x08003acc

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <__libc_init_array+0x3c>)
 8003a54:	4c0e      	ldr	r4, [pc, #56]	; (8003a90 <__libc_init_array+0x40>)
 8003a56:	1ae4      	subs	r4, r4, r3
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	2500      	movs	r5, #0
 8003a5c:	461e      	mov	r6, r3
 8003a5e:	42a5      	cmp	r5, r4
 8003a60:	d004      	beq.n	8003a6c <__libc_init_array+0x1c>
 8003a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a66:	4798      	blx	r3
 8003a68:	3501      	adds	r5, #1
 8003a6a:	e7f8      	b.n	8003a5e <__libc_init_array+0xe>
 8003a6c:	f000 f816 	bl	8003a9c <_init>
 8003a70:	4c08      	ldr	r4, [pc, #32]	; (8003a94 <__libc_init_array+0x44>)
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <__libc_init_array+0x48>)
 8003a74:	1ae4      	subs	r4, r4, r3
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	2500      	movs	r5, #0
 8003a7a:	461e      	mov	r6, r3
 8003a7c:	42a5      	cmp	r5, r4
 8003a7e:	d004      	beq.n	8003a8a <__libc_init_array+0x3a>
 8003a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a84:	4798      	blx	r3
 8003a86:	3501      	adds	r5, #1
 8003a88:	e7f8      	b.n	8003a7c <__libc_init_array+0x2c>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	080042d0 	.word	0x080042d0
 8003a90:	080042d0 	.word	0x080042d0
 8003a94:	080042d4 	.word	0x080042d4
 8003a98:	080042d0 	.word	0x080042d0

08003a9c <_init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr

08003aa8 <_fini>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr
