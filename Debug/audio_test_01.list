
C:\stm32_workspace\audio_test_01\Debug\audio_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  08004f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
  7 .bss          0000046c  200000c0  200000c0  000200c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000052c  2000052c  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bd1e  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e0d  00000000  00000000  0002be0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e98  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d38  00000000  00000000  0002eab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000531f  00000000  00000000  0002f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b4d  00000000  00000000  00034b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003965c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d34  00000000  00000000  0003974c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003d480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c0 	.word	0x200000c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046dc 	.word	0x080046dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	080046dc 	.word	0x080046dc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73bb      	strb	r3, [r7, #14]
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d038      	beq.n	8000b9a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <NVIC_Init+0xbc>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f1c3 0304 	rsb	r3, r3, #4
 8000b3c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b3e:	7b7a      	ldrb	r2, [r7, #13]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	fa42 f303 	asr.w	r3, r2, r3
 8000b46:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	789a      	ldrb	r2, [r3, #2]
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <NVIC_Init+0xc0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <NVIC_Init+0xc0>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b98:	e00f      	b.n	8000bba <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b9a:	490c      	ldr	r1, [pc, #48]	; (8000bcc <NVIC_Init+0xc0>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	095b      	lsrs	r3, r3, #5
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	2201      	movs	r2, #1
 8000bb0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	f100 0320 	add.w	r3, r0, #32
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bda:	f001 f98d 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000bde:	2100      	movs	r1, #0
 8000be0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000be4:	f001 f988 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <ADC_Init+0xa8>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c3e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c44:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	795b      	ldrb	r3, [r3, #5]
 8000c4a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c66:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	7d1b      	ldrb	r3, [r3, #20]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	051b      	lsls	r3, r3, #20
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	c0fff7fd 	.word	0xc0fff7fd

08000c98 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	751a      	strb	r2, [r3, #20]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <ADC_CommonInit+0x48>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <ADC_CommonInit+0x4c>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000cfa:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d00:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d06:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <ADC_CommonInit+0x48>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6053      	str	r3, [r2, #4]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40012300 	.word	0x40012300
 8000d24:	fffc30e0 	.word	0xfffc30e0

08000d28 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f043 0201 	orr.w	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000d72:	e005      	b.n	8000d80 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f023 0201 	bic.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
  }
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	70fb      	strb	r3, [r7, #3]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70bb      	strb	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d923      	bls.n	8000dfc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	f1a3 020a 	sub.w	r2, r3, #10
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000dd8:	7879      	ldrb	r1, [r7, #1]
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	f1a3 020a 	sub.w	r2, r3, #10
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	e01e      	b.n	8000e3a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e1c:	7879      	ldrb	r1, [r7, #1]
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e3a:	78bb      	ldrb	r3, [r7, #2]
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	d821      	bhi.n	8000e84 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	221f      	movs	r2, #31
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e62:	78f9      	ldrb	r1, [r7, #3]
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000e82:	e047      	b.n	8000f14 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	2b0c      	cmp	r3, #12
 8000e88:	d821      	bhi.n	8000ece <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	1fda      	subs	r2, r3, #7
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	221f      	movs	r2, #31
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000eac:	78f9      	ldrb	r1, [r7, #3]
 8000eae:	78bb      	ldrb	r3, [r7, #2]
 8000eb0:	1fda      	subs	r2, r3, #7
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000ecc:	e022      	b.n	8000f14 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000ed4:	78bb      	ldrb	r3, [r7, #2]
 8000ed6:	f1a3 020d 	sub.w	r2, r3, #13
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	221f      	movs	r2, #31
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000ef2:	78f9      	ldrb	r1, [r7, #3]
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	f1a3 020d 	sub.w	r2, r3, #13
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000f3e:	e005      	b.n	8000f4c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000f76:	e005      	b.n	8000f84 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
  }
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	43da      	mvns	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}                    
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <DAC_Init+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000fd4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ff4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <DAC_Init+0x64>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40007400 	.word	0x40007400

08001024 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <DAC_Cmd+0x48>)
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <DAC_Cmd+0x48>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2001      	movs	r0, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	fa00 f303 	lsl.w	r3, r0, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8001048:	e009      	b.n	800105e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <DAC_Cmd+0x48>)
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <DAC_Cmd+0x48>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2001      	movs	r0, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	fa00 f303 	lsl.w	r3, r0, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4013      	ands	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007400 	.word	0x40007400

08001070 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <DAC_SetChannel1Data+0x34>)
 8001082:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007400 	.word	0x40007400

080010a8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 0201 	bic.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a46      	ldr	r2, [pc, #280]	; (80011fc <DMA_DeInit+0x154>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d103      	bne.n	80010f0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <DMA_DeInit+0x158>)
 80010ea:	223d      	movs	r2, #61	; 0x3d
 80010ec:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010ee:	e07e      	b.n	80011ee <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a44      	ldr	r2, [pc, #272]	; (8001204 <DMA_DeInit+0x15c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d104      	bne.n	8001102 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <DMA_DeInit+0x158>)
 80010fa:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80010fe:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001100:	e075      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a40      	ldr	r2, [pc, #256]	; (8001208 <DMA_DeInit+0x160>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d104      	bne.n	8001114 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <DMA_DeInit+0x158>)
 800110c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001110:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001112:	e06c      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3d      	ldr	r2, [pc, #244]	; (800120c <DMA_DeInit+0x164>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d104      	bne.n	8001126 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <DMA_DeInit+0x158>)
 800111e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001122:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001124:	e063      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a39      	ldr	r2, [pc, #228]	; (8001210 <DMA_DeInit+0x168>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d103      	bne.n	8001136 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <DMA_DeInit+0x158>)
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <DMA_DeInit+0x16c>)
 8001132:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001134:	e05b      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <DMA_DeInit+0x170>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d103      	bne.n	8001146 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <DMA_DeInit+0x158>)
 8001140:	4a36      	ldr	r2, [pc, #216]	; (800121c <DMA_DeInit+0x174>)
 8001142:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001144:	e053      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a35      	ldr	r2, [pc, #212]	; (8001220 <DMA_DeInit+0x178>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d103      	bne.n	8001156 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <DMA_DeInit+0x158>)
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <DMA_DeInit+0x17c>)
 8001152:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001154:	e04b      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <DMA_DeInit+0x180>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d104      	bne.n	8001168 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <DMA_DeInit+0x158>)
 8001160:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001164:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001166:	e042      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a30      	ldr	r2, [pc, #192]	; (800122c <DMA_DeInit+0x184>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d103      	bne.n	8001178 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <DMA_DeInit+0x188>)
 8001172:	223d      	movs	r2, #61	; 0x3d
 8001174:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001176:	e03a      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <DMA_DeInit+0x18c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d104      	bne.n	800118a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <DMA_DeInit+0x188>)
 8001182:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001186:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001188:	e031      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <DMA_DeInit+0x190>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d104      	bne.n	800119c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <DMA_DeInit+0x188>)
 8001194:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001198:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800119a:	e028      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a27      	ldr	r2, [pc, #156]	; (800123c <DMA_DeInit+0x194>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d104      	bne.n	80011ae <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <DMA_DeInit+0x188>)
 80011a6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80011aa:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011ac:	e01f      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <DMA_DeInit+0x198>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d103      	bne.n	80011be <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <DMA_DeInit+0x188>)
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <DMA_DeInit+0x16c>)
 80011ba:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011bc:	e017      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <DMA_DeInit+0x19c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d103      	bne.n	80011ce <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <DMA_DeInit+0x188>)
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <DMA_DeInit+0x174>)
 80011ca:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011cc:	e00f      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <DMA_DeInit+0x1a0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d103      	bne.n	80011de <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <DMA_DeInit+0x188>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <DMA_DeInit+0x17c>)
 80011da:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011dc:	e007      	b.n	80011ee <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <DMA_DeInit+0x1a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d103      	bne.n	80011ee <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <DMA_DeInit+0x188>)
 80011e8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80011ec:	60da      	str	r2, [r3, #12]
    }
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40026010 	.word	0x40026010
 8001200:	40026000 	.word	0x40026000
 8001204:	40026028 	.word	0x40026028
 8001208:	40026040 	.word	0x40026040
 800120c:	40026058 	.word	0x40026058
 8001210:	40026070 	.word	0x40026070
 8001214:	2000003d 	.word	0x2000003d
 8001218:	40026088 	.word	0x40026088
 800121c:	20000f40 	.word	0x20000f40
 8001220:	400260a0 	.word	0x400260a0
 8001224:	203d0000 	.word	0x203d0000
 8001228:	400260b8 	.word	0x400260b8
 800122c:	40026410 	.word	0x40026410
 8001230:	40026400 	.word	0x40026400
 8001234:	40026428 	.word	0x40026428
 8001238:	40026440 	.word	0x40026440
 800123c:	40026458 	.word	0x40026458
 8001240:	40026470 	.word	0x40026470
 8001244:	40026488 	.word	0x40026488
 8001248:	400264a0 	.word	0x400264a0
 800124c:	400264b8 	.word	0x400264b8

08001250 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <DMA_Init+0xac>)
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800127a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001286:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001292:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800129e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 0307 	bic.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4313      	orrs	r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60da      	str	r2, [r3, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	f01c803f 	.word	0xf01c803f

08001300 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800138e:	e005      	b.n	800139c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0201 	bic.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
  }
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <DMA_GetFlagStatus+0x6c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d802      	bhi.n	80013c8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <DMA_GetFlagStatus+0x70>)
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e001      	b.n	80013cc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <DMA_GetFlagStatus+0x74>)
 80013ca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e002      	b.n	80013e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80013ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	e001      	b.n	8001404 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	4002640f 	.word	0x4002640f
 8001418:	40026000 	.word	0x40026000
 800141c:	40026400 	.word	0x40026400

08001420 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <DMA_ClearFlag+0x50>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <DMA_ClearFlag+0x54>)
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e001      	b.n	800143c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <DMA_ClearFlag+0x58>)
 800143a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800144c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001454:	e006      	b.n	8001464 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800145c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6093      	str	r3, [r2, #8]
  }    
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	4002640f 	.word	0x4002640f
 8001474:	40026000 	.word	0x40026000
 8001478:	40026400 	.word	0x40026400

0800147c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00f      	beq.n	80014b4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	e005      	b.n	80014b4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d014      	beq.n	80014e4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031e 	and.w	r3, r3, #30
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80014d0:	e008      	b.n	80014e4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 031e 	and.w	r3, r3, #30
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <EXTI_Init+0xe0>)
 80014fe:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d04f      	beq.n	80015a8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001508:	4931      	ldr	r1, [pc, #196]	; (80015d0 <EXTI_Init+0xe0>)
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <EXTI_Init+0xe0>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	43db      	mvns	r3, r3
 8001514:	4013      	ands	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001518:	492d      	ldr	r1, [pc, #180]	; (80015d0 <EXTI_Init+0xe0>)
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <EXTI_Init+0xe0>)
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	43db      	mvns	r3, r3
 8001524:	4013      	ands	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	6811      	ldr	r1, [r2, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001542:	4923      	ldr	r1, [pc, #140]	; (80015d0 <EXTI_Init+0xe0>)
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <EXTI_Init+0xe0>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	43db      	mvns	r3, r3
 800154e:	4013      	ands	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001552:	491f      	ldr	r1, [pc, #124]	; (80015d0 <EXTI_Init+0xe0>)
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <EXTI_Init+0xe0>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	43db      	mvns	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	795b      	ldrb	r3, [r3, #5]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d10e      	bne.n	8001588 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800156a:	4919      	ldr	r1, [pc, #100]	; (80015d0 <EXTI_Init+0xe0>)
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <EXTI_Init+0xe0>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001578:	4915      	ldr	r1, [pc, #84]	; (80015d0 <EXTI_Init+0xe0>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <EXTI_Init+0xe0>)
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001586:	e01d      	b.n	80015c4 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <EXTI_Init+0xe0>)
 800158a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	795b      	ldrb	r3, [r3, #5]
 8001590:	461a      	mov	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015a6:	e00d      	b.n	80015c4 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	43d2      	mvns	r2, r2
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
  }
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <EXTI_ClearITPendingBit+0x1c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6153      	str	r3, [r2, #20]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e076      	b.n	80016fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001610:	2201      	movs	r2, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d165      	bne.n	80016f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2103      	movs	r1, #3
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	4619      	mov	r1, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d003      	beq.n	800166a <GPIO_Init+0x76>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d12e      	bne.n	80016c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2103      	movs	r1, #3
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	795b      	ldrb	r3, [r3, #5]
 8001688:	4619      	mov	r1, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	799b      	ldrb	r3, [r3, #6]
 80016b6:	4619      	mov	r1, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2103      	movs	r1, #3
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	79db      	ldrb	r3, [r3, #7]
 80016e8:	4619      	mov	r1, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d985      	bls.n	8001610 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	71da      	strb	r2, [r3, #7]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001794:	e002      	b.n	800179c <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	835a      	strh	r2, [r3, #26]
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017c0:	787a      	ldrb	r2, [r7, #1]
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	210f      	movs	r1, #15
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	ea02 0103 	and.w	r1, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f100 0208 	add.w	r2, r0, #8
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <I2C_DeInit+0x68>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d10a      	bne.n	8001862 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800184c:	2101      	movs	r1, #1
 800184e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001852:	f000 fb31 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001856:	2100      	movs	r1, #0
 8001858:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800185c:	f000 fb2c 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001860:	e01c      	b.n	800189c <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <I2C_DeInit+0x6c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10a      	bne.n	8001880 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800186a:	2101      	movs	r1, #1
 800186c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001870:	f000 fb22 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001874:	2100      	movs	r1, #0
 8001876:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800187a:	f000 fb1d 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800187e:	e00d      	b.n	800189c <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <I2C_DeInit+0x70>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d109      	bne.n	800189c <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001888:	2101      	movs	r1, #1
 800188a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800188e:	f000 fb13 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001892:	2100      	movs	r1, #0
 8001894:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001898:	f000 fb0e 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40005400 	.word	0x40005400
 80018a8:	40005800 	.word	0x40005800
 80018ac:	40005c00 	.word	0x40005c00

080018b0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018be:	2300      	movs	r3, #0
 80018c0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80018c2:	2304      	movs	r3, #4
 80018c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <I2C_Init+0x174>)
 80018c8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80018d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f9e1 	bl	8001ca4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <I2C_Init+0x178>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80018f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018f6:	4313      	orrs	r3, r2
 80018f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018fe:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <I2C_Init+0x17c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d815      	bhi.n	800194a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800192c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800192e:	2b03      	cmp	r3, #3
 8001930:	d801      	bhi.n	8001936 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001932:	2304      	movs	r3, #4
 8001934:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800193a:	4313      	orrs	r3, r2
 800193c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800193e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001940:	3301      	adds	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	841a      	strh	r2, [r3, #32]
 8001948:	e040      	b.n	80019cc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	88db      	ldrh	r3, [r3, #6]
 800194e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001952:	4293      	cmp	r3, r2
 8001954:	d109      	bne.n	800196a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001968:	e00e      	b.n	8001988 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	009a      	lsls	r2, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800199a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800199c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800199e:	4313      	orrs	r3, r2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80019ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <I2C_Init+0x180>)
 80019b8:	fb82 1203 	smull	r1, r2, r2, r3
 80019bc:	1192      	asrs	r2, r2, #6
 80019be:	17db      	asrs	r3, r3, #31
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019d0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80019e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ea:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80019ee:	f023 0302 	bic.w	r3, r3, #2
 80019f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	889a      	ldrh	r2, [r3, #4]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	895b      	ldrh	r3, [r3, #10]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a02:	4313      	orrs	r3, r2
 8001a04:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a0a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	899a      	ldrh	r2, [r3, #12]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	891b      	ldrh	r3, [r3, #8]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	811a      	strh	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	000186a0 	.word	0x000186a0
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001a56:	e007      	b.n	8001a68 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	801a      	strh	r2, [r3, #0]
  }
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001a96:	e007      	b.n	8001aa8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	801a      	strh	r2, [r3, #0]
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001ad6:	e007      	b.n	8001ae8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	801a      	strh	r2, [r3, #0]
  }
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
 8001b00:	4613      	mov	r3, r2
 8001b02:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	70fb      	strb	r3, [r7, #3]
 8001b12:	e003      	b.n	8001b1c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	821a      	strh	r2, [r3, #16]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001b52:	e007      	b.n	8001b64 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	801a      	strh	r2, [r3, #0]
  }
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	821a      	strh	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8a1b      	ldrh	r3, [r3, #16]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	8a9b      	ldrh	r3, [r3, #20]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8b1b      	ldrh	r3, [r3, #24]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001be6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	401a      	ands	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d102      	bne.n	8001bfa <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]
 8001bf8:	e001      	b.n	8001bfe <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	0f1b      	lsrs	r3, r3, #28
 8001c2a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c32:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3314      	adds	r3, #20
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e005      	b.n	8001c4e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	e001      	b.n	8001c64 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c88:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	829a      	strh	r2, [r3, #20]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cc4:	4b48      	ldr	r3, [pc, #288]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d007      	beq.n	8001ce4 <RCC_GetClocksFreq+0x40>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d009      	beq.n	8001cec <RCC_GetClocksFreq+0x48>
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d13f      	bne.n	8001d5c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a43      	ldr	r2, [pc, #268]	; (8001dec <RCC_GetClocksFreq+0x148>)
 8001ce0:	601a      	str	r2, [r3, #0]
      break;
 8001ce2:	e03f      	b.n	8001d64 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <RCC_GetClocksFreq+0x14c>)
 8001ce8:	601a      	str	r2, [r3, #0]
      break;
 8001cea:	e03b      	b.n	8001d64 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf4:	0d9b      	lsrs	r3, r3, #22
 8001cf6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d00:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d08:	4a39      	ldr	r2, [pc, #228]	; (8001df0 <RCC_GetClocksFreq+0x14c>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d18:	400b      	ands	r3, r1
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	fb03 f302 	mul.w	r3, r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e00c      	b.n	8001d3e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d24:	4a31      	ldr	r2, [pc, #196]	; (8001dec <RCC_GetClocksFreq+0x148>)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	400b      	ands	r3, r1
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	fb03 f302 	mul.w	r3, r3, r2
 8001d3c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
      break;
 8001d5a:	e003      	b.n	8001d64 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a23      	ldr	r2, [pc, #140]	; (8001dec <RCC_GetClocksFreq+0x148>)
 8001d60:	601a      	str	r2, [r3, #0]
      break;
 8001d62:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d74:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <RCC_GetClocksFreq+0x150>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	40da      	lsrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d94:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	0a9b      	lsrs	r3, r3, #10
 8001d9a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <RCC_GetClocksFreq+0x150>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	40da      	lsrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <RCC_GetClocksFreq+0x144>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001dbc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	0b5b      	lsrs	r3, r3, #13
 8001dc2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <RCC_GetClocksFreq+0x150>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200
 8001df4:	20000000 	.word	0x20000000

08001df8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e16:	e006      	b.n	8001e26 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e18:	4906      	ldr	r1, [pc, #24]	; (8001e34 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4013      	ands	r3, r2
 8001e24:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e56:	e006      	b.n	8001e66 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e58:	4906      	ldr	r1, [pc, #24]	; (8001e74 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4013      	ands	r3, r2
 8001e64:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001e8a:	490a      	ldr	r1, [pc, #40]	; (8001eb4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001e96:	e006      	b.n	8001ea6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001eca:	490a      	ldr	r1, [pc, #40]	; (8001ef4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001ed6:	e006      	b.n	8001ee6 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	620b      	str	r3, [r1, #32]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f0a:	490a      	ldr	r1, [pc, #40]	; (8001f34 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f16:	e006      	b.n	8001f26 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4013      	ands	r3, r2
 8001f24:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <SPI_I2S_DeInit+0xc4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10a      	bne.n	8001f5e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f48:	2101      	movs	r1, #1
 8001f4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f4e:	f7ff ffd3 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001f52:	2100      	movs	r1, #0
 8001f54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f58:	f7ff ffce 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f5c:	e049      	b.n	8001ff2 <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <SPI_I2S_DeInit+0xc8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10a      	bne.n	8001f7c <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001f66:	2101      	movs	r1, #1
 8001f68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f6c:	f7ff ffa4 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001f70:	2100      	movs	r1, #0
 8001f72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f76:	f7ff ff9f 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f7a:	e03a      	b.n	8001ff2 <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <SPI_I2S_DeInit+0xcc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10a      	bne.n	8001f9a <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001f84:	2101      	movs	r1, #1
 8001f86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f8a:	f7ff ff95 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f94:	f7ff ff90 	bl	8001eb8 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f98:	e02b      	b.n	8001ff2 <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <SPI_I2S_DeInit+0xd0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fa8:	f7ff ffa6 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001fac:	2100      	movs	r1, #0
 8001fae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fb2:	f7ff ffa1 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fb6:	e01c      	b.n	8001ff2 <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <SPI_I2S_DeInit+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10a      	bne.n	8001fd6 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fc6:	f7ff ff97 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fd0:	f7ff ff92 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fd4:	e00d      	b.n	8001ff2 <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <SPI_I2S_DeInit+0xd8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d109      	bne.n	8001ff2 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fe4:	f7ff ff88 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fee:	f7ff ff83 	bl	8001ef8 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40013000 	.word	0x40013000
 8002000:	40003800 	.word	0x40003800
 8002004:	40003c00 	.word	0x40003c00
 8002008:	40013400 	.word	0x40013400
 800200c:	40015000 	.word	0x40015000
 8002010:	40015400 	.word	0x40015400

08002014 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002014:	b480      	push	{r7}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800201e:	2300      	movs	r3, #0
 8002020:	837b      	strh	r3, [r7, #26]
 8002022:	2302      	movs	r3, #2
 8002024:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002026:	2300      	movs	r3, #0
 8002028:	84bb      	strh	r3, [r7, #36]	; 0x24
 800202a:	2301      	movs	r3, #1
 800202c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8b9b      	ldrh	r3, [r3, #28]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800204c:	f023 030f 	bic.w	r3, r3, #15
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8b9b      	ldrh	r3, [r3, #28]
 8002060:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d104      	bne.n	8002074 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 800206a:	2300      	movs	r3, #0
 800206c:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800206e:	2302      	movs	r3, #2
 8002070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002072:	e072      	b.n	800215a <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002080:	e001      	b.n	8002086 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002082:	2302      	movs	r3, #2
 8002084:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <I2S_Init+0x1a8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8002092:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <I2S_Init+0x1a8>)
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <I2S_Init+0x1a8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800209c:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <I2S_Init+0x1a8>)
 80020a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a8:	4013      	ands	r3, r2
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b0:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <I2S_Init+0x1a8>)
 80020b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80020bc:	0f1b      	lsrs	r3, r3, #28
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <I2S_Init+0x1a8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020cc:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <I2S_Init+0x1ac>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	fb02 f203 	mul.w	r2, r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	88db      	ldrh	r3, [r3, #6]
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ec:	d10f      	bne.n	800210e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	0a1a      	lsrs	r2, r3, #8
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	461a      	mov	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	b29b      	uxth	r3, r3
 8002106:	3305      	adds	r3, #5
 8002108:	b29b      	uxth	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	e012      	b.n	8002134 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800210e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	461a      	mov	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fbb3 f2f2 	udiv	r2, r3, r2
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	461a      	mov	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	3305      	adds	r3, #5
 8002130:	b29b      	uxth	r3, r3
 8002132:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <I2S_Init+0x1b0>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800214a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800215a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800215c:	2b01      	cmp	r3, #1
 800215e:	d902      	bls.n	8002166 <I2S_Init+0x152>
 8002160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d903      	bls.n	800216e <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002166:	2302      	movs	r3, #2
 8002168:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	88da      	ldrh	r2, [r3, #6]
 8002172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002174:	4313      	orrs	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800217a:	4313      	orrs	r3, r2
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	8859      	ldrh	r1, [r3, #2]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002192:	4303      	orrs	r3, r0
 8002194:	b29b      	uxth	r3, r3
 8002196:	430b      	orrs	r3, r1
 8002198:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800219a:	4313      	orrs	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	8b7b      	ldrh	r3, [r7, #26]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a8:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8b7a      	ldrh	r2, [r7, #26]
 80021ae:	839a      	strh	r2, [r3, #28]
}
 80021b0:	bf00      	nop
 80021b2:	372c      	adds	r7, #44	; 0x2c
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40023800 	.word	0x40023800
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	cccccccd 	.word	0xcccccccd

080021c8 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8b9b      	ldrh	r3, [r3, #28]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 80021ea:	e007      	b.n	80021fc <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8b9b      	ldrh	r3, [r3, #28]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	839a      	strh	r2, [r3, #28]
  }
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	819a      	strh	r2, [r3, #12]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	b29a      	uxth	r2, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4313      	orrs	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800224e:	e009      	b.n	8002264 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	889b      	ldrh	r3, [r3, #4]
 8002254:	b29a      	uxth	r2, r3
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	43db      	mvns	r3, r3
 800225a:	b29b      	uxth	r3, r3
 800225c:	4013      	ands	r3, r2
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	809a      	strh	r2, [r3, #4]
  }
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8002280:	2300      	movs	r3, #0
 8002282:	81fb      	strh	r3, [r7, #14]
 8002284:	2300      	movs	r3, #0
 8002286:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	b2db      	uxtb	r3, r3
 800228e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	2201      	movs	r2, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	889b      	ldrh	r3, [r3, #4]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	89bb      	ldrh	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80022b0:	e009      	b.n	80022c6 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	89bb      	ldrh	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4013      	ands	r3, r2
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	809a      	strh	r2, [r3, #4]
  }
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	891b      	ldrh	r3, [r3, #8]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800230c:	b490      	push	{r4, r7}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <SYSCFG_EXTILineConfig+0x80>)
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	4a14      	ldr	r2, [pc, #80]	; (800238c <SYSCFG_EXTILineConfig+0x80>)
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3302      	adds	r3, #2
 8002344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	1c83      	adds	r3, r0, #2
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <SYSCFG_EXTILineConfig+0x80>)
 8002356:	79bb      	ldrb	r3, [r7, #6]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461c      	mov	r4, r3
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <SYSCFG_EXTILineConfig+0x80>)
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3302      	adds	r3, #2
 8002368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800236c:	79f9      	ldrb	r1, [r7, #7]
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	431a      	orrs	r2, r3
 800237c:	1ca3      	adds	r3, r4, #2
 800237e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bc90      	pop	{r4, r7}
 800238a:	4770      	bx	lr
 800238c:	40013800 	.word	0x40013800

08002390 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <TIM_TimeBaseInit+0xbc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <TIM_TimeBaseInit+0x44>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a28      	ldr	r2, [pc, #160]	; (8002450 <TIM_TimeBaseInit+0xc0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00f      	beq.n	80023d4 <TIM_TimeBaseInit+0x44>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ba:	d00b      	beq.n	80023d4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <TIM_TimeBaseInit+0xc4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <TIM_TimeBaseInit+0x44>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <TIM_TimeBaseInit+0xc8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d003      	beq.n	80023d4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a23      	ldr	r2, [pc, #140]	; (800245c <TIM_TimeBaseInit+0xcc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d108      	bne.n	80023e6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023d4:	89fb      	ldrh	r3, [r7, #14]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	885a      	ldrh	r2, [r3, #2]
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <TIM_TimeBaseInit+0xd0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00c      	beq.n	8002408 <TIM_TimeBaseInit+0x78>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <TIM_TimeBaseInit+0xd4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	891a      	ldrh	r2, [r3, #8]
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	4313      	orrs	r3, r2
 8002406:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	89fa      	ldrh	r2, [r7, #14]
 800240c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	881a      	ldrh	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <TIM_TimeBaseInit+0xbc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_TimeBaseInit+0x9e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a09      	ldr	r2, [pc, #36]	; (8002450 <TIM_TimeBaseInit+0xc0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d104      	bne.n	8002438 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7a9b      	ldrb	r3, [r3, #10]
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	829a      	strh	r2, [r3, #20]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	40010400 	.word	0x40010400
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40001000 	.word	0x40001000
 8002464:	40001400 	.word	0x40001400

08002468 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f04f 32ff 	mov.w	r2, #4294967295
 8002476:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	729a      	strb	r2, [r3, #10]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80024be:	e007      	b.n	80024d0 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	801a      	strh	r2, [r3, #0]
  }
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	899b      	ldrh	r3, [r3, #12]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8002502:	e009      	b.n	8002518 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	899b      	ldrh	r3, [r3, #12]
 8002508:	b29a      	uxth	r2, r3
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	43db      	mvns	r3, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	4013      	ands	r3, r2
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	819a      	strh	r2, [r3, #12]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	43db      	mvns	r3, r3
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	821a      	strh	r2, [r3, #16]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	889b      	ldrh	r3, [r3, #4]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	b29a      	uxth	r2, r3
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	4313      	orrs	r3, r2
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	809a      	strh	r2, [r3, #4]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <STM_EVAL_LEDOn+0x28>)
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	79fa      	ldrb	r2, [r7, #7]
 8002594:	4905      	ldr	r1, [pc, #20]	; (80025ac <STM_EVAL_LEDOn+0x2c>)
 8002596:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800259a:	831a      	strh	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	20000010 	.word	0x20000010
 80025ac:	080046f4 	.word	0x080046f4

080025b0 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	603a      	str	r2, [r7, #0]
 80025ba:	80fb      	strh	r3, [r7, #6]
 80025bc:	460b      	mov	r3, r1
 80025be:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 80025c0:	797b      	ldrb	r3, [r7, #5]
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d80b      	bhi.n	80025de <EVAL_AUDIO_Init+0x2e>
 80025c6:	797a      	ldrb	r2, [r7, #5]
 80025c8:	4613      	mov	r3, r2
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <EVAL_AUDIO_Init+0x54>)
 80025d0:	fb82 1203 	smull	r1, r2, r2, r3
 80025d4:	1152      	asrs	r2, r2, #5
 80025d6:	17db      	asrs	r3, r3, #31
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e000      	b.n	80025e0 <EVAL_AUDIO_Init+0x30>
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	88f8      	ldrh	r0, [r7, #6]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f000 f8f3 	bl	80027d0 <Codec_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 80025f0:	2301      	movs	r3, #1
 80025f2:	e002      	b.n	80025fa <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 80025f4:	f000 fcb4 	bl	8002f60 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 80025f8:	2300      	movs	r3, #0
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	51eb851f 	.word	0x51eb851f

08002608 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <EVAL_AUDIO_Play+0x60>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8002618:	f000 f986 	bl	8002928 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002624:	4293      	cmp	r3, r2
 8002626:	bf28      	it	cs
 8002628:	4613      	movcs	r3, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f000 fd40 	bl	80030b0 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <EVAL_AUDIO_Play+0x60>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002638:	4293      	cmp	r3, r2
 800263a:	bf28      	it	cs
 800263c:	4613      	movcs	r3, r2
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <EVAL_AUDIO_Play+0x64>)
 8002644:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <EVAL_AUDIO_Play+0x60>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	4293      	cmp	r3, r2
 8002650:	bf28      	it	cs
 8002652:	4613      	movcs	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <EVAL_AUDIO_Play+0x68>)
 800265c:	6013      	str	r3, [r2, #0]
  
  return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000020 	.word	0x20000020
 800266c:	20000024 	.word	0x20000024
 8002670:	20000488 	.word	0x20000488

08002674 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <Audio_MAL_IRQHandler+0xe0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <Audio_MAL_IRQHandler+0xe4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <Audio_MAL_IRQHandler+0xec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f7fe fe89 	bl	80013a8 <DMA_GetFlagStatus>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00c      	beq.n	80026b6 <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 ffbb 	bl	800361c <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <Audio_MAL_IRQHandler+0xec>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f7fe feb5 	bl	8001420 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <Audio_MAL_IRQHandler+0xf0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fe fe71 	bl	80013a8 <DMA_GetFlagStatus>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 ff95 	bl	8003600 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <Audio_MAL_IRQHandler+0xf0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f7fe fe9d 	bl	8001420 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <Audio_MAL_IRQHandler+0xf4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7fe fe59 	bl	80013a8 <DMA_GetFlagStatus>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d115      	bne.n	8002728 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <Audio_MAL_IRQHandler+0xf8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7fe fe4e 	bl	80013a8 <DMA_GetFlagStatus>
 800270c:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <Audio_MAL_IRQHandler+0xfc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7fe fe43 	bl	80013a8 <DMA_GetFlagStatus>
 8002722:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8002728:	463b      	mov	r3, r7
 800272a:	4618      	mov	r0, r3
 800272c:	f000 ff8c 	bl	8003648 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <Audio_MAL_IRQHandler+0xe8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <Audio_MAL_IRQHandler+0xf4>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <Audio_MAL_IRQHandler+0xf8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	431a      	orrs	r2, r3
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <Audio_MAL_IRQHandler+0xfc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fe6b 	bl	8001420 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000488 	.word	0x20000488
 8002758:	20000024 	.word	0x20000024
 800275c:	20000034 	.word	0x20000034
 8002760:	20000040 	.word	0x20000040
 8002764:	20000044 	.word	0x20000044
 8002768:	2000004c 	.word	0x2000004c
 800276c:	20000048 	.word	0x20000048
 8002770:	20000050 	.word	0x20000050

08002774 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002778:	f7ff ff7c 	bl	8002674 <Audio_MAL_IRQHandler>
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002784:	f7ff ff76 	bl	8002674 <Audio_MAL_IRQHandler>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002790:	2102      	movs	r1, #2
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <SPI3_IRQHandler+0x3c>)
 8002794:	f7ff fd9e 	bl	80022d4 <SPI_I2S_GetFlagStatus>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d011      	beq.n	80027c2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <SPI3_IRQHandler+0x40>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d106      	bne.n	80027b4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80027a6:	f000 ff47 	bl	8003638 <EVAL_AUDIO_GetSampleCallBack>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4619      	mov	r1, r3
 80027ae:	2004      	movs	r0, #4
 80027b0:	f7fe fc5e 	bl	8001070 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80027b4:	f000 ff40 	bl	8003638 <EVAL_AUDIO_GetSampleCallBack>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <SPI3_IRQHandler+0x3c>)
 80027be:	f7ff fd23 	bl	8002208 <SPI_I2S_SendData>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40003c00 	.word	0x40003c00
 80027cc:	2000002c 	.word	0x2000002c

080027d0 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	603a      	str	r2, [r7, #0]
 80027da:	80fb      	strh	r3, [r7, #6]
 80027dc:	460b      	mov	r3, r1
 80027de:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 80027e4:	f000 fb1a 	bl	8002e1c <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 80027e8:	f000 f8e2 	bl	80029b0 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 80027ec:	f000 faa8 	bl	8002d40 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 80027f0:	2101      	movs	r1, #1
 80027f2:	2002      	movs	r0, #2
 80027f4:	f000 f8f0 	bl	80029d8 <Codec_WriteRegister>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8002800:	21af      	movs	r1, #175	; 0xaf
 8002802:	2004      	movs	r0, #4
 8002804:	f000 f8e8 	bl	80029d8 <Codec_WriteRegister>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <Codec_Init+0x150>)
 8002812:	22af      	movs	r2, #175	; 0xaf
 8002814:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 8002816:	2181      	movs	r1, #129	; 0x81
 8002818:	2005      	movs	r0, #5
 800281a:	f000 f8dd 	bl	80029d8 <Codec_WriteRegister>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 8002826:	2104      	movs	r1, #4
 8002828:	2006      	movs	r0, #6
 800282a:	f000 f8d5 	bl	80029d8 <Codec_WriteRegister>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 8002836:	797b      	ldrb	r3, [r7, #5]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 f87d 	bl	8002938 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <Codec_Init+0x154>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d127      	bne.n	8002896 <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8002846:	2101      	movs	r1, #1
 8002848:	2008      	movs	r0, #8
 800284a:	f000 f8c5 	bl	80029d8 <Codec_WriteRegister>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8002856:	2101      	movs	r1, #1
 8002858:	2009      	movs	r0, #9
 800285a:	f000 f8bd 	bl	80029d8 <Codec_WriteRegister>
 800285e:	4602      	mov	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 8002866:	21c0      	movs	r1, #192	; 0xc0
 8002868:	200e      	movs	r0, #14
 800286a:	f000 f8b5 	bl	80029d8 <Codec_WriteRegister>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 8002876:	2100      	movs	r1, #0
 8002878:	2014      	movs	r0, #20
 800287a:	f000 f8ad 	bl	80029d8 <Codec_WriteRegister>
 800287e:	4602      	mov	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 8002886:	2100      	movs	r1, #0
 8002888:	2015      	movs	r0, #21
 800288a:	f000 f8a5 	bl	80029d8 <Codec_WriteRegister>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 8002896:	219e      	movs	r1, #158	; 0x9e
 8002898:	2002      	movs	r0, #2
 800289a:	f000 f89d 	bl	80029d8 <Codec_WriteRegister>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 80028a6:	2100      	movs	r1, #0
 80028a8:	200a      	movs	r0, #10
 80028aa:	f000 f895 	bl	80029d8 <Codec_WriteRegister>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <Codec_Init+0x154>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d007      	beq.n	80028ce <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 80028be:	2104      	movs	r1, #4
 80028c0:	200e      	movs	r0, #14
 80028c2:	f000 f889 	bl	80029d8 <Codec_WriteRegister>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 80028ce:	2100      	movs	r1, #0
 80028d0:	2027      	movs	r0, #39	; 0x27
 80028d2:	f000 f881 	bl	80029d8 <Codec_WriteRegister>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 80028de:	210f      	movs	r1, #15
 80028e0:	201f      	movs	r0, #31
 80028e2:	f000 f879 	bl	80029d8 <Codec_WriteRegister>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 80028ee:	210a      	movs	r1, #10
 80028f0:	201a      	movs	r0, #26
 80028f2:	f000 f871 	bl	80029d8 <Codec_WriteRegister>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 80028fe:	210a      	movs	r1, #10
 8002900:	201b      	movs	r0, #27
 8002902:	f000 f869 	bl	80029d8 <Codec_WriteRegister>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	f000 fa42 	bl	8002d98 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 8002914:	68fb      	ldr	r3, [r7, #12]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200000dc 	.word	0x200000dc
 8002924:	2000002c 	.word	0x2000002c

08002928 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2be6      	cmp	r3, #230	; 0xe6
 800294a:	d916      	bls.n	800297a <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	3319      	adds	r3, #25
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	2020      	movs	r0, #32
 8002956:	f000 f83f 	bl	80029d8 <Codec_WriteRegister>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	3319      	adds	r3, #25
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	2021      	movs	r0, #33	; 0x21
 800296c:	f000 f834 	bl	80029d8 <Codec_WriteRegister>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e015      	b.n	80029a6 <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	3319      	adds	r3, #25
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4619      	mov	r1, r3
 8002982:	2020      	movs	r0, #32
 8002984:	f000 f828 	bl	80029d8 <Codec_WriteRegister>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	3319      	adds	r3, #25
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	2021      	movs	r0, #33	; 0x21
 800299a:	f000 f81d 	bl	80029d8 <Codec_WriteRegister>
 800299e:	4602      	mov	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2110      	movs	r1, #16
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <Codec_Reset+0x24>)
 80029ba:	f7fe fedd 	bl	8001778 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 80029be:	f644 70ff 	movw	r0, #20479	; 0x4fff
 80029c2:	f000 fabb 	bl	8002f3c <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 80029c6:	2201      	movs	r2, #1
 80029c8:	2110      	movs	r1, #16
 80029ca:	4802      	ldr	r0, [pc, #8]	; (80029d4 <Codec_Reset+0x24>)
 80029cc:	f7fe fed4 	bl	8001778 <GPIO_WriteBit>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40020c00 	.word	0x40020c00

080029d8 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	460a      	mov	r2, r1
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80029ec:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <Codec_WriteRegister+0x148>)
 80029ee:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80029f2:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80029f4:	e00a      	b.n	8002a0c <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <Codec_WriteRegister+0x148>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1e5a      	subs	r2, r3, #1
 80029fc:	4948      	ldr	r1, [pc, #288]	; (8002b20 <Codec_WriteRegister+0x148>)
 80029fe:	600a      	str	r2, [r1, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <Codec_WriteRegister+0x34>
 8002a04:	f000 fdf4 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	e085      	b.n	8002b18 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a0c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a10:	4844      	ldr	r0, [pc, #272]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a12:	f7ff f8fb 	bl	8001c0c <I2C_GetFlagStatus>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ec      	bne.n	80029f6 <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4841      	ldr	r0, [pc, #260]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a20:	f7ff f828 	bl	8001a74 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a2a:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a2c:	e00a      	b.n	8002a44 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	493a      	ldr	r1, [pc, #232]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a36:	600a      	str	r2, [r1, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <Codec_WriteRegister+0x6c>
 8002a3c:	f000 fdd8 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002a40:	4603      	mov	r3, r0
 8002a42:	e069      	b.n	8002b18 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a44:	4938      	ldr	r1, [pc, #224]	; (8002b28 <Codec_WriteRegister+0x150>)
 8002a46:	4837      	ldr	r0, [pc, #220]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a48:	f7ff f8b0 	bl	8001bac <I2C_CheckEvent>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0ed      	beq.n	8002a2e <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2194      	movs	r1, #148	; 0x94
 8002a56:	4833      	ldr	r0, [pc, #204]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a58:	f7ff f84c 	bl	8001af4 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a5c:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a62:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a64:	e00a      	b.n	8002a7c <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	492c      	ldr	r1, [pc, #176]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a6e:	600a      	str	r2, [r1, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <Codec_WriteRegister+0xa4>
 8002a74:	f000 fdbc 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	e04d      	b.n	8002b18 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a7c:	492b      	ldr	r1, [pc, #172]	; (8002b2c <Codec_WriteRegister+0x154>)
 8002a7e:	4829      	ldr	r0, [pc, #164]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a80:	f7ff f894 	bl	8001bac <I2C_CheckEvent>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ed      	beq.n	8002a66 <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4825      	ldr	r0, [pc, #148]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002a90:	f7ff f86e 	bl	8001b70 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a9a:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002a9c:	e00a      	b.n	8002ab4 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	491e      	ldr	r1, [pc, #120]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002aa6:	600a      	str	r2, [r1, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <Codec_WriteRegister+0xdc>
 8002aac:	f000 fda0 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	e031      	b.n	8002b18 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002ab4:	491e      	ldr	r1, [pc, #120]	; (8002b30 <Codec_WriteRegister+0x158>)
 8002ab6:	481b      	ldr	r0, [pc, #108]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002ab8:	f7ff f878 	bl	8001bac <I2C_CheckEvent>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ed      	beq.n	8002a9e <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4817      	ldr	r0, [pc, #92]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002ac8:	f7ff f852 	bl	8001b70 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002ace:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002ad2:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002ad4:	e008      	b.n	8002ae8 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	4910      	ldr	r1, [pc, #64]	; (8002b20 <Codec_WriteRegister+0x148>)
 8002ade:	600a      	str	r2, [r1, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <Codec_WriteRegister+0x110>
 8002ae4:	f000 fd84 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002ae8:	4912      	ldr	r1, [pc, #72]	; (8002b34 <Codec_WriteRegister+0x15c>)
 8002aea:	480e      	ldr	r0, [pc, #56]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002aec:	f7ff f88e 	bl	8001c0c <I2C_GetFlagStatus>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ef      	beq.n	8002ad6 <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002af6:	2101      	movs	r1, #1
 8002af8:	480a      	ldr	r0, [pc, #40]	; (8002b24 <Codec_WriteRegister+0x14c>)
 8002afa:	f7fe ffdb 	bl	8001ab4 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f819 	bl	8002b38 <Codec_ReadRegister>
 8002b06:	4602      	mov	r2, r0
 8002b08:	79bb      	ldrb	r3, [r7, #6]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000028 	.word	0x20000028
 8002b24:	40005400 	.word	0x40005400
 8002b28:	00030001 	.word	0x00030001
 8002b2c:	00070082 	.word	0x00070082
 8002b30:	00070080 	.word	0x00070080
 8002b34:	10000004 	.word	0x10000004

08002b38 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b48:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b4c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b4e:	e00a      	b.n	8002b66 <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b50:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	4972      	ldr	r1, [pc, #456]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b58:	600a      	str	r2, [r1, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <Codec_ReadRegister+0x2e>
 8002b5e:	f000 fd47 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002b62:	4603      	mov	r3, r0
 8002b64:	e0d7      	b.n	8002d16 <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b66:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b6a:	486e      	ldr	r0, [pc, #440]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002b6c:	f7ff f84e 	bl	8001c0c <I2C_GetFlagStatus>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ec      	bne.n	8002b50 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002b76:	2101      	movs	r1, #1
 8002b78:	486a      	ldr	r0, [pc, #424]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002b7a:	f7fe ff7b 	bl	8001a74 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b84:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b86:	e00a      	b.n	8002b9e <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	4964      	ldr	r1, [pc, #400]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002b90:	600a      	str	r2, [r1, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <Codec_ReadRegister+0x66>
 8002b96:	f000 fd2b 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	e0bb      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b9e:	4962      	ldr	r1, [pc, #392]	; (8002d28 <Codec_ReadRegister+0x1f0>)
 8002ba0:	4860      	ldr	r0, [pc, #384]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002ba2:	f7ff f803 	bl	8001bac <I2C_CheckEvent>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ed      	beq.n	8002b88 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2194      	movs	r1, #148	; 0x94
 8002bb0:	485c      	ldr	r0, [pc, #368]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002bb2:	f7fe ff9f 	bl	8001af4 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bb6:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bbc:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002bbe:	e00a      	b.n	8002bd6 <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bc0:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	4956      	ldr	r1, [pc, #344]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002bc8:	600a      	str	r2, [r1, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <Codec_ReadRegister+0x9e>
 8002bce:	f000 fd0f 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	e09f      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002bd6:	4955      	ldr	r1, [pc, #340]	; (8002d2c <Codec_ReadRegister+0x1f4>)
 8002bd8:	4852      	ldr	r0, [pc, #328]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002bda:	f7fe ffe7 	bl	8001bac <I2C_CheckEvent>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ed      	beq.n	8002bc0 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	4619      	mov	r1, r3
 8002be8:	484e      	ldr	r0, [pc, #312]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002bea:	f7fe ffc1 	bl	8001b70 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bee:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf4:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	4948      	ldr	r1, [pc, #288]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c00:	600a      	str	r2, [r1, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <Codec_ReadRegister+0xd6>
 8002c06:	f000 fcf3 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	e083      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c0e:	4948      	ldr	r1, [pc, #288]	; (8002d30 <Codec_ReadRegister+0x1f8>)
 8002c10:	4844      	ldr	r0, [pc, #272]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c12:	f7fe fffb 	bl	8001c0c <I2C_GetFlagStatus>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ed      	beq.n	8002bf8 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4841      	ldr	r0, [pc, #260]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c20:	f7fe ff28 	bl	8001a74 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2a:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c2c:	e00a      	b.n	8002c44 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	493a      	ldr	r1, [pc, #232]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c36:	600a      	str	r2, [r1, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <Codec_ReadRegister+0x10c>
 8002c3c:	f000 fcd8 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002c40:	4603      	mov	r3, r0
 8002c42:	e068      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c44:	4938      	ldr	r1, [pc, #224]	; (8002d28 <Codec_ReadRegister+0x1f0>)
 8002c46:	4837      	ldr	r0, [pc, #220]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c48:	f7fe ffb0 	bl	8001bac <I2C_CheckEvent>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ed      	beq.n	8002c2e <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002c52:	2201      	movs	r2, #1
 8002c54:	2194      	movs	r1, #148	; 0x94
 8002c56:	4833      	ldr	r0, [pc, #204]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c58:	f7fe ff4c 	bl	8001af4 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c62:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c64:	e00a      	b.n	8002c7c <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	492c      	ldr	r1, [pc, #176]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002c6e:	600a      	str	r2, [r1, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <Codec_ReadRegister+0x144>
 8002c74:	f000 fcbc 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	e04c      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c7c:	492d      	ldr	r1, [pc, #180]	; (8002d34 <Codec_ReadRegister+0x1fc>)
 8002c7e:	4829      	ldr	r0, [pc, #164]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c80:	f7fe ffc4 	bl	8001c0c <I2C_GetFlagStatus>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ed      	beq.n	8002c66 <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c8e:	f7fe ff4f 	bl	8001b30 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c94:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002c96:	2101      	movs	r1, #1
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002c9a:	f7fe ff0b 	bl	8001ab4 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	491c      	ldr	r1, [pc, #112]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002cb0:	600a      	str	r2, [r1, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <Codec_ReadRegister+0x186>
 8002cb6:	f000 fc9b 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	e02b      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002cbe:	491e      	ldr	r1, [pc, #120]	; (8002d38 <Codec_ReadRegister+0x200>)
 8002cc0:	4818      	ldr	r0, [pc, #96]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002cc2:	f7fe ffa3 	bl	8001c0c <I2C_GetFlagStatus>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ed      	beq.n	8002ca8 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002ccc:	4815      	ldr	r0, [pc, #84]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002cce:	f7fe ff5f 	bl	8001b90 <I2C_ReceiveData>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cdc:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002cde:	e00a      	b.n	8002cf6 <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	490e      	ldr	r1, [pc, #56]	; (8002d20 <Codec_ReadRegister+0x1e8>)
 8002ce8:	600a      	str	r2, [r1, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <Codec_ReadRegister+0x1be>
 8002cee:	f000 fc7f 	bl	80035f0 <Codec_TIMEOUT_UserCallback>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	e00f      	b.n	8002d16 <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ed      	bne.n	8002ce0 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002d04:	2101      	movs	r1, #1
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002d08:	f7fe ff12 	bl	8001b30 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002d0c:	490b      	ldr	r1, [pc, #44]	; (8002d3c <Codec_ReadRegister+0x204>)
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <Codec_ReadRegister+0x1ec>)
 8002d10:	f7fe ffb0 	bl	8001c74 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000028 	.word	0x20000028
 8002d24:	40005400 	.word	0x40005400
 8002d28:	00030001 	.word	0x00030001
 8002d2c:	00070082 	.word	0x00070082
 8002d30:	10000004 	.word	0x10000004
 8002d34:	10000002 	.word	0x10000002
 8002d38:	10000040 	.word	0x10000040
 8002d3c:	10000400 	.word	0x10000400

08002d40 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002d46:	2101      	movs	r1, #1
 8002d48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d4c:	f7ff f874 	bl	8001e38 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <Codec_CtrlInterface_Init+0x50>)
 8002d52:	f7fe fd73 	bl	800183c <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002d56:	2300      	movs	r3, #0
 8002d58:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002d5a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002d5e:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002d60:	2333      	movs	r3, #51	; 0x33
 8002d62:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d68:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d6e:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <Codec_CtrlInterface_Init+0x54>)
 8002d72:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002d74:	2101      	movs	r1, #1
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <Codec_CtrlInterface_Init+0x50>)
 8002d78:	f7fe fe5c 	bl	8001a34 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <Codec_CtrlInterface_Init+0x50>)
 8002d82:	f7fe fd95 	bl	80018b0 <I2C_Init>
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40005400 	.word	0x40005400
 8002d94:	000186a0 	.word	0x000186a0

08002d98 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002da0:	2101      	movs	r1, #1
 8002da2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002da6:	f7ff f847 	bl	8001e38 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002daa:	481a      	ldr	r0, [pc, #104]	; (8002e14 <Codec_AudioInterface_Init+0x7c>)
 8002dac:	f7ff f8c4 	bl	8001f38 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002db4:	2300      	movs	r3, #0
 8002db6:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002db8:	2300      	movs	r3, #0
 8002dba:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dca:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4810      	ldr	r0, [pc, #64]	; (8002e14 <Codec_AudioInterface_Init+0x7c>)
 8002dd4:	f7ff f91e 	bl	8002014 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <Codec_AudioInterface_Init+0x80>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d114      	bne.n	8002e0a <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002de0:	2101      	movs	r1, #1
 8002de2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002de6:	f7ff f827 	bl	8001e38 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe f8dd 	bl	8000fbc <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002e02:	2101      	movs	r1, #1
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fe f90d 	bl	8001024 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40003c00 	.word	0x40003c00
 8002e18:	2000002c 	.word	0x2000002c

08002e1c <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002e22:	2101      	movs	r1, #1
 8002e24:	2008      	movs	r0, #8
 8002e26:	f7fe ffe7 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e32:	2302      	movs	r3, #2
 8002e34:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e36:	2300      	movs	r3, #0
 8002e38:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002e3e:	463b      	mov	r3, r7
 8002e40:	4619      	mov	r1, r3
 8002e42:	4839      	ldr	r0, [pc, #228]	; (8002f28 <Codec_GPIO_Init+0x10c>)
 8002e44:	f7fe fbd6 	bl	80015f4 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2007      	movs	r0, #7
 8002e4c:	f7fe ffd4 	bl	8001df8 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002e50:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e54:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e56:	2302      	movs	r3, #2
 8002e58:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002e66:	463b      	mov	r3, r7
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4830      	ldr	r0, [pc, #192]	; (8002f2c <Codec_GPIO_Init+0x110>)
 8002e6c:	f7fe fbc2 	bl	80015f4 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e70:	2204      	movs	r2, #4
 8002e72:	2106      	movs	r1, #6
 8002e74:	482d      	ldr	r0, [pc, #180]	; (8002f2c <Codec_GPIO_Init+0x110>)
 8002e76:	f7fe fc97 	bl	80017a8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	2109      	movs	r1, #9
 8002e7e:	482b      	ldr	r0, [pc, #172]	; (8002f2c <Codec_GPIO_Init+0x110>)
 8002e80:	f7fe fc92 	bl	80017a8 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002e84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e88:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e92:	2300      	movs	r3, #0
 8002e94:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4824      	ldr	r0, [pc, #144]	; (8002f30 <Codec_GPIO_Init+0x114>)
 8002ea0:	f7fe fba8 	bl	80015f4 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002ea4:	2206      	movs	r2, #6
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	4822      	ldr	r0, [pc, #136]	; (8002f34 <Codec_GPIO_Init+0x118>)
 8002eaa:	f7fe fc7d 	bl	80017a8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002eae:	2206      	movs	r2, #6
 8002eb0:	210a      	movs	r1, #10
 8002eb2:	481f      	ldr	r0, [pc, #124]	; (8002f30 <Codec_GPIO_Init+0x114>)
 8002eb4:	f7fe fc78 	bl	80017a8 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <Codec_GPIO_Init+0x11c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d00c      	beq.n	8002eda <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481a      	ldr	r0, [pc, #104]	; (8002f34 <Codec_GPIO_Init+0x118>)
 8002eca:	f7fe fb93 	bl	80015f4 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002ece:	2206      	movs	r2, #6
 8002ed0:	210c      	movs	r1, #12
 8002ed2:	4817      	ldr	r0, [pc, #92]	; (8002f30 <Codec_GPIO_Init+0x114>)
 8002ed4:	f7fe fc68 	bl	80017a8 <GPIO_PinAFConfig>
 8002ed8:	e00e      	b.n	8002ef8 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002eda:	2101      	movs	r1, #1
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7fe ff8b 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002eee:	463b      	mov	r3, r7
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4810      	ldr	r0, [pc, #64]	; (8002f34 <Codec_GPIO_Init+0x118>)
 8002ef4:	f7fe fb7e 	bl	80015f4 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002efc:	2302      	movs	r3, #2
 8002efe:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f00:	2302      	movs	r3, #2
 8002f02:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f04:	2300      	movs	r3, #0
 8002f06:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4807      	ldr	r0, [pc, #28]	; (8002f30 <Codec_GPIO_Init+0x114>)
 8002f12:	f7fe fb6f 	bl	80015f4 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002f16:	2206      	movs	r2, #6
 8002f18:	2107      	movs	r1, #7
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <Codec_GPIO_Init+0x114>)
 8002f1c:	f7fe fc44 	bl	80017a8 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	2000002c 	.word	0x2000002c

08002f3c <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002f44:	e002      	b.n	8002f4c <Delay+0x10>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f9      	bne.n	8002f46 <Delay+0xa>
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <Audio_MAL_Init+0x130>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d16e      	bne.n	800304c <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <Audio_MAL_Init+0x134>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe ff3f 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <Audio_MAL_Init+0x138>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe f9f5 	bl	8001370 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <Audio_MAL_Init+0x138>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f88c 	bl	80010a8 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <Audio_MAL_Init+0x13c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002f96:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002f98:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <Audio_MAL_Init+0x144>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002f9e:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fa8:	2240      	movs	r2, #64	; 0x40
 8002faa:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002fac:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fb2:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002fba:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc0:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002fca:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fd0:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <Audio_MAL_Init+0x140>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <Audio_MAL_Init+0x138>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4928      	ldr	r1, [pc, #160]	; (80030a0 <Audio_MAL_Init+0x140>)
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe f925 	bl	8001250 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <Audio_MAL_Init+0x138>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	2110      	movs	r1, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fa34 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <Audio_MAL_Init+0x138>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	2108      	movs	r1, #8
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fa2d 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <Audio_MAL_Init+0x138>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	2186      	movs	r1, #134	; 0x86
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fa26 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <Audio_MAL_Init+0x148>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8003038:	2300      	movs	r3, #0
 800303a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800303c:	2300      	movs	r3, #0
 800303e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003040:	2301      	movs	r3, #1
 8003042:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fd60 	bl	8000b0c <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <Audio_MAL_Init+0x130>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8003054:	2201      	movs	r2, #1
 8003056:	2102      	movs	r1, #2
 8003058:	4814      	ldr	r0, [pc, #80]	; (80030ac <Audio_MAL_Init+0x14c>)
 800305a:	f7ff f8e5 	bl	8002228 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800305e:	e012      	b.n	8003086 <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8003060:	f000 f86c 	bl	800313c <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8003064:	2201      	movs	r2, #1
 8003066:	2171      	movs	r1, #113	; 0x71
 8003068:	4810      	ldr	r0, [pc, #64]	; (80030ac <Audio_MAL_Init+0x14c>)
 800306a:	f7ff f901 	bl	8002270 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 800306e:	2333      	movs	r3, #51	; 0x33
 8003070:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8003072:	2300      	movs	r3, #0
 8003074:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003076:	2300      	movs	r3, #0
 8003078:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800307a:	2301      	movs	r3, #1
 800307c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fd43 	bl	8000b0c <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000002c 	.word	0x2000002c
 8003094:	20000030 	.word	0x20000030
 8003098:	20000034 	.word	0x20000034
 800309c:	200000e0 	.word	0x200000e0
 80030a0:	200004c8 	.word	0x200004c8
 80030a4:	20000038 	.word	0x20000038
 80030a8:	2000003c 	.word	0x2000003c
 80030ac:	40003c00 	.word	0x40003c00

080030b0 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <Audio_MAL_Play+0x7c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d112      	bne.n	80030e8 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <Audio_MAL_Play+0x80>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <Audio_MAL_Play+0x80>)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <Audio_MAL_Play+0x84>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4917      	ldr	r1, [pc, #92]	; (8003130 <Audio_MAL_Play+0x80>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe f8bb 	bl	8001250 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <Audio_MAL_Play+0x84>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe f945 	bl	8001370 <DMA_Cmd>
 80030e6:	e011      	b.n	800310c <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80030e8:	4a11      	ldr	r2, [pc, #68]	; (8003130 <Audio_MAL_Play+0x80>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <Audio_MAL_Play+0x80>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <Audio_MAL_Play+0x84>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	490d      	ldr	r1, [pc, #52]	; (8003130 <Audio_MAL_Play+0x80>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe f8a8 	bl	8001250 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <Audio_MAL_Play+0x84>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f932 	bl	8001370 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <Audio_MAL_Play+0x88>)
 800310e:	8b9b      	ldrh	r3, [r3, #28]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 800311a:	2101      	movs	r1, #1
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <Audio_MAL_Play+0x88>)
 800311e:	f7ff f853 	bl	80021c8 <I2S_Cmd>
  }
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000002c 	.word	0x2000002c
 8003130:	200004c8 	.word	0x200004c8
 8003134:	20000034 	.word	0x20000034
 8003138:	40003c00 	.word	0x40003c00

0800313c <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8003142:	2101      	movs	r1, #1
 8003144:	4813      	ldr	r0, [pc, #76]	; (8003194 <DAC_Config+0x58>)
 8003146:	f7fe fe57 	bl	8001df8 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800314a:	2101      	movs	r1, #1
 800314c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003150:	f7fe fe72 	bl	8001e38 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8003154:	2310      	movs	r3, #16
 8003156:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003158:	2303      	movs	r3, #3
 800315a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003160:	463b      	mov	r3, r7
 8003162:	4619      	mov	r1, r3
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <DAC_Config+0x5c>)
 8003166:	f7fe fa45 	bl	80015f4 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	4619      	mov	r1, r3
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd ff1d 	bl	8000fbc <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 8003182:	2101      	movs	r1, #1
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd ff4d 	bl	8001024 <DAC_Cmd>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	00200001 	.word	0x00200001
 8003198:	40020000 	.word	0x40020000

0800319c <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 800319c:	b580      	push	{r7, lr}
 800319e:	b0a0      	sub	sp, #128	; 0x80
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80031a4:	2101      	movs	r1, #1
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7fe fe46 	bl	8001e38 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f959 	bl	8002468 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80031b6:	2300      	movs	r3, #0
 80031b8:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80031ba:	2300      	movs	r3, #0
 80031bc:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80031be:	f243 1338 	movw	r3, #12600	; 0x3138
 80031c2:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 80031c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c8:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	4619      	mov	r1, r3
 80031d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031d4:	f7ff f8dc 	bl	8002390 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 80031d8:	2120      	movs	r1, #32
 80031da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031de:	f7ff f9b3 	bl	8002548 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80031e2:	2201      	movs	r2, #1
 80031e4:	2101      	movs	r1, #1
 80031e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031ea:	f7ff f977 	bl	80024dc <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80031ee:	2101      	movs	r1, #1
 80031f0:	2001      	movs	r0, #1
 80031f2:	f7fe fe01 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 80031f6:	2101      	movs	r1, #1
 80031f8:	2002      	movs	r0, #2
 80031fa:	f7fe fdfd 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80031fe:	2101      	movs	r1, #1
 8003200:	2004      	movs	r0, #4
 8003202:	f7fe fdf9 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8003206:	2101      	movs	r1, #1
 8003208:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800320c:	f7fe fdf4 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_4	VCO-Volume
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_6	ENVELOPE-decay
	//GPIO_Pin_7	ENVELOPE-Sustain
	GPIO_StructInit(&GPIO_InitStructure);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fa7b 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800321a:	23ff      	movs	r3, #255	; 0xff
 800321c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800321e:	2303      	movs	r3, #3
 8003220:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003222:	2302      	movs	r3, #2
 8003224:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	487c      	ldr	r0, [pc, #496]	; (8003424 <init_adc+0x288>)
 8003232:	f7fe f9df 	bl	80015f4 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fa68 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8003240:	2303      	movs	r3, #3
 8003242:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003244:	2303      	movs	r3, #3
 8003246:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003248:	2302      	movs	r3, #2
 800324a:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4619      	mov	r1, r3
 8003256:	4874      	ldr	r0, [pc, #464]	; (8003428 <init_adc+0x28c>)
 8003258:	f7fe f9cc 	bl	80015f4 <GPIO_Init>

	//C bank pins//GPIO_Pin_0	FILTER-FreqHigh
	//GPIO_Pin_1	FILTER-FreqResonance
	//GPIO_Pin_4	FILTER-FreqGain
	GPIO_StructInit(&GPIO_InitStructure);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fa55 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;
 8003266:	2313      	movs	r3, #19
 8003268:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800326a:	2303      	movs	r3, #3
 800326c:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800326e:	2302      	movs	r3, #2
 8003270:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	486b      	ldr	r0, [pc, #428]	; (800342c <init_adc+0x290>)
 800327e:	f7fe f9b9 	bl	80015f4 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 8003282:	f107 031c 	add.w	r3, r7, #28
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe f83a 	bl	8001300 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 8003290:	230d      	movs	r3, #13
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80032a0:	2300      	movs	r3, #0
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80032a4:	2300      	movs	r3, #0
 80032a6:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 80032a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ac:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 80032ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 80032b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80032be:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <init_adc+0x294>)
 80032c0:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80032c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80032c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80032ce:	2300      	movs	r3, #0
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 80032d2:	f107 031c 	add.w	r3, r7, #28
 80032d6:	4619      	mov	r1, r3
 80032d8:	4856      	ldr	r0, [pc, #344]	; (8003434 <init_adc+0x298>)
 80032da:	f7fd ffb9 	bl	8001250 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 80032de:	2101      	movs	r1, #1
 80032e0:	4854      	ldr	r0, [pc, #336]	; (8003434 <init_adc+0x298>)
 80032e2:	f7fe f845 	bl	8001370 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 80032e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fcd4 	bl	8000c98 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 80032f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fd17 	bl	8000d28 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 80032fa:	2100      	movs	r1, #0
 80032fc:	484e      	ldr	r0, [pc, #312]	; (8003438 <init_adc+0x29c>)
 80032fe:	f7fd fd29 	bl	8000d54 <ADC_Cmd>
	ADC_DeInit();
 8003302:	f7fd fc65 	bl	8000bd0 <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003306:	2101      	movs	r1, #1
 8003308:	f44f 7080 	mov.w	r0, #256	; 0x100
 800330c:	f7fe fdb4 	bl	8001e78 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8003310:	2300      	movs	r3, #0
 8003312:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8003314:	2300      	movs	r3, #0
 8003316:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003318:	2300      	movs	r3, #0
 800331a:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 800331c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 8003322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fcd6 	bl	8000cd8 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 800332c:	2300      	movs	r3, #0
 800332e:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 800333c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003340:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8003342:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003346:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8003348:	2300      	movs	r3, #0
 800334a:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 800334c:	230d      	movs	r3, #13
 800334e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 8003352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003356:	4619      	mov	r1, r3
 8003358:	4837      	ldr	r0, [pc, #220]	; (8003438 <init_adc+0x29c>)
 800335a:	f7fd fc47 	bl	8000bec <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 800335e:	2307      	movs	r3, #7
 8003360:	2201      	movs	r2, #1
 8003362:	2100      	movs	r1, #0
 8003364:	4834      	ldr	r0, [pc, #208]	; (8003438 <init_adc+0x29c>)
 8003366:	f7fd fd11 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 800336a:	2307      	movs	r3, #7
 800336c:	2202      	movs	r2, #2
 800336e:	2101      	movs	r1, #1
 8003370:	4831      	ldr	r0, [pc, #196]	; (8003438 <init_adc+0x29c>)
 8003372:	f7fd fd0b 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 8003376:	2307      	movs	r3, #7
 8003378:	2203      	movs	r2, #3
 800337a:	2102      	movs	r1, #2
 800337c:	482e      	ldr	r0, [pc, #184]	; (8003438 <init_adc+0x29c>)
 800337e:	f7fd fd05 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 8003382:	2307      	movs	r3, #7
 8003384:	2204      	movs	r2, #4
 8003386:	2103      	movs	r1, #3
 8003388:	482b      	ldr	r0, [pc, #172]	; (8003438 <init_adc+0x29c>)
 800338a:	f7fd fcff 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_480Cycles);		//VCO-Volume
 800338e:	2307      	movs	r3, #7
 8003390:	2205      	movs	r2, #5
 8003392:	2104      	movs	r1, #4
 8003394:	4828      	ldr	r0, [pc, #160]	; (8003438 <init_adc+0x29c>)
 8003396:	f7fd fcf9 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 800339a:	2307      	movs	r3, #7
 800339c:	2206      	movs	r2, #6
 800339e:	2105      	movs	r1, #5
 80033a0:	4825      	ldr	r0, [pc, #148]	; (8003438 <init_adc+0x29c>)
 80033a2:	f7fd fcf3 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-decay
 80033a6:	2307      	movs	r3, #7
 80033a8:	2207      	movs	r2, #7
 80033aa:	2106      	movs	r1, #6
 80033ac:	4822      	ldr	r0, [pc, #136]	; (8003438 <init_adc+0x29c>)
 80033ae:	f7fd fced 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain
 80033b2:	2307      	movs	r3, #7
 80033b4:	2208      	movs	r2, #8
 80033b6:	2107      	movs	r1, #7
 80033b8:	481f      	ldr	r0, [pc, #124]	; (8003438 <init_adc+0x29c>)
 80033ba:	f7fd fce7 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 9, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 80033be:	2307      	movs	r3, #7
 80033c0:	2209      	movs	r2, #9
 80033c2:	2108      	movs	r1, #8
 80033c4:	481c      	ldr	r0, [pc, #112]	; (8003438 <init_adc+0x29c>)
 80033c6:	f7fd fce1 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 10, ADC_SampleTime_480Cycles);	//FILTER-FreqLow
 80033ca:	2307      	movs	r3, #7
 80033cc:	220a      	movs	r2, #10
 80033ce:	2109      	movs	r1, #9
 80033d0:	4819      	ldr	r0, [pc, #100]	; (8003438 <init_adc+0x29c>)
 80033d2:	f7fd fcdb 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 11, ADC_SampleTime_480Cycles);	//FILTER-FreqHigh
 80033d6:	2307      	movs	r3, #7
 80033d8:	220b      	movs	r2, #11
 80033da:	210a      	movs	r1, #10
 80033dc:	4816      	ldr	r0, [pc, #88]	; (8003438 <init_adc+0x29c>)
 80033de:	f7fd fcd5 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 12, ADC_SampleTime_480Cycles);	//FILTER-FreqResonance
 80033e2:	2307      	movs	r3, #7
 80033e4:	220c      	movs	r2, #12
 80033e6:	210b      	movs	r1, #11
 80033e8:	4813      	ldr	r0, [pc, #76]	; (8003438 <init_adc+0x29c>)
 80033ea:	f7fd fccf 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 13, ADC_SampleTime_480Cycles);	//FILTER-FreqGain
 80033ee:	2307      	movs	r3, #7
 80033f0:	220d      	movs	r2, #13
 80033f2:	210e      	movs	r1, #14
 80033f4:	4810      	ldr	r0, [pc, #64]	; (8003438 <init_adc+0x29c>)
 80033f6:	f7fd fcc9 	bl	8000d8c <ADC_RegularChannelConfig>


	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 80033fa:	2101      	movs	r1, #1
 80033fc:	480e      	ldr	r0, [pc, #56]	; (8003438 <init_adc+0x29c>)
 80033fe:	f7fd fdab 	bl	8000f58 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8003402:	2101      	movs	r1, #1
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <init_adc+0x29c>)
 8003406:	f7fd fd8b 	bl	8000f20 <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 800340a:	2101      	movs	r1, #1
 800340c:	480a      	ldr	r0, [pc, #40]	; (8003438 <init_adc+0x29c>)
 800340e:	f7fd fca1 	bl	8000d54 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8003412:	2101      	movs	r1, #1
 8003414:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003418:	f7ff f840 	bl	800249c <TIM_Cmd>



}
 800341c:	bf00      	nop
 800341e:	3780      	adds	r7, #128	; 0x80
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40020800 	.word	0x40020800
 8003430:	4001204c 	.word	0x4001204c
 8003434:	40026410 	.word	0x40026410
 8003438:	40012000 	.word	0x40012000

0800343c <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 8003442:	2101      	movs	r1, #1
 8003444:	2004      	movs	r0, #4
 8003446:	f7fe fcd7 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE);
 800344a:	2101      	movs	r1, #1
 800344c:	2010      	movs	r0, #16
 800344e:	f7fe fcd3 	bl	8001df8 <RCC_AHB1PeriphClockCmd>
	 * PE12 	lfo_sine
	 * PE13		lfo_sawtooth
	 * PE14		lfo_square
	 * PE15		lfo_triangle
	 */
	GPIO_StructInit(&GPIO_InitStructure);							// Default values
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe f95a 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800345c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003460:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003462:	2300      	movs	r3, #0
 8003464:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003474:	f107 0320 	add.w	r3, r7, #32
 8003478:	4619      	mov	r1, r3
 800347a:	484e      	ldr	r0, [pc, #312]	; (80035b4 <init_gpios+0x178>)
 800347c:	f7fe f8ba 	bl	80015f4 <GPIO_Init>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003480:	f107 0320 	add.w	r3, r7, #32
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe f943 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 800348a:	2340      	movs	r3, #64	; 0x40
 800348c:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 800348e:	2300      	movs	r3, #0
 8003490:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4619      	mov	r1, r3
 80034a6:	4844      	ldr	r0, [pc, #272]	; (80035b8 <init_gpios+0x17c>)
 80034a8:	f7fe f8a4 	bl	80015f4 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80034ac:	2101      	movs	r1, #1
 80034ae:	2004      	movs	r0, #4
 80034b0:	f7fe fcc2 	bl	8001e38 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe ffd5 	bl	8002468 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80034c2:	2300      	movs	r3, #0
 80034c4:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 80034c6:	f643 136c 	movw	r3, #14700	; 0x396c
 80034ca:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 80034cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034d0:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	4838      	ldr	r0, [pc, #224]	; (80035bc <init_gpios+0x180>)
 80034da:	f7fe ff59 	bl	8002390 <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 80034de:	231e      	movs	r3, #30
 80034e0:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80034e6:	2300      	movs	r3, #0
 80034e8:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fb0b 	bl	8000b0c <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80034f6:	2201      	movs	r2, #1
 80034f8:	2101      	movs	r1, #1
 80034fa:	4830      	ldr	r0, [pc, #192]	; (80035bc <init_gpios+0x180>)
 80034fc:	f7fe ffee 	bl	80024dc <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003500:	2101      	movs	r1, #1
 8003502:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003506:	f7fe fcb7 	bl	8001e78 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 800350a:	2106      	movs	r1, #6
 800350c:	2002      	movs	r0, #2
 800350e:	f7fe fefd 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource7);
 8003512:	2107      	movs	r1, #7
 8003514:	2004      	movs	r0, #4
 8003516:	f7fe fef9 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource8);
 800351a:	2108      	movs	r1, #8
 800351c:	2004      	movs	r0, #4
 800351e:	f7fe fef5 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource9);
 8003522:	2109      	movs	r1, #9
 8003524:	2004      	movs	r0, #4
 8003526:	f7fe fef1 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource10);
 800352a:	210a      	movs	r1, #10
 800352c:	2004      	movs	r0, #4
 800352e:	f7fe feed 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource11);
 8003532:	210b      	movs	r1, #11
 8003534:	2004      	movs	r0, #4
 8003536:	f7fe fee9 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource12);
 800353a:	210c      	movs	r1, #12
 800353c:	2004      	movs	r0, #4
 800353e:	f7fe fee5 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource13);
 8003542:	210d      	movs	r1, #13
 8003544:	2004      	movs	r0, #4
 8003546:	f7fe fee1 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource14);
 800354a:	210e      	movs	r1, #14
 800354c:	2004      	movs	r0, #4
 800354e:	f7fe fedd 	bl	800230c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);
 8003552:	210f      	movs	r1, #15
 8003554:	2004      	movs	r0, #4
 8003556:	f7fe fed9 	bl	800230c <SYSCFG_EXTILineConfig>


	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
 800355a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800355e:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8003560:	2301      	movs	r3, #1
 8003562:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003564:	2300      	movs	r3, #0
 8003566:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003568:	2308      	movs	r3, #8
 800356a:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd ffbd 	bl	80014f0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 8003576:	2317      	movs	r3, #23
 8003578:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800357a:	230f      	movs	r3, #15
 800357c:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800357e:	230f      	movs	r3, #15
 8003580:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003582:	2301      	movs	r3, #1
 8003584:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fabe 	bl	8000b0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;;
 8003590:	2328      	movs	r3, #40	; 0x28
 8003592:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003594:	230f      	movs	r3, #15
 8003596:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003598:	230f      	movs	r3, #15
 800359a:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800359c:	2301      	movs	r3, #1
 800359e:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fab1 	bl	8000b0c <NVIC_Init>




}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40000800 	.word	0x40000800

080035c0 <main>:

/* Globals */
extern uint16_t buffer_output[BUFF_LEN];

int main(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	init_gpios();								//initialize gpios
 80035c4:	f7ff ff3a 	bl	800343c <init_gpios>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <main+0x28>)
 80035ca:	f7ff fde7 	bl	800319c <init_adc>
	update_selector_state();					// get startup state
 80035ce:	f000 ffa1 	bl	8004514 <update_selector_state>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 80035d2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80035d6:	2150      	movs	r1, #80	; 0x50
 80035d8:	2004      	movs	r0, #4
 80035da:	f7fe ffe9 	bl	80025b0 <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, BUFF_LEN);
 80035de:	2140      	movs	r1, #64	; 0x40
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <main+0x2c>)
 80035e2:	f7ff f811 	bl	8002608 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 80035e6:	e7fe      	b.n	80035e6 <main+0x26>
 80035e8:	20000510 	.word	0x20000510
 80035ec:	200000e4 	.word	0x200000e4

080035f0 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 80035f4:	2002      	movs	r0, #2
 80035f6:	f7fe ffc3 	bl	8002580 <STM_EVAL_LEDOn>
	return (0);
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}

08003600 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_DIV2);
 800360a:	2120      	movs	r1, #32
 800360c:	2000      	movs	r0, #0
 800360e:	f000 f827 	bl	8003660 <generate_waveforms>
	return;
 8003612:	bf00      	nop
}
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop

0800361c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_DIV2, BUFF_LEN);
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	2020      	movs	r0, #32
 800362a:	f000 f819 	bl	8003660 <generate_waveforms>
	return;
 800362e:	bf00      	nop
}
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop

08003638 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */

  // return -1;
	return 0;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8003650:	2001      	movs	r0, #1
 8003652:	f7fe ff95 	bl	8002580 <STM_EVAL_LEDOn>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop

08003660 <generate_waveforms>:
volatile float32_t theta_vco = 0.0;
volatile float32_t theta_lfo = 0.0;
volatile float32_t theta_adsr = 1.0;

void generate_waveforms(uint16_t start, uint16_t end)
{
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	ed2d 8b02 	vpush	{d8}
 8003666:	b09a      	sub	sp, #104	; 0x68
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	460a      	mov	r2, r1
 800366e:	80fb      	strh	r3, [r7, #6]
 8003670:	4613      	mov	r3, r2
 8003672:	80bb      	strh	r3, [r7, #4]
	// Get wave shape.
	// osc.vco_wav = vfo_state;
	// osc.lfo_wav = lfo_state;

	osc.vco_wav = sine;
 8003674:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <generate_waveforms+0x184>)
 8003676:	2200      	movs	r2, #0
 8003678:	731a      	strb	r2, [r3, #12]
	osc.lfo_wav = sine;
 800367a:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <generate_waveforms+0x184>)
 800367c:	2200      	movs	r2, #0
 800367e:	735a      	strb	r2, [r3, #13]

	// Oscillators - amplitude and frequency.
	osc.vco_amp = (float) (ADCBuffer[0] & 0xffff);					// A0
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <generate_waveforms+0x188>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800368e:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <generate_waveforms+0x184>)
 8003690:	edc3 7a04 	vstr	s15, [r3, #16]
	osc.vco_freq = (float) (ADCBuffer[1] & 0xffff) * 2 * PI;		// A1
 8003694:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <generate_waveforms+0x188>)
 8003696:	885b      	ldrh	r3, [r3, #2]
 8003698:	b29b      	uxth	r3, r3
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036a6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80037ec <generate_waveforms+0x18c>
 80036aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ae:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <generate_waveforms+0x184>)
 80036b0:	edc3 7a00 	vstr	s15, [r3]
	osc.lfo_amp = (float) (ADCBuffer[2] & 0xffff)/200;				// AM: div by 4095
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <generate_waveforms+0x188>)
 80036b6:	889b      	ldrh	r3, [r3, #4]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80037f0 <generate_waveforms+0x190>
 80036c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <generate_waveforms+0x184>)
 80036cc:	edc3 7a06 	vstr	s15, [r3, #24]
	osc.lfo_freq = (float) (ADCBuffer[3] & 0xffff)/20;				// TODO: AM: div by 20
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <generate_waveforms+0x188>)
 80036d2:	88db      	ldrh	r3, [r3, #6]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036de:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80036e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <generate_waveforms+0x184>)
 80036e8:	edc3 7a02 	vstr	s15, [r3, #8]

	volatile uint32_t i = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	667b      	str	r3, [r7, #100]	; 0x64

	// Get ADSR values.
	volatile adsr_setting adsr_settings = adsr_03;			// Fall back on this.
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <generate_waveforms+0x194>)
 80036f2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80036f6:	461d      	mov	r5, r3
 80036f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003700:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;						// TODO: turn this off when LCD activated.
	// adsr_settings.mod = VCOamp;
	adsr_settings.mod = VCOfreq;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	/*
	 * TODO: Turn this on when LCD activated.
	 * 	adsr_settings.mod = menu_state.adsr_mod;
	 */

	adsr_settings.attack_len = ADCBuffer[5]*20;		// A5
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <generate_waveforms+0x188>)
 8003710:	895b      	ldrh	r3, [r3, #10]
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
	adsr_settings.decay_len = (ADCBuffer[6])*20;	// A6
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <generate_waveforms+0x188>)
 8003722:	899b      	ldrh	r3, [r3, #12]
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
	adsr_settings.sustain_len = ADCBuffer[7]*20;	// A7
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <generate_waveforms+0x188>)
 8003734:	89db      	ldrh	r3, [r3, #14]
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
	adsr_settings.release_len = ADCBuffer[8]*20;	// B0
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <generate_waveforms+0x188>)
 8003746:	8a1b      	ldrh	r3, [r3, #16]
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
	adsr_settings.blank_len = ADCBuffer[10]*20;		// C0
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <generate_waveforms+0x188>)
 8003758:	8a9b      	ldrh	r3, [r3, #20]
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
	adsr_settings.sustain_amp = (float32_t) ADCBuffer[12]/4095;		// C4
 8003768:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <generate_waveforms+0x188>)
 800376a:	8b1b      	ldrh	r3, [r3, #24]
 800376c:	b29b      	uxth	r3, r3
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003776:	eddf 6a20 	vldr	s13, [pc, #128]	; 80037f8 <generate_waveforms+0x198>
 800377a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Calculate ADSR boundaries.
	attack_start = 0.0;
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <generate_waveforms+0x19c>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
	decay_start = adsr_settings.attack_len;
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378a:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <generate_waveforms+0x1a0>)
 800378c:	6013      	str	r3, [r2, #0]
	sustain_start = decay_start + adsr_settings.decay_len;
 800378e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <generate_waveforms+0x1a0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4413      	add	r3, r2
 8003796:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <generate_waveforms+0x1a4>)
 8003798:	6013      	str	r3, [r2, #0]
	release_start = sustain_start + adsr_settings.sustain_len;
 800379a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <generate_waveforms+0x1a4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	4a19      	ldr	r2, [pc, #100]	; (8003808 <generate_waveforms+0x1a8>)
 80037a4:	6013      	str	r3, [r2, #0]
	blank_start = release_start + adsr_settings.release_len;
 80037a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <generate_waveforms+0x1a8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <generate_waveforms+0x1ac>)
 80037b0:	6013      	str	r3, [r2, #0]
	blank_end = blank_start + adsr_settings.blank_len;
 80037b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <generate_waveforms+0x1ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <generate_waveforms+0x1b0>)
 80037bc:	6013      	str	r3, [r2, #0]

	// One cycle is the entire ADSR envelope plus blank space.
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 80037be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	441a      	add	r2, r3
 80037c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c6:	441a      	add	r2, r3
 80037c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ca:	441a      	add	r2, r3
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	4413      	add	r3, r2
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
	volatile float32_t rads_per_sample_adsr = 0.0;
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(samples_cycle_adsr == 0)
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11e      	bne.n	800381c <generate_waveforms+0x1bc>
	{
		rads_per_sample_adsr = 0.0001;
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <generate_waveforms+0x1b4>)
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e2:	e026      	b.n	8003832 <generate_waveforms+0x1d2>
 80037e4:	20000054 	.word	0x20000054
 80037e8:	20000510 	.word	0x20000510
 80037ec:	40490fdb 	.word	0x40490fdb
 80037f0:	43480000 	.word	0x43480000
 80037f4:	2000008c 	.word	0x2000008c
 80037f8:	457ff000 	.word	0x457ff000
 80037fc:	20000464 	.word	0x20000464
 8003800:	20000468 	.word	0x20000468
 8003804:	2000046c 	.word	0x2000046c
 8003808:	20000470 	.word	0x20000470
 800380c:	20000474 	.word	0x20000474
 8003810:	20000478 	.word	0x20000478
 8003814:	38d1b717 	.word	0x38d1b717
 8003818:	40c90fdb 	.word	0x40c90fdb
	}
	else
	{
		rads_per_sample_adsr = 2.0 * PI / (float32_t) samples_cycle_adsr;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003826:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8003818 <generate_waveforms+0x1b8>
 800382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}


	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003832:	4bb9      	ldr	r3, [pc, #740]	; (8003b18 <generate_waveforms+0x4b8>)
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8003b1c <generate_waveforms+0x4bc>
 800383c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003840:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003844:	4bb4      	ldr	r3, [pc, #720]	; (8003b18 <generate_waveforms+0x4b8>)
 8003846:	ed93 7a02 	vldr	s14, [r3, #8]
 800384a:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8003b1c <generate_waveforms+0x4bc>
 800384e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003852:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	// adsr_settings.attack_len_rad = adsr_settings.attack_len  * TWO_PI / samples_cycle_adsr;
	adsr_settings.attack_len_rad = adsr_settings.attack_len * rads_per_sample_adsr;
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003860:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003868:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	adsr_settings.decay_len_rad = adsr_settings.decay_len  * TWO_PI / samples_cycle_adsr;
 800386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fdec 	bl	800044c <__aeabi_ui2d>
 8003874:	a3a6      	add	r3, pc, #664	; (adr r3, 8003b10 <generate_waveforms+0x4b0>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fe5d 	bl	8000538 <__aeabi_dmul>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	4625      	mov	r5, r4
 8003884:	461c      	mov	r4, r3
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fddf 	bl	800044c <__aeabi_ui2d>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4620      	mov	r0, r4
 8003894:	4629      	mov	r1, r5
 8003896:	f7fc ff79 	bl	800078c <__aeabi_ddiv>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	4618      	mov	r0, r3
 80038a0:	4621      	mov	r1, r4
 80038a2:	f7fd f8e3 	bl	8000a6c <__aeabi_d2f>
 80038a6:	4603      	mov	r3, r0
 80038a8:	657b      	str	r3, [r7, #84]	; 0x54
	adsr_settings.sustain_len_rad = adsr_settings.sustain_len  * TWO_PI / samples_cycle_adsr;
 80038aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fdcd 	bl	800044c <__aeabi_ui2d>
 80038b2:	a397      	add	r3, pc, #604	; (adr r3, 8003b10 <generate_waveforms+0x4b0>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fe3e 	bl	8000538 <__aeabi_dmul>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	4625      	mov	r5, r4
 80038c2:	461c      	mov	r4, r3
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fdc0 	bl	800044c <__aeabi_ui2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc ff5a 	bl	800078c <__aeabi_ddiv>
 80038d8:	4603      	mov	r3, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	4618      	mov	r0, r3
 80038de:	4621      	mov	r1, r4
 80038e0:	f7fd f8c4 	bl	8000a6c <__aeabi_d2f>
 80038e4:	4603      	mov	r3, r0
 80038e6:	65bb      	str	r3, [r7, #88]	; 0x58
	adsr_settings.release_len_rad = adsr_settings.release_len  * TWO_PI / samples_cycle_adsr;
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fc fdae 	bl	800044c <__aeabi_ui2d>
 80038f0:	a387      	add	r3, pc, #540	; (adr r3, 8003b10 <generate_waveforms+0x4b0>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fe1f 	bl	8000538 <__aeabi_dmul>
 80038fa:	4603      	mov	r3, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	4625      	mov	r5, r4
 8003900:	461c      	mov	r4, r3
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fda1 	bl	800044c <__aeabi_ui2d>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f7fc ff3b 	bl	800078c <__aeabi_ddiv>
 8003916:	4603      	mov	r3, r0
 8003918:	460c      	mov	r4, r1
 800391a:	4618      	mov	r0, r3
 800391c:	4621      	mov	r1, r4
 800391e:	f7fd f8a5 	bl	8000a6c <__aeabi_d2f>
 8003922:	4603      	mov	r3, r0
 8003924:	65fb      	str	r3, [r7, #92]	; 0x5c
	adsr_settings.blank_len_rad = adsr_settings.blank_len  * TWO_PI / samples_cycle_adsr;
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fd8f 	bl	800044c <__aeabi_ui2d>
 800392e:	a378      	add	r3, pc, #480	; (adr r3, 8003b10 <generate_waveforms+0x4b0>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fe00 	bl	8000538 <__aeabi_dmul>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	4625      	mov	r5, r4
 800393e:	461c      	mov	r4, r3
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fd82 	bl	800044c <__aeabi_ui2d>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4620      	mov	r0, r4
 800394e:	4629      	mov	r1, r5
 8003950:	f7fc ff1c 	bl	800078c <__aeabi_ddiv>
 8003954:	4603      	mov	r3, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4618      	mov	r0, r3
 800395a:	4621      	mov	r1, r4
 800395c:	f7fd f886 	bl	8000a6c <__aeabi_d2f>
 8003960:	4603      	mov	r3, r0
 8003962:	663b      	str	r3, [r7, #96]	; 0x60

	// float32_t attack_start_rad = 0.0;
	volatile float32_t decay_start_rad = adsr_settings.attack_len_rad;
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	623b      	str	r3, [r7, #32]
	volatile float32_t sustain_start_rad = decay_start_rad + adsr_settings.decay_len_rad;
 8003968:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800396c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003974:	edc7 7a07 	vstr	s15, [r7, #28]
	volatile float32_t release_start_rad = sustain_start_rad + adsr_settings.sustain_len_rad;
 8003978:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800397c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc7 7a06 	vstr	s15, [r7, #24]
	volatile float32_t blank_start_rad = release_start_rad + adsr_settings.release_len_rad;
 8003988:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800398c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	edc7 7a05 	vstr	s15, [r7, #20]
	volatile float32_t blank_end_rad = blank_start_rad + adsr_settings.blank_len_rad;
 8003998:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800399c:	edd7 7a05 	vldr	s15, [r7, #20]
 80039a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a4:	edc7 7a04 	vstr	s15, [r7, #16]

	volatile uint32_t dirtybit = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 80039ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d00a      	beq.n	80039cc <generate_waveforms+0x36c>
 80039b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d005      	beq.n	80039cc <generate_waveforms+0x36c>
 80039c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	f040 8093 	bne.w	8003af2 <generate_waveforms+0x492>
	{
		for(i = start; i < end; i++)
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	667b      	str	r3, [r7, #100]	; 0x64
 80039d0:	e08a      	b.n	8003ae8 <generate_waveforms+0x488>
		{
			theta_adsr = theta_adsr + rads_per_sample_adsr;
 80039d2:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <generate_waveforms+0x4c0>)
 80039d4:	ed93 7a00 	vldr	s14, [r3]
 80039d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e0:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <generate_waveforms+0x4c0>)
 80039e2:	edc3 7a00 	vstr	s15, [r3]

			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			// if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
			if(theta_adsr < decay_start_rad)
 80039e6:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <generate_waveforms+0x4c0>)
 80039e8:	ed93 7a00 	vldr	s14, [r3]
 80039ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80039f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f8:	d513      	bpl.n	8003a22 <generate_waveforms+0x3c2>
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				// buffer_adsr_am[i] = 1.0 + 1.0 * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
				buffer_adsr_am[i] = 1.0 + 1.0 * gen_sawtooth_angle( theta_adsr);
 80039fa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <generate_waveforms+0x4c0>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	f000 facb 	bl	8003fa0 <gen_sawtooth_angle>
 8003a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <generate_waveforms+0x4c4>)
 8003a18:	00a3      	lsls	r3, r4, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	edc3 7a00 	vstr	s15, [r3]
 8003a20:	e05f      	b.n	8003ae2 <generate_waveforms+0x482>
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
			else if(theta_adsr < sustain_start_rad)
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <generate_waveforms+0x4c0>)
 8003a24:	ed93 7a00 	vldr	s14, [r3]
 8003a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d515      	bpl.n	8003a62 <generate_waveforms+0x402>
			{
				// Decay
				// buffer_adsr_am[i] = 1.0 * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
				buffer_adsr_am[i] = 1.0 * gen_rampdown_angle2(theta_adsr, adsr_settings.sustain_amp, 1.0);
 8003a36:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <generate_waveforms+0x4c0>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003a42:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a46:	eef0 0a47 	vmov.f32	s1, s14
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	f000 fb03 	bl	8004058 <gen_rampdown_angle2>
 8003a52:	eef0 7a40 	vmov.f32	s15, s0
 8003a56:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <generate_waveforms+0x4c4>)
 8003a58:	00a3      	lsls	r3, r4, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	edc3 7a00 	vstr	s15, [r3]
 8003a60:	e03f      	b.n	8003ae2 <generate_waveforms+0x482>
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
			else if(theta_adsr < release_start_rad)
 8003a62:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <generate_waveforms+0x4c0>)
 8003a64:	ed93 7a00 	vldr	s14, [r3]
 8003a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d506      	bpl.n	8003a84 <generate_waveforms+0x424>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 8003a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a7a:	492a      	ldr	r1, [pc, #168]	; (8003b24 <generate_waveforms+0x4c4>)
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e02e      	b.n	8003ae2 <generate_waveforms+0x482>
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
			else if(theta_adsr < blank_start_rad)
 8003a84:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <generate_waveforms+0x4c0>)
 8003a86:	ed93 7a00 	vldr	s14, [r3]
 8003a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d513      	bpl.n	8003ac0 <generate_waveforms+0x460>
			{
				// Release
				// buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( theta_adsr );
 8003a98:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003a9a:	ed97 8a0e 	vldr	s16, [r7, #56]	; 0x38
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <generate_waveforms+0x4c0>)
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	f000 faa8 	bl	8003ffc <gen_rampdown_angle>
 8003aac:	eef0 7a40 	vmov.f32	s15, s0
 8003ab0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <generate_waveforms+0x4c4>)
 8003ab6:	00a3      	lsls	r3, r4, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	edc3 7a00 	vstr	s15, [r3]
 8003abe:	e010      	b.n	8003ae2 <generate_waveforms+0x482>
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
			else if(theta_adsr < blank_end_rad)
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <generate_waveforms+0x4c0>)
 8003ac2:	ed93 7a00 	vldr	s14, [r3]
 8003ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d506      	bpl.n	8003ae2 <generate_waveforms+0x482>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 8003ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <generate_waveforms+0x4c4>)
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8003ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae8:	88ba      	ldrh	r2, [r7, #4]
 8003aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f63f af70 	bhi.w	80039d2 <generate_waveforms+0x372>
	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	// if(adsr_fm)
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 8003af2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d005      	beq.n	8003b08 <generate_waveforms+0x4a8>
 8003afc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	f040 8195 	bne.w	8003e32 <generate_waveforms+0x7d2>
	{
		for(i = start; i < end; i++)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0c:	e18c      	b.n	8003e28 <generate_waveforms+0x7c8>
 8003b0e:	bf00      	nop
 8003b10:	54442eea 	.word	0x54442eea
 8003b14:	401921fb 	.word	0x401921fb
 8003b18:	20000054 	.word	0x20000054
 8003b1c:	47bb8000 	.word	0x47bb8000
 8003b20:	200000bc 	.word	0x200000bc
 8003b24:	20000264 	.word	0x20000264
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			// if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
			if(theta_adsr < decay_start_rad)
 8003b28:	4bb1      	ldr	r3, [pc, #708]	; (8003df0 <generate_waveforms+0x790>)
 8003b2a:	ed93 7a00 	vldr	s14, [r3]
 8003b2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3a:	d534      	bpl.n	8003ba6 <generate_waveforms+0x546>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b40:	49ac      	ldr	r1, [pc, #688]	; (8003df4 <generate_waveforms+0x794>)
 8003b42:	0092      	lsls	r2, r2, #2
 8003b44:	440a      	add	r2, r1
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	49ab      	ldr	r1, [pc, #684]	; (8003df8 <generate_waveforms+0x798>)
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d015      	beq.n	8003b82 <generate_waveforms+0x522>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8003b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b5a:	49a7      	ldr	r1, [pc, #668]	; (8003df8 <generate_waveforms+0x798>)
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	440a      	add	r2, r1
 8003b60:	ed92 7a00 	vldr	s14, [r2]
 8003b64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b66:	3a01      	subs	r2, #1
 8003b68:	49a3      	ldr	r1, [pc, #652]	; (8003df8 <generate_waveforms+0x798>)
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	440a      	add	r2, r1
 8003b6e:	edd2 7a00 	vldr	s15, [r2]
 8003b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b76:	4aa0      	ldr	r2, [pc, #640]	; (8003df8 <generate_waveforms+0x798>)
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	edc3 7a00 	vstr	s15, [r3]
 8003b80:	e14f      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 8003b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b86:	499c      	ldr	r1, [pc, #624]	; (8003df8 <generate_waveforms+0x798>)
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	440a      	add	r2, r1
 8003b8c:	ed92 7a00 	vldr	s14, [r2]
 8003b90:	4a99      	ldr	r2, [pc, #612]	; (8003df8 <generate_waveforms+0x798>)
 8003b92:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8003b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9a:	4a97      	ldr	r2, [pc, #604]	; (8003df8 <generate_waveforms+0x798>)
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	edc3 7a00 	vstr	s15, [r3]
 8003ba4:	e13d      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
			else if(theta_adsr < sustain_start_rad)
 8003ba6:	4b92      	ldr	r3, [pc, #584]	; (8003df0 <generate_waveforms+0x790>)
 8003ba8:	ed93 7a00 	vldr	s14, [r3]
 8003bac:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d534      	bpl.n	8003c24 <generate_waveforms+0x5c4>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8003bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bbe:	498d      	ldr	r1, [pc, #564]	; (8003df4 <generate_waveforms+0x794>)
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	440a      	add	r2, r1
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	498c      	ldr	r1, [pc, #560]	; (8003df8 <generate_waveforms+0x798>)
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8003bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <generate_waveforms+0x5a0>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8003bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bd8:	4987      	ldr	r1, [pc, #540]	; (8003df8 <generate_waveforms+0x798>)
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	440a      	add	r2, r1
 8003bde:	ed92 7a00 	vldr	s14, [r2]
 8003be2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003be4:	3a01      	subs	r2, #1
 8003be6:	4984      	ldr	r1, [pc, #528]	; (8003df8 <generate_waveforms+0x798>)
 8003be8:	0092      	lsls	r2, r2, #2
 8003bea:	440a      	add	r2, r1
 8003bec:	edd2 7a00 	vldr	s15, [r2]
 8003bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf4:	4a80      	ldr	r2, [pc, #512]	; (8003df8 <generate_waveforms+0x798>)
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	edc3 7a00 	vstr	s15, [r3]
 8003bfe:	e110      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c04:	497c      	ldr	r1, [pc, #496]	; (8003df8 <generate_waveforms+0x798>)
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	440a      	add	r2, r1
 8003c0a:	ed92 7a00 	vldr	s14, [r2]
 8003c0e:	4a7a      	ldr	r2, [pc, #488]	; (8003df8 <generate_waveforms+0x798>)
 8003c10:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8003c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c18:	4a77      	ldr	r2, [pc, #476]	; (8003df8 <generate_waveforms+0x798>)
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	edc3 7a00 	vstr	s15, [r3]
 8003c22:	e0fe      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
			else if(theta_adsr < release_start_rad)
 8003c24:	4b72      	ldr	r3, [pc, #456]	; (8003df0 <generate_waveforms+0x790>)
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	f140 8097 	bpl.w	8003d68 <generate_waveforms+0x708>
				// if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
				// TODO: dangerous -- comparing floats -- could result in mayhem.
				// if( theta_adsr == sustain_start_rad)
				// dirtybit = 0;

				if( (theta_adsr > sustain_start_rad - 0.1) && (theta_adsr < sustain_start_rad + 0.1))
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <generate_waveforms+0x790>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fc26 	bl	8000490 <__aeabi_f2d>
 8003c44:	4604      	mov	r4, r0
 8003c46:	460d      	mov	r5, r1
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc20 	bl	8000490 <__aeabi_f2d>
 8003c50:	a365      	add	r3, pc, #404	; (adr r3, 8003de8 <generate_waveforms+0x788>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc fabb 	bl	80001d0 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f7fc fef9 	bl	8000a58 <__aeabi_dcmpgt>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d058      	beq.n	8003d1e <generate_waveforms+0x6be>
 8003c6c:	4b60      	ldr	r3, [pc, #384]	; (8003df0 <generate_waveforms+0x790>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fc0d 	bl	8000490 <__aeabi_f2d>
 8003c76:	4604      	mov	r4, r0
 8003c78:	460d      	mov	r5, r1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fc07 	bl	8000490 <__aeabi_f2d>
 8003c82:	a359      	add	r3, pc, #356	; (adr r3, 8003de8 <generate_waveforms+0x788>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc faa4 	bl	80001d4 <__adddf3>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc fec2 	bl	8000a1c <__aeabi_dcmplt>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03f      	beq.n	8003d1e <generate_waveforms+0x6be>
				// if(!dirtybit)
				{
					// dirtybit = 1;
					if(i > 1)
 8003c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d913      	bls.n	8003ccc <generate_waveforms+0x66c>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 8003ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	4a53      	ldr	r2, [pc, #332]	; (8003df8 <generate_waveforms+0x798>)
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	ed93 7a00 	vldr	s14, [r3]
 8003cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb4:	3b02      	subs	r3, #2
 8003cb6:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <generate_waveforms+0x798>)
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <generate_waveforms+0x79c>)
 8003cc6:	edc3 7a00 	vstr	s15, [r3]
 8003cca:	e020      	b.n	8003d0e <generate_waveforms+0x6ae>
					}
					else if(i == 0)
 8003ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <generate_waveforms+0x68a>
					{
						delta = buffer_adsr_fm[BUFF_LEN-1] - buffer_adsr_fm[BUFF_LEN-2];
 8003cd2:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <generate_waveforms+0x798>)
 8003cd4:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8003cd8:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <generate_waveforms+0x798>)
 8003cda:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce2:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <generate_waveforms+0x79c>)
 8003ce4:	edc3 7a00 	vstr	s15, [r3]
 8003ce8:	e011      	b.n	8003d0e <generate_waveforms+0x6ae>
					}
					else if(i == 1)
 8003cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10e      	bne.n	8003d0e <generate_waveforms+0x6ae>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[BUFF_LEN-1];
 8003cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <generate_waveforms+0x798>)
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <generate_waveforms+0x798>)
 8003d00:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d08:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <generate_waveforms+0x79c>)
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0;
 8003d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d10:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <generate_waveforms+0x798>)
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e081      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
				else
				{
					if(i > 0)
 8003d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <generate_waveforms+0x6ea>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8003d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	4933      	ldr	r1, [pc, #204]	; (8003df8 <generate_waveforms+0x798>)
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	440a      	add	r2, r1
 8003d30:	ed92 7a00 	vldr	s14, [r2]
 8003d34:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <generate_waveforms+0x79c>)
 8003d36:	edd2 7a00 	vldr	s15, [r2]
 8003d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	; (8003df8 <generate_waveforms+0x798>)
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	edc3 7a00 	vstr	s15, [r3]
 8003d48:	e06b      	b.n	8003e22 <generate_waveforms+0x7c2>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[BUFF_LEN-1] + delta;
 8003d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	; (8003df8 <generate_waveforms+0x798>)
 8003d4e:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <generate_waveforms+0x79c>)
 8003d54:	edd2 7a00 	vldr	s15, [r2]
 8003d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <generate_waveforms+0x798>)
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	edc3 7a00 	vstr	s15, [r3]
 8003d66:	e05c      	b.n	8003e22 <generate_waveforms+0x7c2>
					}
				}
			}

			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
			else if(theta_adsr < blank_start_rad)
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <generate_waveforms+0x790>)
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	d541      	bpl.n	8003e00 <generate_waveforms+0x7a0>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d80:	491c      	ldr	r1, [pc, #112]	; (8003df4 <generate_waveforms+0x794>)
 8003d82:	0092      	lsls	r2, r2, #2
 8003d84:	440a      	add	r2, r1
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	491b      	ldr	r1, [pc, #108]	; (8003df8 <generate_waveforms+0x798>)
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8003d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d015      	beq.n	8003dc2 <generate_waveforms+0x762>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8003d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d9a:	4917      	ldr	r1, [pc, #92]	; (8003df8 <generate_waveforms+0x798>)
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	440a      	add	r2, r1
 8003da0:	ed92 7a00 	vldr	s14, [r2]
 8003da4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003da6:	3a01      	subs	r2, #1
 8003da8:	4913      	ldr	r1, [pc, #76]	; (8003df8 <generate_waveforms+0x798>)
 8003daa:	0092      	lsls	r2, r2, #2
 8003dac:	440a      	add	r2, r1
 8003dae:	edd2 7a00 	vldr	s15, [r2]
 8003db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <generate_waveforms+0x798>)
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	edc3 7a00 	vstr	s15, [r3]
 8003dc0:	e02f      	b.n	8003e22 <generate_waveforms+0x7c2>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 8003dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dc6:	490c      	ldr	r1, [pc, #48]	; (8003df8 <generate_waveforms+0x798>)
 8003dc8:	0092      	lsls	r2, r2, #2
 8003dca:	440a      	add	r2, r1
 8003dcc:	ed92 7a00 	vldr	s14, [r2]
 8003dd0:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <generate_waveforms+0x798>)
 8003dd2:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <generate_waveforms+0x798>)
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	edc3 7a00 	vstr	s15, [r3]
 8003de4:	e01d      	b.n	8003e22 <generate_waveforms+0x7c2>
 8003de6:	bf00      	nop
 8003de8:	9999999a 	.word	0x9999999a
 8003dec:	3fb99999 	.word	0x3fb99999
 8003df0:	200000bc 	.word	0x200000bc
 8003df4:	20000264 	.word	0x20000264
 8003df8:	20000364 	.word	0x20000364
 8003dfc:	2000047c 	.word	0x2000047c
				}
			}
			// else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
			else if(theta_adsr < blank_end_rad)
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <generate_waveforms+0x91c>)
 8003e02:	ed93 7a00 	vldr	s14, [r3]
 8003e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	d506      	bpl.n	8003e22 <generate_waveforms+0x7c2>
			{
				// Blank
				buffer_adsr_fm[i] = 0;
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	4a5a      	ldr	r2, [pc, #360]	; (8003f80 <generate_waveforms+0x920>)
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	// if(adsr_fm)
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8003e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e24:	3301      	adds	r3, #1
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
 8003e28:	88ba      	ldrh	r2, [r7, #4]
 8003e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f63f ae7b 	bhi.w	8003b28 <generate_waveforms+0x4c8>
//			buffer_lfo_float[i] = osc.lfo_amp + osc.lfo_amp*gen_triangle_angle(theta_lfo);
//		}
//	}

	// Sine VCO
	if(osc.vco_wav == sine)
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <generate_waveforms+0x924>)
 8003e34:	7b1b      	ldrb	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d140      	bne.n	8003ebc <generate_waveforms+0x85c>
	{

		for(i = start; i < end; i++)
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e3e:	e039      	b.n	8003eb4 <generate_waveforms+0x854>
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003e40:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <generate_waveforms+0x928>)
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	4b4e      	ldr	r3, [pc, #312]	; (8003f88 <generate_waveforms+0x928>)
 8003e50:	edc3 7a00 	vstr	s15, [r3]
			buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + buffer_lfo_float[i] + buffer_adsr_fm[i]);
 8003e54:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8003e56:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <generate_waveforms+0x924>)
 8003e58:	ed93 8a04 	vldr	s16, [r3, #16]
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <generate_waveforms+0x924>)
 8003e5e:	edd3 8a04 	vldr	s17, [r3, #16]
 8003e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e64:	4a49      	ldr	r2, [pc, #292]	; (8003f8c <generate_waveforms+0x92c>)
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	ed93 7a00 	vldr	s14, [r3]
 8003e6e:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <generate_waveforms+0x928>)
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7a:	4a41      	ldr	r2, [pc, #260]	; (8003f80 <generate_waveforms+0x920>)
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e88:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8c:	f000 fbc4 	bl	8004618 <arm_sin_f32>
 8003e90:	eef0 7a40 	vmov.f32	s15, s0
 8003e94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003e98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea0:	edc7 7a00 	vstr	s15, [r7]
 8003ea4:	883b      	ldrh	r3, [r7, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <generate_waveforms+0x930>)
 8003eaa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sine VCO
	if(osc.vco_wav == sine)
	{

		for(i = start; i < end; i++)
 8003eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb4:	88ba      	ldrh	r2, [r7, #4]
 8003eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d8c1      	bhi.n	8003e40 <generate_waveforms+0x7e0>
//			buffer_output[i] = buffer_output[i] * buffer_lfo_float[i];
//		}
//	}
//
	// AM Modulate VCO with ADSR
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
 8003ebc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d004      	beq.n	8003ed0 <generate_waveforms+0x870>
 8003ec6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d124      	bne.n	8003f1a <generate_waveforms+0x8ba>
	{
		for(i = start; i < end; i++)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed4:	e01d      	b.n	8003f12 <generate_waveforms+0x8b2>
		{
			buffer_output[i] = buffer_output[i] * buffer_adsr_am[i];
 8003ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003eda:	492d      	ldr	r1, [pc, #180]	; (8003f90 <generate_waveforms+0x930>)
 8003edc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	ee07 2a90 	vmov	s15, r2
 8003ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003eec:	4929      	ldr	r1, [pc, #164]	; (8003f94 <generate_waveforms+0x934>)
 8003eee:	0092      	lsls	r2, r2, #2
 8003ef0:	440a      	add	r2, r1
 8003ef2:	edd2 7a00 	vldr	s15, [r2]
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	edc7 7a00 	vstr	s15, [r7]
 8003f02:	883a      	ldrh	r2, [r7, #0]
 8003f04:	b291      	uxth	r1, r2
 8003f06:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <generate_waveforms+0x930>)
 8003f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//	}
//
	// AM Modulate VCO with ADSR
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8003f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0e:	3301      	adds	r3, #1
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
 8003f12:	88ba      	ldrh	r2, [r7, #4]
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d8dd      	bhi.n	8003ed6 <generate_waveforms+0x876>
		{
			buffer_output[i] = buffer_output[i] * buffer_adsr_am[i];
		}
	}

	theta_vco = fast_fmod(theta_vco, TWO_PI);
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <generate_waveforms+0x928>)
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003f98 <generate_waveforms+0x938>
 8003f24:	eeb0 0a67 	vmov.f32	s0, s15
 8003f28:	f000 f8e0 	bl	80040ec <fast_fmod>
 8003f2c:	eef0 7a40 	vmov.f32	s15, s0
 8003f30:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <generate_waveforms+0x928>)
 8003f32:	edc3 7a00 	vstr	s15, [r3]
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <generate_waveforms+0x93c>)
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003f98 <generate_waveforms+0x938>
 8003f40:	eeb0 0a67 	vmov.f32	s0, s15
 8003f44:	f000 f8d2 	bl	80040ec <fast_fmod>
 8003f48:	eef0 7a40 	vmov.f32	s15, s0
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <generate_waveforms+0x93c>)
 8003f4e:	edc3 7a00 	vstr	s15, [r3]
	theta_adsr = fast_fmod(theta_adsr, TWO_PI);
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <generate_waveforms+0x91c>)
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003f98 <generate_waveforms+0x938>
 8003f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f60:	f000 f8c4 	bl	80040ec <fast_fmod>
 8003f64:	eef0 7a40 	vmov.f32	s15, s0
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <generate_waveforms+0x91c>)
 8003f6a:	edc3 7a00 	vstr	s15, [r3]

	return;
 8003f6e:	bf00      	nop
}
 8003f70:	3768      	adds	r7, #104	; 0x68
 8003f72:	46bd      	mov	sp, r7
 8003f74:	ecbd 8b02 	vpop	{d8}
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200000bc 	.word	0x200000bc
 8003f80:	20000364 	.word	0x20000364
 8003f84:	20000054 	.word	0x20000054
 8003f88:	20000480 	.word	0x20000480
 8003f8c:	20000164 	.word	0x20000164
 8003f90:	200000e4 	.word	0x200000e4
 8003f94:	20000264 	.word	0x20000264
 8003f98:	40c90fdb 	.word	0x40c90fdb
 8003f9c:	20000484 	.word	0x20000484

08003fa0 <gen_sawtooth_angle>:

	return val;
}

float32_t gen_sawtooth_angle(float32_t angle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8003fb6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003ff4 <gen_sawtooth_angle+0x54>
 8003fba:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fbe:	f000 f895 	bl	80040ec <fast_fmod>
 8003fc2:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <gen_sawtooth_angle+0x58>)
 8003fc8:	60fb      	str	r3, [r7, #12]
	val = -1+angle*m;
 8003fca:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fde:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	ee07 3a90 	vmov	s15, r3
}
 8003fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40c90fdb 	.word	0x40c90fdb
 8003ff8:	3ea2f983 	.word	0x3ea2f983

08003ffc <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004012:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004050 <gen_rampdown_angle+0x54>
 8004016:	ed97 0a01 	vldr	s0, [r7, #4]
 800401a:	f000 f867 	bl	80040ec <fast_fmod>
 800401e:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <gen_rampdown_angle+0x58>)
 8004024:	60fb      	str	r3, [r7, #12]
	val = 1.0 + angle*m;
 8004026:	ed97 7a01 	vldr	s14, [r7, #4]
 800402a:	edd7 7a03 	vldr	s15, [r7, #12]
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800403a:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	ee07 3a90 	vmov	s15, r3
}
 8004044:	eeb0 0a67 	vmov.f32	s0, s15
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40c90fdb 	.word	0x40c90fdb
 8004054:	bea2f983 	.word	0xbea2f983

08004058 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004062:	edc7 0a02 	vstr	s1, [r7, #8]
 8004066:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0;
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0;
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8004076:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80040e8 <gen_rampdown_angle2+0x90>
 800407a:	ed97 0a03 	vldr	s0, [r7, #12]
 800407e:	f000 f835 	bl	80040ec <fast_fmod>
 8004082:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8004086:	ed97 7a02 	vldr	s14, [r7, #8]
 800408a:	edd7 7a01 	vldr	s15, [r7, #4]
 800408e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004092:	ee17 0a90 	vmov	r0, s15
 8004096:	f7fc f9fb 	bl	8000490 <__aeabi_f2d>
 800409a:	a311      	add	r3, pc, #68	; (adr r3, 80040e0 <gen_rampdown_angle2+0x88>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f7fc fa4a 	bl	8000538 <__aeabi_dmul>
 80040a4:	4603      	mov	r3, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4618      	mov	r0, r3
 80040aa:	4621      	mov	r1, r4
 80040ac:	f7fc fcde 	bl	8000a6c <__aeabi_d2f>
 80040b0:	4603      	mov	r3, r0
 80040b2:	617b      	str	r3, [r7, #20]
	val = 1.0 + angle*m;
 80040b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80040b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040c8:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	ee07 3a90 	vmov	s15, r3
}
 80040d2:	eeb0 0a67 	vmov.f32	s0, s15
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd90      	pop	{r4, r7, pc}
 80040dc:	f3af 8000 	nop.w
 80040e0:	6dc8bdc4 	.word	0x6dc8bdc4
 80040e4:	3fd45f30 	.word	0x3fd45f30
 80040e8:	40c90fdb 	.word	0x40c90fdb

080040ec <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80040f6:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 80040fa:	edd7 6a01 	vldr	s13, [r7, #4]
 80040fe:	ed97 7a00 	vldr	s14, [r7]
 8004102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004106:	edc7 7a03 	vstr	s15, [r7, #12]
 800410a:	edd7 7a03 	vldr	s15, [r7, #12]
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	ed97 7a03 	vldr	s14, [r7, #12]
 800411a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800411e:	edd7 7a00 	vldr	s15, [r7]
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800416c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800413a:	e003      	b.n	8004144 <LoopCopyDataInit>

0800413c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800413e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004142:	3104      	adds	r1, #4

08004144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004144:	480b      	ldr	r0, [pc, #44]	; (8004174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004146:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800414a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800414c:	d3f6      	bcc.n	800413c <CopyDataInit>
  ldr  r2, =_sbss
 800414e:	4a0b      	ldr	r2, [pc, #44]	; (800417c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004150:	e002      	b.n	8004158 <LoopFillZerobss>

08004152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004154:	f842 3b04 	str.w	r3, [r2], #4

08004158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800415a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800415c:	d3f9      	bcc.n	8004152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800415e:	f000 f90f 	bl	8004380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004162:	f000 fa95 	bl	8004690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004166:	f7ff fa2b 	bl	80035c0 <main>
  bx  lr    
 800416a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800416c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8004170:	08004f08 	.word	0x08004f08
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004178:	200000c0 	.word	0x200000c0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800417c:	200000c0 	.word	0x200000c0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004180:	2000052c 	.word	0x2000052c

08004184 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004184:	e7fe      	b.n	8004184 <CAN1_RX0_IRQHandler>
	...

08004188 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800419c:	e7fe      	b.n	800419c <HardFault_Handler+0x4>
 800419e:	bf00      	nop

080041a0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80041a4:	e7fe      	b.n	80041a4 <MemManage_Handler+0x4>
 80041a6:	bf00      	nop

080041a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80041ac:	e7fe      	b.n	80041ac <BusFault_Handler+0x4>
 80041ae:	bf00      	nop

080041b0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80041b4:	e7fe      	b.n	80041b4 <UsageFault_Handler+0x4>
 80041b6:	bf00      	nop

080041b8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop

080041f8 <EXTI0_IRQHandler>:


/*
 * interrupt handler for up button
 */
void EXTI0_IRQHandler(void){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 80041fc:	2001      	movs	r0, #1
 80041fe:	f7fd f9e9 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <EXTI0_IRQHandler+0x2c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <EXTI0_IRQHandler+0x26>
		menubutton.button = up;
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <EXTI0_IRQHandler+0x2c>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <EXTI0_IRQHandler+0x2c>)
 8004212:	2201      	movs	r2, #1
 8004214:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8004216:	2101      	movs	r1, #1
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <EXTI0_IRQHandler+0x30>)
 800421a:	f7fe f93f 	bl	800249c <TIM_Cmd>
	}
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000508 	.word	0x20000508
 8004228:	40000400 	.word	0x40000400

0800422c <EXTI1_IRQHandler>:


/*
 * interrupt handler for down button
 */
void EXTI1_IRQHandler(void){
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 8004230:	2002      	movs	r0, #2
 8004232:	f7fd f9cf 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <EXTI1_IRQHandler+0x2c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <EXTI1_IRQHandler+0x26>
		menubutton.button = down;
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <EXTI1_IRQHandler+0x2c>)
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <EXTI1_IRQHandler+0x2c>)
 8004246:	2201      	movs	r2, #1
 8004248:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800424a:	2101      	movs	r1, #1
 800424c:	4803      	ldr	r0, [pc, #12]	; (800425c <EXTI1_IRQHandler+0x30>)
 800424e:	f7fe f925 	bl	800249c <TIM_Cmd>
	}
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000508 	.word	0x20000508
 800425c:	40000400 	.word	0x40000400

08004260 <EXTI2_IRQHandler>:


/*
 * interrupt handler for back button
 */
void EXTI2_IRQHandler(void){
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 8004264:	2004      	movs	r0, #4
 8004266:	f7fd f9b5 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <EXTI2_IRQHandler+0x2c>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <EXTI2_IRQHandler+0x26>
		menubutton.button = back;
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <EXTI2_IRQHandler+0x2c>)
 8004274:	2202      	movs	r2, #2
 8004276:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <EXTI2_IRQHandler+0x2c>)
 800427a:	2201      	movs	r2, #1
 800427c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800427e:	2101      	movs	r1, #1
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <EXTI2_IRQHandler+0x30>)
 8004282:	f7fe f90b 	bl	800249c <TIM_Cmd>
	}

}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000508 	.word	0x20000508
 8004290:	40000400 	.word	0x40000400

08004294 <EXTI3_IRQHandler>:


/*
 * interrupt handler for enter button
 */
void EXTI3_IRQHandler(void){
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8004298:	2008      	movs	r0, #8
 800429a:	f7fd f99b 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <EXTI3_IRQHandler+0x2c>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <EXTI3_IRQHandler+0x26>
		menubutton.button = enter;
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <EXTI3_IRQHandler+0x2c>)
 80042a8:	2203      	movs	r2, #3
 80042aa:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <EXTI3_IRQHandler+0x2c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80042b2:	2101      	movs	r1, #1
 80042b4:	4803      	ldr	r0, [pc, #12]	; (80042c4 <EXTI3_IRQHandler+0x30>)
 80042b6:	f7fe f8f1 	bl	800249c <TIM_Cmd>
	}
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000508 	.word	0x20000508
 80042c4:	40000400 	.word	0x40000400

080042c8 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector

void EXTI9_5_IRQHandler(void){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 80042cc:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80042d0:	f7fd f980 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <EXTI9_5_IRQHandler+0x28>)
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 80042e2:	2101      	movs	r1, #1
 80042e4:	4802      	ldr	r0, [pc, #8]	; (80042f0 <EXTI9_5_IRQHandler+0x28>)
 80042e6:	f7fe f8d9 	bl	800249c <TIM_Cmd>
	}
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40000800 	.word	0x40000800

080042f4 <EXTI15_10_IRQHandler>:




//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 80042f8:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 80042fc:	f7fd f96a 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <EXTI15_10_IRQHandler+0x28>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 800430e:	2101      	movs	r1, #1
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <EXTI15_10_IRQHandler+0x28>)
 8004312:	f7fe f8c3 	bl	800249c <TIM_Cmd>
	}
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40000800 	.word	0x40000800

08004320 <TIM3_IRQHandler>:



// Timer for limiting button pushes 100ms
void TIM3_IRQHandler(){
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM3, DISABLE);								//stop timer
 8004324:	2100      	movs	r1, #0
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <TIM3_IRQHandler+0x20>)
 8004328:	f7fe f8b8 	bl	800249c <TIM_Cmd>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 800432c:	2101      	movs	r1, #1
 800432e:	4804      	ldr	r0, [pc, #16]	; (8004340 <TIM3_IRQHandler+0x20>)
 8004330:	f7fe f8f8 	bl	8002524 <TIM_ClearITPendingBit>
		menubutton.button_state = NOT_ACTIVE;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <TIM3_IRQHandler+0x24>)
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
		//handle button push havent quite figured it out yet

}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40000400 	.word	0x40000400
 8004344:	20000508 	.word	0x20000508

08004348 <TIM4_IRQHandler>:


// Timer for debouncing selectors 50ms
void TIM4_IRQHandler(){
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM4, DISABLE);								//stop timer
 800434c:	2100      	movs	r1, #0
 800434e:	4805      	ldr	r0, [pc, #20]	; (8004364 <TIM4_IRQHandler+0x1c>)
 8004350:	f7fe f8a4 	bl	800249c <TIM_Cmd>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8004354:	2101      	movs	r1, #1
 8004356:	4803      	ldr	r0, [pc, #12]	; (8004364 <TIM4_IRQHandler+0x1c>)
 8004358:	f7fe f8e4 	bl	8002524 <TIM_ClearITPendingBit>
		update_selector_state();							//update state
 800435c:	f000 f8da 	bl	8004514 <update_selector_state>

}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40000800 	.word	0x40000800

08004368 <ADC_IRQHandler>:

// set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
        /* acknowledge interrupt */
        ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 800436c:	f240 2105 	movw	r1, #517	; 0x205
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <ADC_IRQHandler+0x14>)
 8004372:	f7fc fe0d 	bl	8000f90 <ADC_ClearITPendingBit>
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40012000 	.word	0x40012000

08004380 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <SystemInit+0x60>)
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <SystemInit+0x60>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <SystemInit+0x64>)
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <SystemInit+0x64>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <SystemInit+0x64>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043a6:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <SystemInit+0x64>)
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <SystemInit+0x64>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <SystemInit+0x64>)
 80043b8:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <SystemInit+0x68>)
 80043ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <SystemInit+0x64>)
 80043be:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <SystemInit+0x64>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <SystemInit+0x64>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80043ce:	f000 f80d 	bl	80043ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d2:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <SystemInit+0x60>)
 80043d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043d8:	609a      	str	r2, [r3, #8]
#endif
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	e000ed00 	.word	0xe000ed00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	24003010 	.word	0x24003010

080043ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	2300      	movs	r3, #0
 80043f8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80043fa:	4a41      	ldr	r2, [pc, #260]	; (8004500 <SetSysClock+0x114>)
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <SetSysClock+0x114>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004406:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <SetSysClock+0x114>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <SetSysClock+0x38>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004422:	d1f0      	bne.n	8004406 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004424:	4b36      	ldr	r3, [pc, #216]	; (8004500 <SetSysClock+0x114>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004430:	2301      	movs	r3, #1
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	e001      	b.n	800443a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004436:	2300      	movs	r3, #0
 8004438:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d142      	bne.n	80044c6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <SetSysClock+0x114>)
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <SetSysClock+0x114>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800444c:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <SetSysClock+0x118>)
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <SetSysClock+0x118>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004456:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <SetSysClock+0x114>)
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <SetSysClock+0x114>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <SetSysClock+0x114>)
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <SetSysClock+0x114>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <SetSysClock+0x114>)
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <SetSysClock+0x114>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004476:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004478:	4b21      	ldr	r3, [pc, #132]	; (8004500 <SetSysClock+0x114>)
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <SetSysClock+0x11c>)
 800447c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800447e:	4a20      	ldr	r2, [pc, #128]	; (8004500 <SetSysClock+0x114>)
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <SetSysClock+0x114>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004488:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800448a:	bf00      	nop
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <SetSysClock+0x114>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f9      	beq.n	800448c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <SetSysClock+0x120>)
 800449a:	f240 6205 	movw	r2, #1541	; 0x605
 800449e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80044a0:	4a17      	ldr	r2, [pc, #92]	; (8004500 <SetSysClock+0x114>)
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <SetSysClock+0x114>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <SetSysClock+0x114>)
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <SetSysClock+0x114>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80044b8:	bf00      	nop
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <SetSysClock+0x114>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d1f9      	bne.n	80044ba <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <SetSysClock+0x114>)
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <SetSysClock+0x114>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044d0:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <SetSysClock+0x114>)
 80044d4:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <SetSysClock+0x124>)
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <SetSysClock+0x114>)
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <SetSysClock+0x114>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044e4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80044e6:	bf00      	nop
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <SetSysClock+0x114>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f9      	beq.n	80044e8 <SetSysClock+0xfc>
  {
  }
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	07405408 	.word	0x07405408
 800450c:	40023c00 	.word	0x40023c00
 8004510:	30004080 	.word	0x30004080

08004514 <update_selector_state>:

/*
 * Gets and updated the state of both the selector rotary switches
 * This funtion is called by the tim2 interrupt handler
 */
void update_selector_state (){
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7) == 1){
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	483b      	ldr	r0, [pc, #236]	; (8004608 <update_selector_state+0xf4>)
 800451c:	f7fd f912 	bl	8001744 <GPIO_ReadInputDataBit>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d103      	bne.n	800452e <update_selector_state+0x1a>
		vfo_state = sine;
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <update_selector_state+0xf8>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e02e      	b.n	800458c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8) == 1){
 800452e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <update_selector_state+0xf4>)
 8004534:	f7fd f906 	bl	8001744 <GPIO_ReadInputDataBit>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d103      	bne.n	8004546 <update_selector_state+0x32>
		vfo_state = sawtooth;
 800453e:	4b33      	ldr	r3, [pc, #204]	; (800460c <update_selector_state+0xf8>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e022      	b.n	800458c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9) == 1){
 8004546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454a:	482f      	ldr	r0, [pc, #188]	; (8004608 <update_selector_state+0xf4>)
 800454c:	f7fd f8fa 	bl	8001744 <GPIO_ReadInputDataBit>
 8004550:	4603      	mov	r3, r0
 8004552:	2b01      	cmp	r3, #1
 8004554:	d103      	bne.n	800455e <update_selector_state+0x4a>
		vfo_state = square;
 8004556:	4b2d      	ldr	r3, [pc, #180]	; (800460c <update_selector_state+0xf8>)
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e016      	b.n	800458c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_10) == 1){
 800455e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004562:	4829      	ldr	r0, [pc, #164]	; (8004608 <update_selector_state+0xf4>)
 8004564:	f7fd f8ee 	bl	8001744 <GPIO_ReadInputDataBit>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d103      	bne.n	8004576 <update_selector_state+0x62>
		vfo_state = triangle;
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <update_selector_state+0xf8>)
 8004570:	2203      	movs	r2, #3
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e00a      	b.n	800458c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11) == 1){
 8004576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800457a:	4823      	ldr	r0, [pc, #140]	; (8004608 <update_selector_state+0xf4>)
 800457c:	f7fd f8e2 	bl	8001744 <GPIO_ReadInputDataBit>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d102      	bne.n	800458c <update_selector_state+0x78>
		vfo_state = other2;
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <update_selector_state+0xf8>)
 8004588:	2204      	movs	r2, #4
 800458a:	701a      	strb	r2, [r3, #0]
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
 800458c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004590:	481d      	ldr	r0, [pc, #116]	; (8004608 <update_selector_state+0xf4>)
 8004592:	f7fd f8d7 	bl	8001744 <GPIO_ReadInputDataBit>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d103      	bne.n	80045a4 <update_selector_state+0x90>
		lfo_state = sine;
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <update_selector_state+0xfc>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80045a2:	e02e      	b.n	8004602 <update_selector_state+0xee>
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
 80045a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045a8:	4817      	ldr	r0, [pc, #92]	; (8004608 <update_selector_state+0xf4>)
 80045aa:	f7fd f8cb 	bl	8001744 <GPIO_ReadInputDataBit>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d103      	bne.n	80045bc <update_selector_state+0xa8>
		lfo_state = sawtooth;
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <update_selector_state+0xfc>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80045ba:	e022      	b.n	8004602 <update_selector_state+0xee>

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
 80045bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045c0:	4811      	ldr	r0, [pc, #68]	; (8004608 <update_selector_state+0xf4>)
 80045c2:	f7fd f8bf 	bl	8001744 <GPIO_ReadInputDataBit>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d103      	bne.n	80045d4 <update_selector_state+0xc0>
		lfo_state = square;
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <update_selector_state+0xfc>)
 80045ce:	2202      	movs	r2, #2
 80045d0:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80045d2:	e016      	b.n	8004602 <update_selector_state+0xee>
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
 80045d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045d8:	480b      	ldr	r0, [pc, #44]	; (8004608 <update_selector_state+0xf4>)
 80045da:	f7fd f8b3 	bl	8001744 <GPIO_ReadInputDataBit>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d103      	bne.n	80045ec <update_selector_state+0xd8>
		lfo_state = triangle;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <update_selector_state+0xfc>)
 80045e6:	2203      	movs	r2, #3
 80045e8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80045ea:	e00a      	b.n	8004602 <update_selector_state+0xee>
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
 80045ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045f0:	4808      	ldr	r0, [pc, #32]	; (8004614 <update_selector_state+0x100>)
 80045f2:	f7fd f8a7 	bl	8001744 <GPIO_ReadInputDataBit>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <update_selector_state+0xee>
		lfo_state = other2;
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <update_selector_state+0xfc>)
 80045fe:	2204      	movs	r2, #4
 8004600:	701a      	strb	r2, [r3, #0]
	}
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	20000504 	.word	0x20000504
 8004610:	20000505 	.word	0x20000505
 8004614:	40020800 	.word	0x40020800

08004618 <arm_sin_f32>:
 8004618:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004684 <arm_sin_f32+0x6c>
 800461c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004620:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800462c:	d504      	bpl.n	8004638 <arm_sin_f32+0x20>
 800462e:	ee17 3a90 	vmov	r3, s15
 8004632:	3b01      	subs	r3, #1
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004688 <arm_sin_f32+0x70>
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <arm_sin_f32+0x74>)
 8004642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004646:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800464a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800464e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004652:	ee16 3a90 	vmov	r3, s13
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee06 3a90 	vmov	s13, r3
 800465e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8004662:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800466a:	edd1 6a00 	vldr	s13, [r1]
 800466e:	ed91 7a01 	vldr	s14, [r1, #4]
 8004672:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800467a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800467e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004682:	4770      	bx	lr
 8004684:	3e22f983 	.word	0x3e22f983
 8004688:	44000000 	.word	0x44000000
 800468c:	080046fc 	.word	0x080046fc

08004690 <__libc_init_array>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <__libc_init_array+0x3c>)
 8004694:	4c0e      	ldr	r4, [pc, #56]	; (80046d0 <__libc_init_array+0x40>)
 8004696:	1ae4      	subs	r4, r4, r3
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	2500      	movs	r5, #0
 800469c:	461e      	mov	r6, r3
 800469e:	42a5      	cmp	r5, r4
 80046a0:	d004      	beq.n	80046ac <__libc_init_array+0x1c>
 80046a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a6:	4798      	blx	r3
 80046a8:	3501      	adds	r5, #1
 80046aa:	e7f8      	b.n	800469e <__libc_init_array+0xe>
 80046ac:	f000 f816 	bl	80046dc <_init>
 80046b0:	4c08      	ldr	r4, [pc, #32]	; (80046d4 <__libc_init_array+0x44>)
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <__libc_init_array+0x48>)
 80046b4:	1ae4      	subs	r4, r4, r3
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2500      	movs	r5, #0
 80046ba:	461e      	mov	r6, r3
 80046bc:	42a5      	cmp	r5, r4
 80046be:	d004      	beq.n	80046ca <__libc_init_array+0x3a>
 80046c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c4:	4798      	blx	r3
 80046c6:	3501      	adds	r5, #1
 80046c8:	e7f8      	b.n	80046bc <__libc_init_array+0x2c>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	08004f00 	.word	0x08004f00
 80046d0:	08004f00 	.word	0x08004f00
 80046d4:	08004f04 	.word	0x08004f04
 80046d8:	08004f00 	.word	0x08004f00

080046dc <_init>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	bf00      	nop
 80046e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e2:	bc08      	pop	{r3}
 80046e4:	469e      	mov	lr, r3
 80046e6:	4770      	bx	lr

080046e8 <_fini>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr
