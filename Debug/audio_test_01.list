
C:\stm32_workspace\audio_test_01\Debug\audio_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  08004918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  7 .bss          000003d0  20000094  20000094  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000464  20000464  00020094  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000affb  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001caf  00000000  00000000  0002b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000de0  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c80  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000051e8  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000046da  00000000  00000000  000339b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  00038092  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000039fc  00000000  00000000  00038180  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040dc 	.word	0x080040dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	080040dc 	.word	0x080040dc

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000296:	f001 f967 	bl	8001568 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800029a:	2100      	movs	r1, #0
 800029c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a0:	f001 f962 	bl	8001568 <RCC_APB2PeriphResetCmd>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ca:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d6:	4313      	orrs	r3, r2
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4313      	orrs	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <ADC_Init+0xa8>)
 80002ee:	4013      	ands	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000300:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000308:	4313      	orrs	r3, r2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4313      	orrs	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	7d1b      	ldrb	r3, [r3, #20]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4313      	orrs	r3, r2
 8000330:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000332:	7afb      	ldrb	r3, [r7, #11]
 8000334:	051b      	lsls	r3, r3, #20
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	c0fff7fd 	.word	0xc0fff7fd

08000354 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2201      	movs	r2, #1
 8000384:	751a      	strb	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <ADC_CommonInit+0x48>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <ADC_CommonInit+0x4c>)
 80003aa:	4013      	ands	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003b6:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003bc:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003c2:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <ADC_CommonInit+0x48>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	6053      	str	r3, [r2, #4]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40012300 	.word	0x40012300
 80003e0:	fffc30e0 	.word	0xfffc30e0

080003e4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f043 0201 	orr.w	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800042e:	e005      	b.n	800043c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f023 0201 	bic.w	r2, r3, #1
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
  }
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	4608      	mov	r0, r1
 8000452:	4611      	mov	r1, r2
 8000454:	461a      	mov	r2, r3
 8000456:	4603      	mov	r3, r0
 8000458:	70fb      	strb	r3, [r7, #3]
 800045a:	460b      	mov	r3, r1
 800045c:	70bb      	strb	r3, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	2b09      	cmp	r3, #9
 800046e:	d923      	bls.n	80004b8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000476:	78fb      	ldrb	r3, [r7, #3]
 8000478:	f1a3 020a 	sub.w	r2, r3, #10
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	2207      	movs	r2, #7
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	43db      	mvns	r3, r3
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000494:	7879      	ldrb	r1, [r7, #1]
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	f1a3 020a 	sub.w	r2, r3, #10
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	e01e      	b.n	80004f6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004be:	78fa      	ldrb	r2, [r7, #3]
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	2207      	movs	r2, #7
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	43db      	mvns	r3, r3
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004d8:	7879      	ldrb	r1, [r7, #1]
 80004da:	78fa      	ldrb	r2, [r7, #3]
 80004dc:	4613      	mov	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004f6:	78bb      	ldrb	r3, [r7, #2]
 80004f8:	2b06      	cmp	r3, #6
 80004fa:	d821      	bhi.n	8000540 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000500:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000502:	78bb      	ldrb	r3, [r7, #2]
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	221f      	movs	r2, #31
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	43db      	mvns	r3, r3
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800051e:	78f9      	ldrb	r1, [r7, #3]
 8000520:	78bb      	ldrb	r3, [r7, #2]
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4313      	orrs	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800053e:	e047      	b.n	80005d0 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000540:	78bb      	ldrb	r3, [r7, #2]
 8000542:	2b0c      	cmp	r3, #12
 8000544:	d821      	bhi.n	800058a <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800054c:	78bb      	ldrb	r3, [r7, #2]
 800054e:	1fda      	subs	r2, r3, #7
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	221f      	movs	r2, #31
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	43db      	mvns	r3, r3
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000568:	78f9      	ldrb	r1, [r7, #3]
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	1fda      	subs	r2, r3, #7
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4313      	orrs	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000588:	e022      	b.n	80005d0 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000590:	78bb      	ldrb	r3, [r7, #2]
 8000592:	f1a3 020d 	sub.w	r2, r3, #13
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	221f      	movs	r2, #31
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80005ae:	78f9      	ldrb	r1, [r7, #3]
 80005b0:	78bb      	ldrb	r3, [r7, #2]
 80005b2:	f1a3 020d 	sub.w	r2, r3, #13
 80005b6:	4613      	mov	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80005fa:	e005      	b.n	8000608 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	609a      	str	r2, [r3, #8]
  }
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000632:	e005      	b.n	8000640 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
  }
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <DAC_Init+0x64>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000664:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	4013      	ands	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000684:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800068a:	4313      	orrs	r3, r2
 800068c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4313      	orrs	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <DAC_Init+0x64>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40007400 	.word	0x40007400

080006b4 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d009      	beq.n	80006da <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <DAC_Cmd+0x48>)
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <DAC_Cmd+0x48>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	2001      	movs	r0, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	fa00 f303 	lsl.w	r3, r0, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80006d8:	e009      	b.n	80006ee <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <DAC_Cmd+0x48>)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <DAC_Cmd+0x48>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	2001      	movs	r0, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	fa00 f303 	lsl.w	r3, r0, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40007400 	.word	0x40007400

08000700 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <DAC_SetChannel1Data+0x34>)
 8000712:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	3308      	adds	r3, #8
 800071c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	461a      	mov	r2, r3
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	6013      	str	r3, [r2, #0]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40007400 	.word	0x40007400

08000738 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f023 0201 	bic.w	r2, r3, #1
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2221      	movs	r2, #33	; 0x21
 800076e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a46      	ldr	r2, [pc, #280]	; (800088c <DMA_DeInit+0x154>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d103      	bne.n	8000780 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000778:	4b45      	ldr	r3, [pc, #276]	; (8000890 <DMA_DeInit+0x158>)
 800077a:	223d      	movs	r2, #61	; 0x3d
 800077c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800077e:	e07e      	b.n	800087e <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a44      	ldr	r2, [pc, #272]	; (8000894 <DMA_DeInit+0x15c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d104      	bne.n	8000792 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000788:	4b41      	ldr	r3, [pc, #260]	; (8000890 <DMA_DeInit+0x158>)
 800078a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800078e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000790:	e075      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a40      	ldr	r2, [pc, #256]	; (8000898 <DMA_DeInit+0x160>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d104      	bne.n	80007a4 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <DMA_DeInit+0x158>)
 800079c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80007a0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007a2:	e06c      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a3d      	ldr	r2, [pc, #244]	; (800089c <DMA_DeInit+0x164>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d104      	bne.n	80007b6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <DMA_DeInit+0x158>)
 80007ae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80007b2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007b4:	e063      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a39      	ldr	r2, [pc, #228]	; (80008a0 <DMA_DeInit+0x168>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d103      	bne.n	80007c6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <DMA_DeInit+0x158>)
 80007c0:	4a38      	ldr	r2, [pc, #224]	; (80008a4 <DMA_DeInit+0x16c>)
 80007c2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007c4:	e05b      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <DMA_DeInit+0x170>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d103      	bne.n	80007d6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <DMA_DeInit+0x158>)
 80007d0:	4a36      	ldr	r2, [pc, #216]	; (80008ac <DMA_DeInit+0x174>)
 80007d2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007d4:	e053      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <DMA_DeInit+0x178>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d103      	bne.n	80007e6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <DMA_DeInit+0x158>)
 80007e0:	4a34      	ldr	r2, [pc, #208]	; (80008b4 <DMA_DeInit+0x17c>)
 80007e2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007e4:	e04b      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a33      	ldr	r2, [pc, #204]	; (80008b8 <DMA_DeInit+0x180>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d104      	bne.n	80007f8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <DMA_DeInit+0x158>)
 80007f0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80007f4:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80007f6:	e042      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <DMA_DeInit+0x184>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d103      	bne.n	8000808 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <DMA_DeInit+0x188>)
 8000802:	223d      	movs	r2, #61	; 0x3d
 8000804:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000806:	e03a      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <DMA_DeInit+0x18c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d104      	bne.n	800081a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <DMA_DeInit+0x188>)
 8000812:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000816:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000818:	e031      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <DMA_DeInit+0x190>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d104      	bne.n	800082c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <DMA_DeInit+0x188>)
 8000824:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000828:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800082a:	e028      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a27      	ldr	r2, [pc, #156]	; (80008cc <DMA_DeInit+0x194>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d104      	bne.n	800083e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <DMA_DeInit+0x188>)
 8000836:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800083a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800083c:	e01f      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <DMA_DeInit+0x198>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d103      	bne.n	800084e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <DMA_DeInit+0x188>)
 8000848:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <DMA_DeInit+0x16c>)
 800084a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800084c:	e017      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <DMA_DeInit+0x19c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d103      	bne.n	800085e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <DMA_DeInit+0x188>)
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <DMA_DeInit+0x174>)
 800085a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800085c:	e00f      	b.n	800087e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <DMA_DeInit+0x1a0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d103      	bne.n	800086e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <DMA_DeInit+0x188>)
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <DMA_DeInit+0x17c>)
 800086a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800086c:	e007      	b.n	800087e <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <DMA_DeInit+0x1a4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d103      	bne.n	800087e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <DMA_DeInit+0x188>)
 8000878:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800087c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40026010 	.word	0x40026010
 8000890:	40026000 	.word	0x40026000
 8000894:	40026028 	.word	0x40026028
 8000898:	40026040 	.word	0x40026040
 800089c:	40026058 	.word	0x40026058
 80008a0:	40026070 	.word	0x40026070
 80008a4:	2000003d 	.word	0x2000003d
 80008a8:	40026088 	.word	0x40026088
 80008ac:	20000f40 	.word	0x20000f40
 80008b0:	400260a0 	.word	0x400260a0
 80008b4:	203d0000 	.word	0x203d0000
 80008b8:	400260b8 	.word	0x400260b8
 80008bc:	40026410 	.word	0x40026410
 80008c0:	40026400 	.word	0x40026400
 80008c4:	40026428 	.word	0x40026428
 80008c8:	40026440 	.word	0x40026440
 80008cc:	40026458 	.word	0x40026458
 80008d0:	40026470 	.word	0x40026470
 80008d4:	40026488 	.word	0x40026488
 80008d8:	400264a0 	.word	0x400264a0
 80008dc:	400264b8 	.word	0x400264b8

080008e0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <DMA_Init+0xac>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800090a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000916:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000922:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800092e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000934:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 0307 	bic.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4313      	orrs	r3, r2
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	f01c803f 	.word	0xf01c803f

08000990 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f043 0201 	orr.w	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000a1e:	e005      	b.n	8000a2c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f023 0201 	bic.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <DMA_GetFlagStatus+0x6c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d802      	bhi.n	8000a58 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <DMA_GetFlagStatus+0x70>)
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e001      	b.n	8000a5c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <DMA_GetFlagStatus+0x74>)
 8000a5a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e002      	b.n	8000a74 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000a7a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	75fb      	strb	r3, [r7, #23]
 8000a8e:	e001      	b.n	8000a94 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	371c      	adds	r7, #28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	4002640f 	.word	0x4002640f
 8000aa8:	40026000 	.word	0x40026000
 8000aac:	40026400 	.word	0x40026400

08000ab0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <DMA_ClearFlag+0x50>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d802      	bhi.n	8000ac8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <DMA_ClearFlag+0x54>)
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e001      	b.n	8000acc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <DMA_ClearFlag+0x58>)
 8000aca:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000adc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000ae4:	e006      	b.n	8000af4 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000aec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	6093      	str	r3, [r2, #8]
  }    
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	4002640f 	.word	0x4002640f
 8000b04:	40026000 	.word	0x40026000
 8000b08:	40026400 	.word	0x40026400

08000b0c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00f      	beq.n	8000b44 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	e005      	b.n	8000b44 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b80      	cmp	r3, #128	; 0x80
 8000b48:	d014      	beq.n	8000b74 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	f003 031e 	and.w	r3, r3, #30
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000b60:	e008      	b.n	8000b74 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	f003 031e 	and.w	r3, r3, #30
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <EXTI_Init+0xe0>)
 8000b8e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	799b      	ldrb	r3, [r3, #6]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d04f      	beq.n	8000c38 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000b98:	4931      	ldr	r1, [pc, #196]	; (8000c60 <EXTI_Init+0xe0>)
 8000b9a:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <EXTI_Init+0xe0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ba8:	492d      	ldr	r1, [pc, #180]	; (8000c60 <EXTI_Init+0xe0>)
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <EXTI_Init+0xe0>)
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000bd2:	4923      	ldr	r1, [pc, #140]	; (8000c60 <EXTI_Init+0xe0>)
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <EXTI_Init+0xe0>)
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4013      	ands	r3, r2
 8000be0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000be2:	491f      	ldr	r1, [pc, #124]	; (8000c60 <EXTI_Init+0xe0>)
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <EXTI_Init+0xe0>)
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	795b      	ldrb	r3, [r3, #5]
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d10e      	bne.n	8000c18 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000bfa:	4919      	ldr	r1, [pc, #100]	; (8000c60 <EXTI_Init+0xe0>)
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <EXTI_Init+0xe0>)
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000c08:	4915      	ldr	r1, [pc, #84]	; (8000c60 <EXTI_Init+0xe0>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <EXTI_Init+0xe0>)
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000c16:	e01d      	b.n	8000c54 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <EXTI_Init+0xe0>)
 8000c1a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	461a      	mov	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4413      	add	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	6811      	ldr	r1, [r2, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000c36:	e00d      	b.n	8000c54 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	43d2      	mvns	r2, r2
 8000c50:	400a      	ands	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
  }
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40013c00 	.word	0x40013c00

08000c64 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e076      	b.n	8000d6e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c80:	2201      	movs	r2, #1
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d165      	bne.n	8000d68 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	401a      	ands	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d003      	beq.n	8000cda <GPIO_Init+0x76>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d12e      	bne.n	8000d38 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	401a      	ands	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	799b      	ldrb	r3, [r3, #6]
 8000d26:	4619      	mov	r1, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2103      	movs	r1, #3
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	79db      	ldrb	r3, [r3, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d985      	bls.n	8000c80 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	71da      	strb	r2, [r3, #7]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e001      	b.n	8000dda <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	887a      	ldrh	r2, [r7, #2]
 8000e02:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000e04:	e002      	b.n	8000e0c <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	835a      	strh	r2, [r3, #26]
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e30:	787a      	ldrb	r2, [r7, #1]
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	210f      	movs	r1, #15
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	ea02 0103 	and.w	r1, r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f100 0208 	add.w	r2, r0, #8
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <I2C_DeInit+0x68>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10a      	bne.n	8000ed2 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ec2:	f000 fb31 	bl	8001528 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ecc:	f000 fb2c 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000ed0:	e01c      	b.n	8000f0c <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <I2C_DeInit+0x6c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10a      	bne.n	8000ef0 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000eda:	2101      	movs	r1, #1
 8000edc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ee0:	f000 fb22 	bl	8001528 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000eea:	f000 fb1d 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8000eee:	e00d      	b.n	8000f0c <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <I2C_DeInit+0x70>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d109      	bne.n	8000f0c <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000efe:	f000 fb13 	bl	8001528 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8000f02:	2100      	movs	r1, #0
 8000f04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f08:	f000 fb0e 	bl	8001528 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	40005c00 	.word	0x40005c00

08000f20 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f2e:	2300      	movs	r3, #0
 8000f30:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000f32:	2304      	movs	r3, #4
 8000f34:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <I2C_Init+0x174>)
 8000f38:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	889b      	ldrh	r3, [r3, #4]
 8000f3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f46:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f9e1 	bl	8001314 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <I2C_Init+0x178>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0c9b      	lsrs	r3, r3, #18
 8000f60:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f66:	4313      	orrs	r3, r2
 8000f68:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f6e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a44      	ldr	r2, [pc, #272]	; (800109c <I2C_Init+0x17c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d815      	bhi.n	8000fba <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d801      	bhi.n	8000fa6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000fa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000faa:	4313      	orrs	r3, r2
 8000fac:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	841a      	strh	r2, [r3, #32]
 8000fb8:	e040      	b.n	800103c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	88db      	ldrh	r3, [r3, #6]
 8000fbe:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d109      	bne.n	8000fda <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fd8:	e00e      	b.n	8000ff8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009a      	lsls	r2, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800100a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800100c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800100e:	4313      	orrs	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800101a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800101c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800101e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <I2C_Init+0x180>)
 8001028:	fb82 1203 	smull	r1, r2, r2, r3
 800102c:	1192      	asrs	r2, r2, #6
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001040:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800105a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800105e:	f023 0302 	bic.w	r3, r3, #2
 8001062:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	889a      	ldrh	r2, [r3, #4]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	895b      	ldrh	r3, [r3, #10]
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001072:	4313      	orrs	r3, r2
 8001074:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800107a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	899a      	ldrh	r2, [r3, #12]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	891b      	ldrh	r3, [r3, #8]
 8001084:	4313      	orrs	r3, r2
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	811a      	strh	r2, [r3, #8]
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	007a1200 	.word	0x007a1200
 8001098:	431bde83 	.word	0x431bde83
 800109c:	000186a0 	.word	0x000186a0
 80010a0:	10624dd3 	.word	0x10624dd3

080010a4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80010c6:	e007      	b.n	80010d8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	801a      	strh	r2, [r3, #0]
  }
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001106:	e007      	b.n	8001118 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	801a      	strh	r2, [r3, #0]
  }
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001146:	e007      	b.n	8001158 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	801a      	strh	r2, [r3, #0]
  }
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001174:	78bb      	ldrb	r3, [r7, #2]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	e003      	b.n	800118c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	821a      	strh	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 80011c2:	e007      	b.n	80011d4 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	801a      	strh	r2, [r3, #0]
  }
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	821a      	strh	r2, [r3, #16]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8a1b      	ldrh	r3, [r3, #16]
 800120c:	b29b      	uxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	8a9b      	ldrh	r3, [r3, #20]
 800123a:	b29b      	uxth	r3, r3
 800123c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	8b1b      	ldrh	r3, [r3, #24]
 8001242:	b29b      	uxth	r3, r3
 8001244:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	041b      	lsls	r3, r3, #16
 800124a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4313      	orrs	r3, r2
 8001252:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001256:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	401a      	ands	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d102      	bne.n	800126a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001264:	2301      	movs	r3, #1
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	e001      	b.n	800126e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	0f1b      	lsrs	r3, r3, #28
 800129a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012a2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3314      	adds	r3, #20
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e005      	b.n	80012be <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3318      	adds	r3, #24
 80012bc:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	e001      	b.n	80012d4 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012f8:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	829a      	strh	r2, [r3, #20]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <RCC_GetClocksFreq+0x144>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d007      	beq.n	8001354 <RCC_GetClocksFreq+0x40>
 8001344:	2b08      	cmp	r3, #8
 8001346:	d009      	beq.n	800135c <RCC_GetClocksFreq+0x48>
 8001348:	2b00      	cmp	r3, #0
 800134a:	d13f      	bne.n	80013cc <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a43      	ldr	r2, [pc, #268]	; (800145c <RCC_GetClocksFreq+0x148>)
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e03f      	b.n	80013d4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a42      	ldr	r2, [pc, #264]	; (8001460 <RCC_GetClocksFreq+0x14c>)
 8001358:	601a      	str	r2, [r3, #0]
      break;
 800135a:	e03b      	b.n	80013d4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800135c:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <RCC_GetClocksFreq+0x144>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001364:	0d9b      	lsrs	r3, r3, #22
 8001366:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001368:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <RCC_GetClocksFreq+0x144>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001370:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <RCC_GetClocksFreq+0x14c>)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <RCC_GetClocksFreq+0x144>)
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001388:	400b      	ands	r3, r1
 800138a:	099b      	lsrs	r3, r3, #6
 800138c:	fb03 f302 	mul.w	r3, r3, r2
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	e00c      	b.n	80013ae <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <RCC_GetClocksFreq+0x148>)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	fbb2 f2f3 	udiv	r2, r2, r3
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <RCC_GetClocksFreq+0x144>)
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013a4:	400b      	ands	r3, r1
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	fb03 f302 	mul.w	r3, r3, r2
 80013ac:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <RCC_GetClocksFreq+0x144>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b6:	0c1b      	lsrs	r3, r3, #16
 80013b8:	3301      	adds	r3, #1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
      break;
 80013ca:	e003      	b.n	80013d4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <RCC_GetClocksFreq+0x148>)
 80013d0:	601a      	str	r2, [r3, #0]
      break;
 80013d2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <RCC_GetClocksFreq+0x144>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013dc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <RCC_GetClocksFreq+0x150>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	40da      	lsrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <RCC_GetClocksFreq+0x144>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001404:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	0a9b      	lsrs	r3, r3, #10
 800140a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <RCC_GetClocksFreq+0x150>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	40da      	lsrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <RCC_GetClocksFreq+0x144>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800142c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	0b5b      	lsrs	r3, r3, #13
 8001432:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <RCC_GetClocksFreq+0x150>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	40da      	lsrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40023800 	.word	0x40023800
 800145c:	00f42400 	.word	0x00f42400
 8001460:	007a1200 	.word	0x007a1200
 8001464:	20000000 	.word	0x20000000

08001468 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800147a:	490a      	ldr	r1, [pc, #40]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800147e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001486:	e006      	b.n	8001496 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001488:	4906      	ldr	r1, [pc, #24]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	43db      	mvns	r3, r3
 8001492:	4013      	ands	r3, r2
 8001494:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014c6:	e006      	b.n	80014d6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <RCC_APB1PeriphClockCmd+0x3c>)
 80014cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4013      	ands	r3, r2
 80014d4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 80014fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001506:	e006      	b.n	8001516 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <RCC_APB2PeriphClockCmd+0x3c>)
 800150c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	43db      	mvns	r3, r3
 8001512:	4013      	ands	r3, r2
 8001514:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001546:	e006      	b.n	8001556 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <RCC_APB1PeriphResetCmd+0x3c>)
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43db      	mvns	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	620b      	str	r3, [r1, #32]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800

08001568 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <RCC_APB2PeriphResetCmd+0x3c>)
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <RCC_APB2PeriphResetCmd+0x3c>)
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4313      	orrs	r3, r2
 8001584:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001586:	e006      	b.n	8001596 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <RCC_APB2PeriphResetCmd+0x3c>)
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <RCC_APB2PeriphResetCmd+0x3c>)
 800158c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	43db      	mvns	r3, r3
 8001592:	4013      	ands	r3, r2
 8001594:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <SPI_I2S_DeInit+0xc4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10a      	bne.n	80015ce <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80015b8:	2101      	movs	r1, #1
 80015ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015be:	f7ff ffd3 	bl	8001568 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015c8:	f7ff ffce 	bl	8001568 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80015cc:	e049      	b.n	8001662 <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <SPI_I2S_DeInit+0xc8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10a      	bne.n	80015ec <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80015d6:	2101      	movs	r1, #1
 80015d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015dc:	f7ff ffa4 	bl	8001528 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80015e0:	2100      	movs	r1, #0
 80015e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e6:	f7ff ff9f 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80015ea:	e03a      	b.n	8001662 <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SPI_I2S_DeInit+0xcc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d10a      	bne.n	800160a <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80015f4:	2101      	movs	r1, #1
 80015f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015fa:	f7ff ff95 	bl	8001528 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80015fe:	2100      	movs	r1, #0
 8001600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001604:	f7ff ff90 	bl	8001528 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001608:	e02b      	b.n	8001662 <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <SPI_I2S_DeInit+0xd0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10a      	bne.n	8001628 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001612:	2101      	movs	r1, #1
 8001614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001618:	f7ff ffa6 	bl	8001568 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 800161c:	2100      	movs	r1, #0
 800161e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001622:	f7ff ffa1 	bl	8001568 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001626:	e01c      	b.n	8001662 <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <SPI_I2S_DeInit+0xd4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10a      	bne.n	8001646 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001630:	2101      	movs	r1, #1
 8001632:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001636:	f7ff ff97 	bl	8001568 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 800163a:	2100      	movs	r1, #0
 800163c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001640:	f7ff ff92 	bl	8001568 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001644:	e00d      	b.n	8001662 <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <SPI_I2S_DeInit+0xd8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d109      	bne.n	8001662 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800164e:	2101      	movs	r1, #1
 8001650:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001654:	f7ff ff88 	bl	8001568 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001658:	2100      	movs	r1, #0
 800165a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800165e:	f7ff ff83 	bl	8001568 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40013000 	.word	0x40013000
 8001670:	40003800 	.word	0x40003800
 8001674:	40003c00 	.word	0x40003c00
 8001678:	40013400 	.word	0x40013400
 800167c:	40015000 	.word	0x40015000
 8001680:	40015400 	.word	0x40015400

08001684 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800168e:	2300      	movs	r3, #0
 8001690:	837b      	strh	r3, [r7, #26]
 8001692:	2302      	movs	r3, #2
 8001694:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001696:	2300      	movs	r3, #0
 8001698:	84bb      	strh	r3, [r7, #36]	; 0x24
 800169a:	2301      	movs	r3, #1
 800169c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8b9b      	ldrh	r3, [r3, #28]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016bc:	f023 030f 	bic.w	r3, r3, #15
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	8b9b      	ldrh	r3, [r3, #28]
 80016d0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d104      	bne.n	80016e4 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80016da:	2300      	movs	r3, #0
 80016dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80016de:	2302      	movs	r3, #2
 80016e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016e2:	e072      	b.n	80017ca <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	889b      	ldrh	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80016f0:	e001      	b.n	80016f6 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <I2S_Init+0x1a8>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001702:	4a4a      	ldr	r2, [pc, #296]	; (800182c <I2S_Init+0x1a8>)
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <I2S_Init+0x1a8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800170c:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <I2S_Init+0x1a8>)
 8001710:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001718:	4013      	ands	r3, r2
 800171a:	099b      	lsrs	r3, r3, #6
 800171c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001720:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <I2S_Init+0x1a8>)
 8001724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001728:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800172c:	0f1b      	lsrs	r3, r3, #28
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <I2S_Init+0x1a8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800173e:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <I2S_Init+0x1ac>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	fb02 f203 	mul.w	r2, r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	88db      	ldrh	r3, [r3, #6]
 8001758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175c:	d10f      	bne.n	800177e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	0a1a      	lsrs	r2, r3, #8
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	3305      	adds	r3, #5
 8001778:	b29b      	uxth	r3, r3
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e012      	b.n	80017a4 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800177e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	461a      	mov	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fbb3 f2f2 	udiv	r2, r3, r2
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	3305      	adds	r3, #5
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <I2S_Init+0x1b0>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80017ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80017c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80017ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d902      	bls.n	80017d6 <I2S_Init+0x152>
 80017d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d903      	bls.n	80017de <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	88da      	ldrh	r2, [r3, #6]
 80017e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	8859      	ldrh	r1, [r3, #2]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001802:	4303      	orrs	r3, r0
 8001804:	b29b      	uxth	r3, r3
 8001806:	430b      	orrs	r3, r1
 8001808:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800180a:	4313      	orrs	r3, r2
 800180c:	b29a      	uxth	r2, r3
 800180e:	8b7b      	ldrh	r3, [r7, #26]
 8001810:	4313      	orrs	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b7a      	ldrh	r2, [r7, #26]
 800181e:	839a      	strh	r2, [r3, #28]
}
 8001820:	bf00      	nop
 8001822:	372c      	adds	r7, #44	; 0x2c
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40023800 	.word	0x40023800
 8001830:	007a1200 	.word	0x007a1200
 8001834:	cccccccd 	.word	0xcccccccd

08001838 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	8b9b      	ldrh	r3, [r3, #28]
 800184e:	b29b      	uxth	r3, r3
 8001850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800185a:	e007      	b.n	800186c <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	8b9b      	ldrh	r3, [r3, #28]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	839a      	strh	r2, [r3, #28]
  }
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	819a      	strh	r2, [r3, #12]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 80018be:	e009      	b.n	80018d4 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	889b      	ldrh	r3, [r3, #4]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	809a      	strh	r2, [r3, #4]
  }
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80018f0:	2300      	movs	r3, #0
 80018f2:	81fb      	strh	r3, [r7, #14]
 80018f4:	2300      	movs	r3, #0
 80018f6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	2201      	movs	r2, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800190a:	78bb      	ldrb	r3, [r7, #2]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	889b      	ldrh	r3, [r3, #4]
 8001914:	b29a      	uxth	r2, r3
 8001916:	89bb      	ldrh	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8001920:	e009      	b.n	8001936 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	b29a      	uxth	r2, r3
 8001928:	89bb      	ldrh	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	4013      	ands	r3, r2
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	809a      	strh	r2, [r3, #4]
  }
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	891b      	ldrh	r3, [r3, #8]
 8001958:	b29a      	uxth	r2, r3
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	4013      	ands	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800197c:	b490      	push	{r4, r7}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	460a      	mov	r2, r1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <SYSCFG_EXTILineConfig+0x80>)
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	4a14      	ldr	r2, [pc, #80]	; (80019fc <SYSCFG_EXTILineConfig+0x80>)
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	1c83      	adds	r3, r0, #2
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <SYSCFG_EXTILineConfig+0x80>)
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461c      	mov	r4, r3
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <SYSCFG_EXTILineConfig+0x80>)
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019dc:	79f9      	ldrb	r1, [r7, #7]
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	1ca3      	adds	r3, r4, #2
 80019ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc90      	pop	{r4, r7}
 80019fa:	4770      	bx	lr
 80019fc:	40013800 	.word	0x40013800

08001a00 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a29      	ldr	r2, [pc, #164]	; (8001abc <TIM_TimeBaseInit+0xbc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <TIM_TimeBaseInit+0x44>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <TIM_TimeBaseInit+0xc0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00f      	beq.n	8001a44 <TIM_TimeBaseInit+0x44>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2a:	d00b      	beq.n	8001a44 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <TIM_TimeBaseInit+0xc4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <TIM_TimeBaseInit+0x44>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <TIM_TimeBaseInit+0xc8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <TIM_TimeBaseInit+0xcc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d108      	bne.n	8001a56 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	885a      	ldrh	r2, [r3, #2]
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <TIM_TimeBaseInit+0xd0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00c      	beq.n	8001a78 <TIM_TimeBaseInit+0x78>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <TIM_TimeBaseInit+0xd4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d008      	beq.n	8001a78 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a6c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	891a      	ldrh	r2, [r3, #8]
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	89fa      	ldrh	r2, [r7, #14]
 8001a7c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <TIM_TimeBaseInit+0xbc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d003      	beq.n	8001a9e <TIM_TimeBaseInit+0x9e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <TIM_TimeBaseInit+0xc0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d104      	bne.n	8001aa8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	7a9b      	ldrb	r3, [r3, #10]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	829a      	strh	r2, [r3, #20]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	40010400 	.word	0x40010400
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40000c00 	.word	0x40000c00
 8001ad0:	40001000 	.word	0x40001000
 8001ad4:	40001400 	.word	0x40001400

08001ad8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	729a      	strb	r2, [r3, #10]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001b2e:	e007      	b.n	8001b40 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	801a      	strh	r2, [r3, #0]
  }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	899b      	ldrh	r3, [r3, #12]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001b72:	e009      	b.n	8001b88 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	899b      	ldrh	r3, [r3, #12]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	819a      	strh	r2, [r3, #12]
  }
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81bb      	strh	r3, [r7, #12]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8a1b      	ldrh	r3, [r3, #16]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	899b      	ldrh	r3, [r3, #12]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001bc4:	89bb      	ldrh	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <TIM_GetITStatus+0x42>
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	821a      	strh	r2, [r3, #16]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	889b      	ldrh	r3, [r3, #4]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	809a      	strh	r2, [r3, #4]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <STM_EVAL_LEDInit+0x50>)
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc05 	bl	8001468 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <STM_EVAL_LEDInit+0x54>)
 8001c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c74:	2302      	movs	r3, #2
 8001c76:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <STM_EVAL_LEDInit+0x58>)
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	f107 0208 	add.w	r2, r7, #8
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe ffec 	bl	8000c64 <GPIO_Init>
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	080040fc 	.word	0x080040fc
 8001c98:	080040f4 	.word	0x080040f4
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <STM_EVAL_LEDOn+0x28>)
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	4905      	ldr	r1, [pc, #20]	; (8001ccc <STM_EVAL_LEDOn+0x2c>)
 8001cb6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001cba:	831a      	strh	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20000010 	.word	0x20000010
 8001ccc:	080040f4 	.word	0x080040f4

08001cd0 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <STM_EVAL_LEDOff+0x28>)
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4905      	ldr	r1, [pc, #20]	; (8001cfc <STM_EVAL_LEDOff+0x2c>)
 8001ce6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001cea:	835a      	strh	r2, [r3, #26]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000010 	.word	0x20000010
 8001cfc:	080040f4 	.word	0x080040f4

08001d00 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001d10:	2301      	movs	r3, #1
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fba7 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d20:	f7ff fbe2 	bl	80014e8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001d24:	2300      	movs	r3, #0
 8001d26:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <STM_EVAL_PBInit+0x94>)
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	f107 0218 	add.w	r2, r7, #24
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe ff90 	bl	8000c64 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d11f      	bne.n	8001d8a <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe13 	bl	800197c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001d56:	2301      	movs	r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001d5e:	2308      	movs	r3, #8
 8001d60:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff08 	bl	8000b80 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8001d70:	2306      	movs	r3, #6
 8001d72:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001d74:	230f      	movs	r3, #15
 8001d76:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fa1f 	bl	80001c8 <NVIC_Init>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000020 	.word	0x20000020

08001d98 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <STM_EVAL_PBGetState+0x28>)
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f800 	bl	8000db4 <GPIO_ReadInputDataBit>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000020 	.word	0x20000020

08001dc4 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	603a      	str	r2, [r7, #0]
 8001dce:	80fb      	strh	r3, [r7, #6]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8001dd4:	797b      	ldrb	r3, [r7, #5]
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d80b      	bhi.n	8001df2 <EVAL_AUDIO_Init+0x2e>
 8001dda:	797a      	ldrb	r2, [r7, #5]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <EVAL_AUDIO_Init+0x54>)
 8001de4:	fb82 1203 	smull	r1, r2, r2, r3
 8001de8:	1152      	asrs	r2, r2, #5
 8001dea:	17db      	asrs	r3, r3, #31
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	e000      	b.n	8001df4 <EVAL_AUDIO_Init+0x30>
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	88f8      	ldrh	r0, [r7, #6]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f000 f8f3 	bl	8001fe4 <Codec_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 8001e04:	2301      	movs	r3, #1
 8001e06:	e002      	b.n	8001e0e <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 8001e08:	f000 fcb4 	bl	8002774 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8001e0c:	2300      	movs	r3, #0
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	51eb851f 	.word	0x51eb851f

08001e1c <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <EVAL_AUDIO_Play+0x60>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8001e2c:	f000 f986 	bl	800213c <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf28      	it	cs
 8001e3c:	4613      	movcs	r3, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f000 fd40 	bl	80028c4 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <EVAL_AUDIO_Play+0x60>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf28      	it	cs
 8001e50:	4613      	movcs	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <EVAL_AUDIO_Play+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <EVAL_AUDIO_Play+0x60>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e62:	4293      	cmp	r3, r2
 8001e64:	bf28      	it	cs
 8001e66:	4613      	movcs	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <EVAL_AUDIO_Play+0x68>)
 8001e70:	6013      	str	r3, [r2, #0]
  
  return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000024 	.word	0x20000024
 8001e80:	20000028 	.word	0x20000028
 8001e84:	200003e0 	.word	0x200003e0

08001e88 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <Audio_MAL_IRQHandler+0xe0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <Audio_MAL_IRQHandler+0xe4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <Audio_MAL_IRQHandler+0xec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7fe fdc7 	bl	8000a38 <DMA_GetFlagStatus>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00c      	beq.n	8001eca <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 ff45 	bl	8002d44 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <Audio_MAL_IRQHandler+0xec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7fe fdf3 	bl	8000ab0 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <Audio_MAL_IRQHandler+0xf0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7fe fdaf 	bl	8000a38 <DMA_GetFlagStatus>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 ff1f 	bl	8002d28 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <Audio_MAL_IRQHandler+0xf0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f7fe fddb 	bl	8000ab0 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <Audio_MAL_IRQHandler+0xf4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7fe fd97 	bl	8000a38 <DMA_GetFlagStatus>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d115      	bne.n	8001f3c <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <Audio_MAL_IRQHandler+0xf8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7fe fd8c 	bl	8000a38 <DMA_GetFlagStatus>
 8001f20:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <Audio_MAL_IRQHandler+0xfc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f7fe fd81 	bl	8000a38 <DMA_GetFlagStatus>
 8001f36:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 ff16 	bl	8002d70 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <Audio_MAL_IRQHandler+0xe8>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <Audio_MAL_IRQHandler+0xf4>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <Audio_MAL_IRQHandler+0xf8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <Audio_MAL_IRQHandler+0xfc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fda9 	bl	8000ab0 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200003e0 	.word	0x200003e0
 8001f6c:	20000028 	.word	0x20000028
 8001f70:	20000038 	.word	0x20000038
 8001f74:	20000044 	.word	0x20000044
 8001f78:	20000048 	.word	0x20000048
 8001f7c:	20000050 	.word	0x20000050
 8001f80:	2000004c 	.word	0x2000004c
 8001f84:	20000054 	.word	0x20000054

08001f88 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001f8c:	f7ff ff7c 	bl	8001e88 <Audio_MAL_IRQHandler>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001f98:	f7ff ff76 	bl	8001e88 <Audio_MAL_IRQHandler>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <SPI3_IRQHandler+0x3c>)
 8001fa8:	f7ff fccc 	bl	8001944 <SPI_I2S_GetFlagStatus>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d011      	beq.n	8001fd6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <SPI3_IRQHandler+0x40>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d106      	bne.n	8001fc8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001fba:	f000 fed1 	bl	8002d60 <EVAL_AUDIO_GetSampleCallBack>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f7fe fb9c 	bl	8000700 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001fc8:	f000 feca 	bl	8002d60 <EVAL_AUDIO_GetSampleCallBack>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <SPI3_IRQHandler+0x3c>)
 8001fd2:	f7ff fc51 	bl	8001878 <SPI_I2S_SendData>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40003c00 	.word	0x40003c00
 8001fe0:	20000030 	.word	0x20000030

08001fe4 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	603a      	str	r2, [r7, #0]
 8001fee:	80fb      	strh	r3, [r7, #6]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 8001ff8:	f000 fb1a 	bl	8002630 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8001ffc:	f000 f8e2 	bl	80021c4 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 8002000:	f000 faa8 	bl	8002554 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f000 f8f0 	bl	80021ec <Codec_WriteRegister>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8002014:	21af      	movs	r1, #175	; 0xaf
 8002016:	2004      	movs	r0, #4
 8002018:	f000 f8e8 	bl	80021ec <Codec_WriteRegister>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <Codec_Init+0x150>)
 8002026:	22af      	movs	r2, #175	; 0xaf
 8002028:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 800202a:	2181      	movs	r1, #129	; 0x81
 800202c:	2005      	movs	r0, #5
 800202e:	f000 f8dd 	bl	80021ec <Codec_WriteRegister>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 800203a:	2104      	movs	r1, #4
 800203c:	2006      	movs	r0, #6
 800203e:	f000 f8d5 	bl	80021ec <Codec_WriteRegister>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 800204a:	797b      	ldrb	r3, [r7, #5]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f87d 	bl	800214c <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <Codec_Init+0x154>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d127      	bne.n	80020aa <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 800205a:	2101      	movs	r1, #1
 800205c:	2008      	movs	r0, #8
 800205e:	f000 f8c5 	bl	80021ec <Codec_WriteRegister>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 800206a:	2101      	movs	r1, #1
 800206c:	2009      	movs	r0, #9
 800206e:	f000 f8bd 	bl	80021ec <Codec_WriteRegister>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 800207a:	21c0      	movs	r1, #192	; 0xc0
 800207c:	200e      	movs	r0, #14
 800207e:	f000 f8b5 	bl	80021ec <Codec_WriteRegister>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 800208a:	2100      	movs	r1, #0
 800208c:	2014      	movs	r0, #20
 800208e:	f000 f8ad 	bl	80021ec <Codec_WriteRegister>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 800209a:	2100      	movs	r1, #0
 800209c:	2015      	movs	r0, #21
 800209e:	f000 f8a5 	bl	80021ec <Codec_WriteRegister>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 80020aa:	219e      	movs	r1, #158	; 0x9e
 80020ac:	2002      	movs	r0, #2
 80020ae:	f000 f89d 	bl	80021ec <Codec_WriteRegister>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 80020ba:	2100      	movs	r1, #0
 80020bc:	200a      	movs	r0, #10
 80020be:	f000 f895 	bl	80021ec <Codec_WriteRegister>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <Codec_Init+0x154>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d007      	beq.n	80020e2 <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 80020d2:	2104      	movs	r1, #4
 80020d4:	200e      	movs	r0, #14
 80020d6:	f000 f889 	bl	80021ec <Codec_WriteRegister>
 80020da:	4602      	mov	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 80020e2:	2100      	movs	r1, #0
 80020e4:	2027      	movs	r0, #39	; 0x27
 80020e6:	f000 f881 	bl	80021ec <Codec_WriteRegister>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 80020f2:	210f      	movs	r1, #15
 80020f4:	201f      	movs	r0, #31
 80020f6:	f000 f879 	bl	80021ec <Codec_WriteRegister>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 8002102:	210a      	movs	r1, #10
 8002104:	201a      	movs	r0, #26
 8002106:	f000 f871 	bl	80021ec <Codec_WriteRegister>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 8002112:	210a      	movs	r1, #10
 8002114:	201b      	movs	r0, #27
 8002116:	f000 f869 	bl	80021ec <Codec_WriteRegister>
 800211a:	4602      	mov	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	f000 fa42 	bl	80025ac <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000b0 	.word	0x200000b0
 8002138:	20000030 	.word	0x20000030

0800213c <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2be6      	cmp	r3, #230	; 0xe6
 800215e:	d916      	bls.n	800218e <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3319      	adds	r3, #25
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	2020      	movs	r0, #32
 800216a:	f000 f83f 	bl	80021ec <Codec_WriteRegister>
 800216e:	4602      	mov	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	3319      	adds	r3, #25
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	2021      	movs	r0, #33	; 0x21
 8002180:	f000 f834 	bl	80021ec <Codec_WriteRegister>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e015      	b.n	80021ba <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3319      	adds	r3, #25
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	2020      	movs	r0, #32
 8002198:	f000 f828 	bl	80021ec <Codec_WriteRegister>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	3319      	adds	r3, #25
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	2021      	movs	r0, #33	; 0x21
 80021ae:	f000 f81d 	bl	80021ec <Codec_WriteRegister>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2110      	movs	r1, #16
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <Codec_Reset+0x24>)
 80021ce:	f7fe fe0b 	bl	8000de8 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 80021d2:	f644 70ff 	movw	r0, #20479	; 0x4fff
 80021d6:	f000 fabb 	bl	8002750 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	2110      	movs	r1, #16
 80021de:	4802      	ldr	r0, [pc, #8]	; (80021e8 <Codec_Reset+0x24>)
 80021e0:	f7fe fe02 	bl	8000de8 <GPIO_WriteBit>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020c00 	.word	0x40020c00

080021ec <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <Codec_WriteRegister+0x148>)
 8002202:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002206:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002208:	e00a      	b.n	8002220 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <Codec_WriteRegister+0x148>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	4948      	ldr	r1, [pc, #288]	; (8002334 <Codec_WriteRegister+0x148>)
 8002212:	600a      	str	r2, [r1, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <Codec_WriteRegister+0x34>
 8002218:	f000 fd7e 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 800221c:	4603      	mov	r3, r0
 800221e:	e085      	b.n	800232c <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002220:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002224:	4844      	ldr	r0, [pc, #272]	; (8002338 <Codec_WriteRegister+0x14c>)
 8002226:	f7ff f829 	bl	800127c <I2C_GetFlagStatus>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ec      	bne.n	800220a <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002230:	2101      	movs	r1, #1
 8002232:	4841      	ldr	r0, [pc, #260]	; (8002338 <Codec_WriteRegister+0x14c>)
 8002234:	f7fe ff56 	bl	80010e4 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002238:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <Codec_WriteRegister+0x148>)
 800223a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800223e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002240:	e00a      	b.n	8002258 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002242:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <Codec_WriteRegister+0x148>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1e5a      	subs	r2, r3, #1
 8002248:	493a      	ldr	r1, [pc, #232]	; (8002334 <Codec_WriteRegister+0x148>)
 800224a:	600a      	str	r2, [r1, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <Codec_WriteRegister+0x6c>
 8002250:	f000 fd62 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 8002254:	4603      	mov	r3, r0
 8002256:	e069      	b.n	800232c <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002258:	4938      	ldr	r1, [pc, #224]	; (800233c <Codec_WriteRegister+0x150>)
 800225a:	4837      	ldr	r0, [pc, #220]	; (8002338 <Codec_WriteRegister+0x14c>)
 800225c:	f7fe ffde 	bl	800121c <I2C_CheckEvent>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ed      	beq.n	8002242 <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002266:	2200      	movs	r2, #0
 8002268:	2194      	movs	r1, #148	; 0x94
 800226a:	4833      	ldr	r0, [pc, #204]	; (8002338 <Codec_WriteRegister+0x14c>)
 800226c:	f7fe ff7a 	bl	8001164 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <Codec_WriteRegister+0x148>)
 8002272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002276:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002278:	e00a      	b.n	8002290 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <Codec_WriteRegister+0x148>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	492c      	ldr	r1, [pc, #176]	; (8002334 <Codec_WriteRegister+0x148>)
 8002282:	600a      	str	r2, [r1, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <Codec_WriteRegister+0xa4>
 8002288:	f000 fd46 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 800228c:	4603      	mov	r3, r0
 800228e:	e04d      	b.n	800232c <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002290:	492b      	ldr	r1, [pc, #172]	; (8002340 <Codec_WriteRegister+0x154>)
 8002292:	4829      	ldr	r0, [pc, #164]	; (8002338 <Codec_WriteRegister+0x14c>)
 8002294:	f7fe ffc2 	bl	800121c <I2C_CheckEvent>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ed      	beq.n	800227a <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4825      	ldr	r0, [pc, #148]	; (8002338 <Codec_WriteRegister+0x14c>)
 80022a4:	f7fe ff9c 	bl	80011e0 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <Codec_WriteRegister+0x148>)
 80022aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022ae:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80022b0:	e00a      	b.n	80022c8 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <Codec_WriteRegister+0x148>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	491e      	ldr	r1, [pc, #120]	; (8002334 <Codec_WriteRegister+0x148>)
 80022ba:	600a      	str	r2, [r1, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <Codec_WriteRegister+0xdc>
 80022c0:	f000 fd2a 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 80022c4:	4603      	mov	r3, r0
 80022c6:	e031      	b.n	800232c <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80022c8:	491e      	ldr	r1, [pc, #120]	; (8002344 <Codec_WriteRegister+0x158>)
 80022ca:	481b      	ldr	r0, [pc, #108]	; (8002338 <Codec_WriteRegister+0x14c>)
 80022cc:	f7fe ffa6 	bl	800121c <I2C_CheckEvent>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ed      	beq.n	80022b2 <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 80022d6:	79bb      	ldrb	r3, [r7, #6]
 80022d8:	4619      	mov	r1, r3
 80022da:	4817      	ldr	r0, [pc, #92]	; (8002338 <Codec_WriteRegister+0x14c>)
 80022dc:	f7fe ff80 	bl	80011e0 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <Codec_WriteRegister+0x148>)
 80022e2:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80022e6:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 80022e8:	e008      	b.n	80022fc <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <Codec_WriteRegister+0x148>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1e5a      	subs	r2, r3, #1
 80022f0:	4910      	ldr	r1, [pc, #64]	; (8002334 <Codec_WriteRegister+0x148>)
 80022f2:	600a      	str	r2, [r1, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <Codec_WriteRegister+0x110>
 80022f8:	f000 fd0e 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 80022fc:	4912      	ldr	r1, [pc, #72]	; (8002348 <Codec_WriteRegister+0x15c>)
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <Codec_WriteRegister+0x14c>)
 8002300:	f7fe ffbc 	bl	800127c <I2C_GetFlagStatus>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ef      	beq.n	80022ea <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 800230a:	2101      	movs	r1, #1
 800230c:	480a      	ldr	r0, [pc, #40]	; (8002338 <Codec_WriteRegister+0x14c>)
 800230e:	f7fe ff09 	bl	8001124 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f819 	bl	800234c <Codec_ReadRegister>
 800231a:	4602      	mov	r2, r0
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	429a      	cmp	r2, r3
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000002c 	.word	0x2000002c
 8002338:	40005400 	.word	0x40005400
 800233c:	00030001 	.word	0x00030001
 8002340:	00070082 	.word	0x00070082
 8002344:	00070080 	.word	0x00070080
 8002348:	10000004 	.word	0x10000004

0800234c <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800235c:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002360:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002362:	e00a      	b.n	800237a <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002364:	4b73      	ldr	r3, [pc, #460]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	4972      	ldr	r1, [pc, #456]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800236c:	600a      	str	r2, [r1, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <Codec_ReadRegister+0x2e>
 8002372:	f000 fcd1 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 8002376:	4603      	mov	r3, r0
 8002378:	e0d7      	b.n	800252a <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800237a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800237e:	486e      	ldr	r0, [pc, #440]	; (8002538 <Codec_ReadRegister+0x1ec>)
 8002380:	f7fe ff7c 	bl	800127c <I2C_GetFlagStatus>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ec      	bne.n	8002364 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800238a:	2101      	movs	r1, #1
 800238c:	486a      	ldr	r0, [pc, #424]	; (8002538 <Codec_ReadRegister+0x1ec>)
 800238e:	f7fe fea9 	bl	80010e4 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002392:	4b68      	ldr	r3, [pc, #416]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002398:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800239a:	e00a      	b.n	80023b2 <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800239c:	4b65      	ldr	r3, [pc, #404]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	4964      	ldr	r1, [pc, #400]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80023a4:	600a      	str	r2, [r1, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <Codec_ReadRegister+0x66>
 80023aa:	f000 fcb5 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 80023ae:	4603      	mov	r3, r0
 80023b0:	e0bb      	b.n	800252a <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80023b2:	4962      	ldr	r1, [pc, #392]	; (800253c <Codec_ReadRegister+0x1f0>)
 80023b4:	4860      	ldr	r0, [pc, #384]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80023b6:	f7fe ff31 	bl	800121c <I2C_CheckEvent>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ed      	beq.n	800239c <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2194      	movs	r1, #148	; 0x94
 80023c4:	485c      	ldr	r0, [pc, #368]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80023c6:	f7fe fecd 	bl	8001164 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80023cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80023d2:	e00a      	b.n	80023ea <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	4956      	ldr	r1, [pc, #344]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80023dc:	600a      	str	r2, [r1, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <Codec_ReadRegister+0x9e>
 80023e2:	f000 fc99 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 80023e6:	4603      	mov	r3, r0
 80023e8:	e09f      	b.n	800252a <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80023ea:	4955      	ldr	r1, [pc, #340]	; (8002540 <Codec_ReadRegister+0x1f4>)
 80023ec:	4852      	ldr	r0, [pc, #328]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80023ee:	f7fe ff15 	bl	800121c <I2C_CheckEvent>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ed      	beq.n	80023d4 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4619      	mov	r1, r3
 80023fc:	484e      	ldr	r0, [pc, #312]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80023fe:	f7fe feef 	bl	80011e0 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002408:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 800240a:	e00a      	b.n	8002422 <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800240c:	4b49      	ldr	r3, [pc, #292]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	4948      	ldr	r1, [pc, #288]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002414:	600a      	str	r2, [r1, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <Codec_ReadRegister+0xd6>
 800241a:	f000 fc7d 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 800241e:	4603      	mov	r3, r0
 8002420:	e083      	b.n	800252a <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002422:	4948      	ldr	r1, [pc, #288]	; (8002544 <Codec_ReadRegister+0x1f8>)
 8002424:	4844      	ldr	r0, [pc, #272]	; (8002538 <Codec_ReadRegister+0x1ec>)
 8002426:	f7fe ff29 	bl	800127c <I2C_GetFlagStatus>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ed      	beq.n	800240c <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002430:	2101      	movs	r1, #1
 8002432:	4841      	ldr	r0, [pc, #260]	; (8002538 <Codec_ReadRegister+0x1ec>)
 8002434:	f7fe fe56 	bl	80010e4 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800243a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800243e:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002440:	e00a      	b.n	8002458 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	493a      	ldr	r1, [pc, #232]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800244a:	600a      	str	r2, [r1, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <Codec_ReadRegister+0x10c>
 8002450:	f000 fc62 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 8002454:	4603      	mov	r3, r0
 8002456:	e068      	b.n	800252a <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002458:	4938      	ldr	r1, [pc, #224]	; (800253c <Codec_ReadRegister+0x1f0>)
 800245a:	4837      	ldr	r0, [pc, #220]	; (8002538 <Codec_ReadRegister+0x1ec>)
 800245c:	f7fe fede 	bl	800121c <I2C_CheckEvent>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ed      	beq.n	8002442 <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002466:	2201      	movs	r2, #1
 8002468:	2194      	movs	r1, #148	; 0x94
 800246a:	4833      	ldr	r0, [pc, #204]	; (8002538 <Codec_ReadRegister+0x1ec>)
 800246c:	f7fe fe7a 	bl	8001164 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002472:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002476:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002478:	e00a      	b.n	8002490 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <Codec_ReadRegister+0x1e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	492c      	ldr	r1, [pc, #176]	; (8002534 <Codec_ReadRegister+0x1e8>)
 8002482:	600a      	str	r2, [r1, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <Codec_ReadRegister+0x144>
 8002488:	f000 fc46 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 800248c:	4603      	mov	r3, r0
 800248e:	e04c      	b.n	800252a <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002490:	492d      	ldr	r1, [pc, #180]	; (8002548 <Codec_ReadRegister+0x1fc>)
 8002492:	4829      	ldr	r0, [pc, #164]	; (8002538 <Codec_ReadRegister+0x1ec>)
 8002494:	f7fe fef2 	bl	800127c <I2C_GetFlagStatus>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ed      	beq.n	800247a <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 800249e:	2100      	movs	r1, #0
 80024a0:	4825      	ldr	r0, [pc, #148]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80024a2:	f7fe fe7d 	bl	80011a0 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80024a8:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 80024aa:	2101      	movs	r1, #1
 80024ac:	4822      	ldr	r0, [pc, #136]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80024ae:	f7fe fe39 	bl	8001124 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024b8:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 80024ba:	e00a      	b.n	80024d2 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	491c      	ldr	r1, [pc, #112]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024c4:	600a      	str	r2, [r1, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <Codec_ReadRegister+0x186>
 80024ca:	f000 fc25 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 80024ce:	4603      	mov	r3, r0
 80024d0:	e02b      	b.n	800252a <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 80024d2:	491e      	ldr	r1, [pc, #120]	; (800254c <Codec_ReadRegister+0x200>)
 80024d4:	4818      	ldr	r0, [pc, #96]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80024d6:	f7fe fed1 	bl	800127c <I2C_GetFlagStatus>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ed      	beq.n	80024bc <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 80024e0:	4815      	ldr	r0, [pc, #84]	; (8002538 <Codec_ReadRegister+0x1ec>)
 80024e2:	f7fe fe8d 	bl	8001200 <I2C_ReceiveData>
 80024e6:	4603      	mov	r3, r0
 80024e8:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f0:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 80024f2:	e00a      	b.n	800250a <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <Codec_ReadRegister+0x1e8>)
 80024fc:	600a      	str	r2, [r1, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <Codec_ReadRegister+0x1be>
 8002502:	f000 fc09 	bl	8002d18 <Codec_TIMEOUT_UserCallback>
 8002506:	4603      	mov	r3, r0
 8002508:	e00f      	b.n	800252a <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <Codec_ReadRegister+0x1ec>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ed      	bne.n	80024f4 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002518:	2101      	movs	r1, #1
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <Codec_ReadRegister+0x1ec>)
 800251c:	f7fe fe40 	bl	80011a0 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <Codec_ReadRegister+0x204>)
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <Codec_ReadRegister+0x1ec>)
 8002524:	f7fe fede 	bl	80012e4 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000002c 	.word	0x2000002c
 8002538:	40005400 	.word	0x40005400
 800253c:	00030001 	.word	0x00030001
 8002540:	00070082 	.word	0x00070082
 8002544:	10000004 	.word	0x10000004
 8002548:	10000002 	.word	0x10000002
 800254c:	10000040 	.word	0x10000040
 8002550:	10000400 	.word	0x10000400

08002554 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 800255a:	2101      	movs	r1, #1
 800255c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002560:	f7fe ffa2 	bl	80014a8 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002564:	480f      	ldr	r0, [pc, #60]	; (80025a4 <Codec_CtrlInterface_Init+0x50>)
 8002566:	f7fe fca1 	bl	8000eac <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800256a:	2300      	movs	r3, #0
 800256c:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800256e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002572:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002574:	2333      	movs	r3, #51	; 0x33
 8002576:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800257e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002582:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <Codec_CtrlInterface_Init+0x54>)
 8002586:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002588:	2101      	movs	r1, #1
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <Codec_CtrlInterface_Init+0x50>)
 800258c:	f7fe fd8a 	bl	80010a4 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <Codec_CtrlInterface_Init+0x50>)
 8002596:	f7fe fcc3 	bl	8000f20 <I2C_Init>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40005400 	.word	0x40005400
 80025a8:	000186a0 	.word	0x000186a0

080025ac <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 80025b4:	2101      	movs	r1, #1
 80025b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025ba:	f7fe ff75 	bl	80014a8 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 80025be:	481a      	ldr	r0, [pc, #104]	; (8002628 <Codec_AudioInterface_Init+0x7c>)
 80025c0:	f7fe fff2 	bl	80015a8 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 80025c8:	2300      	movs	r3, #0
 80025ca:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 80025cc:	2300      	movs	r3, #0
 80025ce:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 80025d0:	2300      	movs	r3, #0
 80025d2:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 80025d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d8:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 80025da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025de:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	4619      	mov	r1, r3
 80025e6:	4810      	ldr	r0, [pc, #64]	; (8002628 <Codec_AudioInterface_Init+0x7c>)
 80025e8:	f7ff f84c 	bl	8001684 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <Codec_AudioInterface_Init+0x80>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d114      	bne.n	800261e <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80025f4:	2101      	movs	r1, #1
 80025f6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80025fa:	f7fe ff55 	bl	80014a8 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4619      	mov	r1, r3
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe f81b 	bl	800064c <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe f84b 	bl	80006b4 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	; 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40003c00 	.word	0x40003c00
 800262c:	20000030 	.word	0x20000030

08002630 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002636:	2101      	movs	r1, #1
 8002638:	2008      	movs	r0, #8
 800263a:	f7fe ff15 	bl	8001468 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 800263e:	2310      	movs	r3, #16
 8002640:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002642:	2301      	movs	r3, #1
 8002644:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002646:	2302      	movs	r3, #2
 8002648:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800264a:	2300      	movs	r3, #0
 800264c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002652:	463b      	mov	r3, r7
 8002654:	4619      	mov	r1, r3
 8002656:	4839      	ldr	r0, [pc, #228]	; (800273c <Codec_GPIO_Init+0x10c>)
 8002658:	f7fe fb04 	bl	8000c64 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 800265c:	2101      	movs	r1, #1
 800265e:	2007      	movs	r0, #7
 8002660:	f7fe ff02 	bl	8001468 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002664:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002668:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800266a:	2302      	movs	r3, #2
 800266c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800266e:	2302      	movs	r3, #2
 8002670:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002672:	2301      	movs	r3, #1
 8002674:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 800267a:	463b      	mov	r3, r7
 800267c:	4619      	mov	r1, r3
 800267e:	4830      	ldr	r0, [pc, #192]	; (8002740 <Codec_GPIO_Init+0x110>)
 8002680:	f7fe faf0 	bl	8000c64 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002684:	2204      	movs	r2, #4
 8002686:	2106      	movs	r1, #6
 8002688:	482d      	ldr	r0, [pc, #180]	; (8002740 <Codec_GPIO_Init+0x110>)
 800268a:	f7fe fbc5 	bl	8000e18 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 800268e:	2204      	movs	r2, #4
 8002690:	2109      	movs	r1, #9
 8002692:	482b      	ldr	r0, [pc, #172]	; (8002740 <Codec_GPIO_Init+0x110>)
 8002694:	f7fe fbc0 	bl	8000e18 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800269c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800269e:	2302      	movs	r3, #2
 80026a0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80026a2:	2302      	movs	r3, #2
 80026a4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80026a6:	2300      	movs	r3, #0
 80026a8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 80026ae:	463b      	mov	r3, r7
 80026b0:	4619      	mov	r1, r3
 80026b2:	4824      	ldr	r0, [pc, #144]	; (8002744 <Codec_GPIO_Init+0x114>)
 80026b4:	f7fe fad6 	bl	8000c64 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 80026b8:	2206      	movs	r2, #6
 80026ba:	2104      	movs	r1, #4
 80026bc:	4822      	ldr	r0, [pc, #136]	; (8002748 <Codec_GPIO_Init+0x118>)
 80026be:	f7fe fbab 	bl	8000e18 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 80026c2:	2206      	movs	r2, #6
 80026c4:	210a      	movs	r1, #10
 80026c6:	481f      	ldr	r0, [pc, #124]	; (8002744 <Codec_GPIO_Init+0x114>)
 80026c8:	f7fe fba6 	bl	8000e18 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <Codec_GPIO_Init+0x11c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d00c      	beq.n	80026ee <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 80026d4:	2310      	movs	r3, #16
 80026d6:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 80026d8:	463b      	mov	r3, r7
 80026da:	4619      	mov	r1, r3
 80026dc:	481a      	ldr	r0, [pc, #104]	; (8002748 <Codec_GPIO_Init+0x118>)
 80026de:	f7fe fac1 	bl	8000c64 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 80026e2:	2206      	movs	r2, #6
 80026e4:	210c      	movs	r1, #12
 80026e6:	4817      	ldr	r0, [pc, #92]	; (8002744 <Codec_GPIO_Init+0x114>)
 80026e8:	f7fe fb96 	bl	8000e18 <GPIO_PinAFConfig>
 80026ec:	e00e      	b.n	800270c <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80026ee:	2101      	movs	r1, #1
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7fe feb9 	bl	8001468 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80026f6:	2310      	movs	r3, #16
 80026f8:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80026fa:	2303      	movs	r3, #3
 80026fc:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	4810      	ldr	r0, [pc, #64]	; (8002748 <Codec_GPIO_Init+0x118>)
 8002708:	f7fe faac 	bl	8000c64 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002710:	2302      	movs	r3, #2
 8002712:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002714:	2302      	movs	r3, #2
 8002716:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002718:	2300      	movs	r3, #0
 800271a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <Codec_GPIO_Init+0x114>)
 8002726:	f7fe fa9d 	bl	8000c64 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 800272a:	2206      	movs	r2, #6
 800272c:	2107      	movs	r1, #7
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <Codec_GPIO_Init+0x114>)
 8002730:	f7fe fb72 	bl	8000e18 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020000 	.word	0x40020000
 800274c:	20000030 	.word	0x20000030

08002750 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002758:	e002      	b.n	8002760 <Delay+0x10>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3b01      	subs	r3, #1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <Delay+0xa>
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <Audio_MAL_Init+0x130>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d16e      	bne.n	8002860 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <Audio_MAL_Init+0x134>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fe6d 	bl	8001468 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <Audio_MAL_Init+0x138>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe f933 	bl	8000a00 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <Audio_MAL_Init+0x138>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd ffca 	bl	8000738 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <Audio_MAL_Init+0x13c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027aa:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <Audio_MAL_Init+0x144>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a40      	ldr	r2, [pc, #256]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027b2:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 80027b4:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027bc:	2240      	movs	r2, #64	; 0x40
 80027be:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 80027c0:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80027c6:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d4:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027dc:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 80027de:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e4:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <Audio_MAL_Init+0x140>)
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <Audio_MAL_Init+0x140>)
 8002804:	2200      	movs	r2, #0
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <Audio_MAL_Init+0x140>)
 800280a:	2200      	movs	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 800280e:	4b27      	ldr	r3, [pc, #156]	; (80028ac <Audio_MAL_Init+0x138>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4928      	ldr	r1, [pc, #160]	; (80028b4 <Audio_MAL_Init+0x140>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe f863 	bl	80008e0 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <Audio_MAL_Init+0x138>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	2110      	movs	r1, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe f972 	bl	8000b0c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <Audio_MAL_Init+0x138>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	2108      	movs	r1, #8
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe f96b 	bl	8000b0c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <Audio_MAL_Init+0x138>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2201      	movs	r2, #1
 800283c:	2186      	movs	r1, #134	; 0x86
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe f964 	bl	8000b0c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <Audio_MAL_Init+0x148>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800284c:	2300      	movs	r3, #0
 800284e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002850:	2300      	movs	r3, #0
 8002852:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fcb4 	bl	80001c8 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <Audio_MAL_Init+0x130>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8002868:	2201      	movs	r2, #1
 800286a:	2102      	movs	r1, #2
 800286c:	4814      	ldr	r0, [pc, #80]	; (80028c0 <Audio_MAL_Init+0x14c>)
 800286e:	f7ff f813 	bl	8001898 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002872:	e012      	b.n	800289a <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8002874:	f000 f86c 	bl	8002950 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8002878:	2201      	movs	r2, #1
 800287a:	2171      	movs	r1, #113	; 0x71
 800287c:	4810      	ldr	r0, [pc, #64]	; (80028c0 <Audio_MAL_Init+0x14c>)
 800287e:	f7ff f82f 	bl	80018e0 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 8002882:	2333      	movs	r3, #51	; 0x33
 8002884:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002886:	2300      	movs	r3, #0
 8002888:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 800288a:	2300      	movs	r3, #0
 800288c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800288e:	2301      	movs	r3, #1
 8002890:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fc97 	bl	80001c8 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000030 	.word	0x20000030
 80028a8:	20000034 	.word	0x20000034
 80028ac:	20000038 	.word	0x20000038
 80028b0:	200000b4 	.word	0x200000b4
 80028b4:	20000420 	.word	0x20000420
 80028b8:	2000003c 	.word	0x2000003c
 80028bc:	20000040 	.word	0x20000040
 80028c0:	40003c00 	.word	0x40003c00

080028c4 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <Audio_MAL_Play+0x7c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d112      	bne.n	80028fc <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <Audio_MAL_Play+0x80>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <Audio_MAL_Play+0x80>)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <Audio_MAL_Play+0x84>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4917      	ldr	r1, [pc, #92]	; (8002944 <Audio_MAL_Play+0x80>)
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fff9 	bl	80008e0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <Audio_MAL_Play+0x84>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f883 	bl	8000a00 <DMA_Cmd>
 80028fa:	e011      	b.n	8002920 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80028fc:	4a11      	ldr	r2, [pc, #68]	; (8002944 <Audio_MAL_Play+0x80>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <Audio_MAL_Play+0x80>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <Audio_MAL_Play+0x84>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	490d      	ldr	r1, [pc, #52]	; (8002944 <Audio_MAL_Play+0x80>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd ffe6 	bl	80008e0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <Audio_MAL_Play+0x84>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f870 	bl	8000a00 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <Audio_MAL_Play+0x88>)
 8002922:	8b9b      	ldrh	r3, [r3, #28]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 800292e:	2101      	movs	r1, #1
 8002930:	4806      	ldr	r0, [pc, #24]	; (800294c <Audio_MAL_Play+0x88>)
 8002932:	f7fe ff81 	bl	8001838 <I2S_Cmd>
  }
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000030 	.word	0x20000030
 8002944:	20000420 	.word	0x20000420
 8002948:	20000038 	.word	0x20000038
 800294c:	40003c00 	.word	0x40003c00

08002950 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8002956:	2101      	movs	r1, #1
 8002958:	4813      	ldr	r0, [pc, #76]	; (80029a8 <DAC_Config+0x58>)
 800295a:	f7fe fd85 	bl	8001468 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800295e:	2101      	movs	r1, #1
 8002960:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002964:	f7fe fda0 	bl	80014a8 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002968:	2310      	movs	r3, #16
 800296a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800296c:	2303      	movs	r3, #3
 800296e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002974:	463b      	mov	r3, r7
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <DAC_Config+0x5c>)
 800297a:	f7fe f973 	bl	8000c64 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	4619      	mov	r1, r3
 8002990:	2000      	movs	r0, #0
 8002992:	f7fd fe5b 	bl	800064c <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 8002996:	2101      	movs	r1, #1
 8002998:	2000      	movs	r0, #0
 800299a:	f7fd fe8b 	bl	80006b4 <DAC_Cmd>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	00200001 	.word	0x00200001
 80029ac:	40020000 	.word	0x40020000

080029b0 <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0a2      	sub	sp, #136	; 0x88
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80029b8:	2101      	movs	r1, #1
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7fe fd74 	bl	80014a8 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f887 	bl	8001ad8 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	82bb      	strh	r3, [r7, #20]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80029ce:	2300      	movs	r3, #0
 80029d0:	81fb      	strh	r3, [r7, #14]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80029d2:	f243 1338 	movw	r3, #12600	; 0x3138
 80029d6:	613b      	str	r3, [r7, #16]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 80029d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029dc:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029e8:	f7ff f80a 	bl	8001a00 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 80029ec:	2120      	movs	r1, #32
 80029ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029f2:	f7ff f90b 	bl	8001c0c <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2101      	movs	r1, #1
 80029fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029fe:	f7ff f8a5 	bl	8001b4c <TIM_ITConfig>

	NVIC_Init_struct.NVIC_IRQChannel = TIM2_IRQn;
 8002a02:	231c      	movs	r3, #28
 8002a04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	NVIC_Init_struct.NVIC_IRQChannelCmd = ENABLE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	NVIC_Init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8002a0e:	230f      	movs	r3, #15
 8002a10:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	NVIC_Init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8002a14:	230f      	movs	r3, #15
 8002a16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	NVIC_Init(&NVIC_Init_struct);
 8002a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fbd2 	bl	80001c8 <NVIC_Init>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8002a24:	2101      	movs	r1, #1
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7fe fd1e 	bl	8001468 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f7fe fd1a 	bl	8001468 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8002a34:	2101      	movs	r1, #1
 8002a36:	2004      	movs	r0, #4
 8002a38:	f7fe fd16 	bl	8001468 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002a42:	f7fe fd11 	bl	8001468 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_4	VCO-Volume
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_6	ENVELOPE-decay
	//GPIO_Pin_7	ENVELOPE-Sustain
	GPIO_StructInit(&GPIO_InitStructure);
 8002a46:	f107 0318 	add.w	r3, r7, #24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f998 	bl	8000d80 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8002a50:	23ff      	movs	r3, #255	; 0xff
 8002a52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8002a54:	2303      	movs	r3, #3
 8002a56:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a60:	f107 0318 	add.w	r3, r7, #24
 8002a64:	4619      	mov	r1, r3
 8002a66:	487d      	ldr	r0, [pc, #500]	; (8002c5c <init_adc+0x2ac>)
 8002a68:	f7fe f8fc 	bl	8000c64 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f985 	bl	8000d80 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8002a76:	2303      	movs	r3, #3
 8002a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a86:	f107 0318 	add.w	r3, r7, #24
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4874      	ldr	r0, [pc, #464]	; (8002c60 <init_adc+0x2b0>)
 8002a8e:	f7fe f8e9 	bl	8000c64 <GPIO_Init>

	//C bank pins//GPIO_Pin_0	FILTER-FreqHigh
	//GPIO_Pin_1	FILTER-FreqResonance
	//GPIO_Pin_4	FILTER-FreqGain
	GPIO_StructInit(&GPIO_InitStructure);
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f972 	bl	8000d80 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;
 8002a9c:	2313      	movs	r3, #19
 8002a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	486c      	ldr	r0, [pc, #432]	; (8002c64 <init_adc+0x2b4>)
 8002ab4:	f7fe f8d6 	bl	8000c64 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 8002ab8:	f107 0320 	add.w	r3, r7, #32
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd ff67 	bl	8000990 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 8002ace:	2300      	movs	r3, #0
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002ada:	2300      	movs	r3, #0
 8002adc:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 8002ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 8002ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 8002aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af2:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <init_adc+0x2b8>)
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002b04:	2300      	movs	r3, #0
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4857      	ldr	r0, [pc, #348]	; (8002c6c <init_adc+0x2bc>)
 8002b10:	f7fd fee6 	bl	80008e0 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8002b14:	2101      	movs	r1, #1
 8002b16:	4855      	ldr	r0, [pc, #340]	; (8002c6c <init_adc+0x2bc>)
 8002b18:	f7fd ff72 	bl	8000a00 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 8002b1c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fc17 	bl	8000354 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 8002b26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fc5a 	bl	80003e4 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 8002b30:	2100      	movs	r1, #0
 8002b32:	484f      	ldr	r0, [pc, #316]	; (8002c70 <init_adc+0x2c0>)
 8002b34:	f7fd fc6c 	bl	8000410 <ADC_Cmd>
	ADC_DeInit();
 8002b38:	f7fd fba8 	bl	800028c <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b42:	f7fe fcd1 	bl	80014e8 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8002b46:	2300      	movs	r3, #0
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	667b      	str	r3, [r7, #100]	; 0x64
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 8002b52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b56:	66fb      	str	r3, [r7, #108]	; 0x6c
	ADC_CommonInit(&adc_com_init_struct);
 8002b58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc19 	bl	8000394 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 8002b62:	2300      	movs	r3, #0
 8002b64:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8002b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b76:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8002b78:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	ADC_Init(ADC1, &adc_init_struct);
 8002b8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4837      	ldr	r0, [pc, #220]	; (8002c70 <init_adc+0x2c0>)
 8002b92:	f7fd fb89 	bl	80002a8 <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 8002b96:	2307      	movs	r3, #7
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4834      	ldr	r0, [pc, #208]	; (8002c70 <init_adc+0x2c0>)
 8002b9e:	f7fd fc53 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4831      	ldr	r0, [pc, #196]	; (8002c70 <init_adc+0x2c0>)
 8002baa:	f7fd fc4d 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 8002bae:	2307      	movs	r3, #7
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	482e      	ldr	r0, [pc, #184]	; (8002c70 <init_adc+0x2c0>)
 8002bb6:	f7fd fc47 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 8002bba:	2307      	movs	r3, #7
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	482b      	ldr	r0, [pc, #172]	; (8002c70 <init_adc+0x2c0>)
 8002bc2:	f7fd fc41 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_480Cycles);		//VCO-Volume
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	2205      	movs	r2, #5
 8002bca:	2104      	movs	r1, #4
 8002bcc:	4828      	ldr	r0, [pc, #160]	; (8002c70 <init_adc+0x2c0>)
 8002bce:	f7fd fc3b 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	2105      	movs	r1, #5
 8002bd8:	4825      	ldr	r0, [pc, #148]	; (8002c70 <init_adc+0x2c0>)
 8002bda:	f7fd fc35 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-decay
 8002bde:	2307      	movs	r3, #7
 8002be0:	2207      	movs	r2, #7
 8002be2:	2106      	movs	r1, #6
 8002be4:	4822      	ldr	r0, [pc, #136]	; (8002c70 <init_adc+0x2c0>)
 8002be6:	f7fd fc2f 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain
 8002bea:	2307      	movs	r3, #7
 8002bec:	2208      	movs	r2, #8
 8002bee:	2107      	movs	r1, #7
 8002bf0:	481f      	ldr	r0, [pc, #124]	; (8002c70 <init_adc+0x2c0>)
 8002bf2:	f7fd fc29 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 9, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	2209      	movs	r2, #9
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	481c      	ldr	r0, [pc, #112]	; (8002c70 <init_adc+0x2c0>)
 8002bfe:	f7fd fc23 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 10, ADC_SampleTime_480Cycles);	//FILTER-FreqLow
 8002c02:	2307      	movs	r3, #7
 8002c04:	220a      	movs	r2, #10
 8002c06:	2109      	movs	r1, #9
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <init_adc+0x2c0>)
 8002c0a:	f7fd fc1d 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 11, ADC_SampleTime_480Cycles);	//FILTER-FreqHigh
 8002c0e:	2307      	movs	r3, #7
 8002c10:	220b      	movs	r2, #11
 8002c12:	210a      	movs	r1, #10
 8002c14:	4816      	ldr	r0, [pc, #88]	; (8002c70 <init_adc+0x2c0>)
 8002c16:	f7fd fc17 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 12, ADC_SampleTime_480Cycles);	//FILTER-FreqResonance
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	220c      	movs	r2, #12
 8002c1e:	210b      	movs	r1, #11
 8002c20:	4813      	ldr	r0, [pc, #76]	; (8002c70 <init_adc+0x2c0>)
 8002c22:	f7fd fc11 	bl	8000448 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 13, ADC_SampleTime_480Cycles);	//FILTER-FreqGain
 8002c26:	2307      	movs	r3, #7
 8002c28:	220d      	movs	r2, #13
 8002c2a:	210e      	movs	r1, #14
 8002c2c:	4810      	ldr	r0, [pc, #64]	; (8002c70 <init_adc+0x2c0>)
 8002c2e:	f7fd fc0b 	bl	8000448 <ADC_RegularChannelConfig>


	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 8002c32:	2101      	movs	r1, #1
 8002c34:	480e      	ldr	r0, [pc, #56]	; (8002c70 <init_adc+0x2c0>)
 8002c36:	f7fd fced 	bl	8000614 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <init_adc+0x2c0>)
 8002c3e:	f7fd fccd 	bl	80005dc <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 8002c42:	2101      	movs	r1, #1
 8002c44:	480a      	ldr	r0, [pc, #40]	; (8002c70 <init_adc+0x2c0>)
 8002c46:	f7fd fbe3 	bl	8000410 <ADC_Cmd>


	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c50:	f7fe ff5c 	bl	8001b0c <TIM_Cmd>


}
 8002c54:	bf00      	nop
 8002c56:	3788      	adds	r7, #136	; 0x88
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	4001204c 	.word	0x4001204c
 8002c6c:	40026410 	.word	0x40026410
 8002c70:	40012000 	.word	0x40012000

08002c74 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	// ADC
	adc_value = ADCBuffer[0];
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <main+0x94>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <main+0x98>)
 8002c80:	801a      	strh	r2, [r3, #0]
	*  SCB->VTOR register.
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

	/* Initialize LEDS */
	STM_EVAL_LEDInit(LED3); // orange LED		// From Horrorophone
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe ffde 	bl	8001c44 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4); // green LED		// From Horrorophone
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe ffdb 	bl	8001c44 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5); // red LED			// From Horrorophone
 8002c8e:	2002      	movs	r0, #2
 8002c90:	f7fe ffd8 	bl	8001c44 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6); // blue LED			// From Horrorophone
 8002c94:	2003      	movs	r0, #3
 8002c96:	f7fe ffd5 	bl	8001c44 <STM_EVAL_LEDInit>

	/* Green Led On: start of application */
	STM_EVAL_LEDOn(LED4);						// From Horrorophone
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7ff f800 	bl	8001ca0 <STM_EVAL_LEDOn>

	// John's
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8002ca0:	4819      	ldr	r0, [pc, #100]	; (8002d08 <main+0x94>)
 8002ca2:	f7ff fe85 	bl	80029b0 <init_adc>

	/* Initialize User Button */
	STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);		// From Horrorophone
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff f829 	bl	8001d00 <STM_EVAL_PBInit>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8002cae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002cb2:	2150      	movs	r1, #80	; 0x50
 8002cb4:	2004      	movs	r0, #4
 8002cb6:	f7ff f885 	bl	8001dc4 <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, BUFF_LEN);
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	4814      	ldr	r0, [pc, #80]	; (8002d10 <main+0x9c>)
 8002cbe:	f7ff f8ad 	bl	8001e1c <EVAL_AUDIO_Play>

	// Main loop.
	while (1)
	{
		adc_value = ADCBuffer[0];
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <main+0x94>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <main+0x98>)
 8002cca:	801a      	strh	r2, [r3, #0]

		// From Horrorophone
		if (STM_EVAL_PBGetState(BUTTON_USER) && (state == OFF))
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7ff f863 	bl	8001d98 <STM_EVAL_PBGetState>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <main+0x7a>
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <main+0xa0>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <main+0x7a>
		{
			state = ON;			// From Horrorophone
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <main+0xa0>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
			STM_EVAL_LEDOn(LED6); // blue LED ON	// From Horrorophone
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f7fe ffda 	bl	8001ca0 <STM_EVAL_LEDOn>
 8002cec:	e00b      	b.n	8002d06 <main+0x92>
			// wav_vco = (wav_vco + 1)%4; // Count up to 3 and then roll over to 0.
			// freq_lfo =   ( (float32_t)( ADC3ConvertedValue & 0xffb )/10);
		}
		else
		{
			if (! STM_EVAL_PBGetState(BUTTON_USER))
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff f852 	bl	8001d98 <STM_EVAL_PBGetState>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e3      	bne.n	8002cc2 <main+0x4e>
			{
				state = OFF;		// From Horrorophone
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <main+0xa0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
				STM_EVAL_LEDOff(LED6); // blue LED OFF
 8002d00:	2003      	movs	r0, #3
 8002d02:	f7fe ffe5 	bl	8001cd0 <STM_EVAL_LEDOff>
			}
		}
	}
 8002d06:	e7dc      	b.n	8002cc2 <main+0x4e>
 8002d08:	20000460 	.word	0x20000460
 8002d0c:	20000462 	.word	0x20000462
 8002d10:	200000bc 	.word	0x200000bc
 8002d14:	200000b8 	.word	0x200000b8

08002d18 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7fe ffbf 	bl	8001ca0 <STM_EVAL_LEDOn>
	return (0);
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_DIV2);
 8002d32:	2120      	movs	r1, #32
 8002d34:	2000      	movs	r0, #0
 8002d36:	f000 f827 	bl	8002d88 <generate_waveforms>
	return;
 8002d3a:	bf00      	nop
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_DIV2, BUFF_LEN);
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	2020      	movs	r0, #32
 8002d52:	f000 f819 	bl	8002d88 <generate_waveforms>
	return;
 8002d56:	bf00      	nop
}
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop

08002d60 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */

  // return -1;
	return 0;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f7fe ff91 	bl	8001ca0 <STM_EVAL_LEDOn>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <generate_waveforms>:


// For first half of buffer, start = 0; end = buff_len/2
// For second half, start = buff_len/2; end = buff_len
void generate_waveforms(uint16_t start, uint16_t end)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b08b      	sub	sp, #44	; 0x2c
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460a      	mov	r2, r1
 8002d92:	80fb      	strh	r3, [r7, #6]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80bb      	strh	r3, [r7, #4]
//	s_start = d_start + decay_len;
//	r_start = s_start + sustain_len;
//	b_start = r_start + release_len;
//	b_end = b_start + blank_len;

	a_start = 0;
 8002d98:	4b8f      	ldr	r3, [pc, #572]	; (8002fd8 <generate_waveforms+0x250>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
	d_start = attack_len;
 8002d9e:	4b8f      	ldr	r3, [pc, #572]	; (8002fdc <generate_waveforms+0x254>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a8f      	ldr	r2, [pc, #572]	; (8002fe0 <generate_waveforms+0x258>)
 8002da4:	6013      	str	r3, [r2, #0]
	s_start = d_start + decay_len;
 8002da6:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <generate_waveforms+0x258>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b8e      	ldr	r3, [pc, #568]	; (8002fe4 <generate_waveforms+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a8d      	ldr	r2, [pc, #564]	; (8002fe8 <generate_waveforms+0x260>)
 8002db2:	6013      	str	r3, [r2, #0]
	b_start = d_start + decay_len;
 8002db4:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <generate_waveforms+0x258>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b8a      	ldr	r3, [pc, #552]	; (8002fe4 <generate_waveforms+0x25c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a8b      	ldr	r2, [pc, #556]	; (8002fec <generate_waveforms+0x264>)
 8002dc0:	6013      	str	r3, [r2, #0]
	b_end = b_start + blank_len;
 8002dc2:	4b8a      	ldr	r3, [pc, #552]	; (8002fec <generate_waveforms+0x264>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <generate_waveforms+0x268>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a89      	ldr	r2, [pc, #548]	; (8002ff4 <generate_waveforms+0x26c>)
 8002dce:	6013      	str	r3, [r2, #0]

	// TODO: test frequency accuracy.
	// TODO: Consider using arm_sin_q15 instead of arm_sin_f32.  However, results might cause clipping.
	// TODO: Store vco default amplitude in global and set with a defined value.

	volatile int i = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24

	// freq_lfo = adc_value;

	// For sine waveforms.
	volatile float32_t angle_vco = freq_vco*PI/SAMPLERATE;
 8002dd4:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <generate_waveforms+0x270>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002ffc <generate_waveforms+0x274>
 8002de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dea:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003000 <generate_waveforms+0x278>
 8002dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df2:	edc7 7a08 	vstr	s15, [r7, #32]
	volatile float32_t angle_lfo = freq_lfo*PI/SAMPLERATE;
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <generate_waveforms+0x27c>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002ffc <generate_waveforms+0x274>
 8002e00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e04:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003000 <generate_waveforms+0x278>
 8002e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0c:	edc7 7a07 	vstr	s15, [r7, #28]

	// For non-sine waveforms.
	volatile uint32_t samples_half_cycle_vco = SAMPLERATE/freq_vco;
 8002e10:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <generate_waveforms+0x270>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
	volatile uint32_t samples_cycle_vco = 2*samples_half_cycle_vco;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	617b      	str	r3, [r7, #20]

	volatile uint32_t samples_half_cycle_lfo = SAMPLERATE/freq_lfo;
 8002e28:	4b76      	ldr	r3, [pc, #472]	; (8003004 <generate_waveforms+0x27c>)
 8002e2a:	ed93 7a00 	vldr	s14, [r3]
 8002e2e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8003000 <generate_waveforms+0x278>
 8002e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3a:	ee17 3a90 	vmov	r3, s15
 8002e3e:	613b      	str	r3, [r7, #16]
	volatile uint32_t samples_cycle_lfo = 2*samples_half_cycle_lfo;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]

	// For adsr
	// TODO: Remove after testing...
	// volatile uint32_t sample_cycle_adsr = attack_len + decay_len + sustain_len + release_len + blank_len;
	volatile uint32_t sample_cycle_adsr = attack_len + decay_len + blank_len;
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <generate_waveforms+0x254>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <generate_waveforms+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	441a      	add	r2, r3
 8002e50:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <generate_waveforms+0x268>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]

	// Sine VCO
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <generate_waveforms+0x280>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d137      	bne.n	8002ed0 <generate_waveforms+0x148>
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <generate_waveforms+0x284>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d033      	beq.n	8002ed0 <generate_waveforms+0x148>
	{
		for(i = start; i < end; i++)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e02b      	b.n	8002ec6 <generate_waveforms+0x13e>
		{
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-start))*angle_vco);
 8002e6e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b65      	ldr	r3, [pc, #404]	; (8003010 <generate_waveforms+0x288>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e86:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e92:	f001 f8c1 	bl	8004018 <arm_sin_f32>
 8002e96:	eeb0 7a40 	vmov.f32	s14, s0
 8002e9a:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <generate_waveforms+0x28c>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <generate_waveforms+0x28c>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb2:	edc7 7a00 	vstr	s15, [r7]
 8002eb6:	883b      	ldrh	r3, [r7, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <generate_waveforms+0x290>)
 8002ebc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	volatile uint32_t sample_cycle_adsr = attack_len + decay_len + blank_len;

	// Sine VCO
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
	{
		for(i = start; i < end; i++)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	88ba      	ldrh	r2, [r7, #4]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dccf      	bgt.n	8002e6e <generate_waveforms+0xe6>
	// TODO: Remove after testing...
	// volatile uint32_t sample_cycle_adsr = attack_len + decay_len + sustain_len + release_len + blank_len;
	volatile uint32_t sample_cycle_adsr = attack_len + decay_len + blank_len;

	// Sine VCO
	if(wav_vco == WAVE_SINE && mod_type != MOD_FM)
 8002ece:	e0d5      	b.n	800307c <generate_waveforms+0x2f4>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-start))*angle_vco);
		}
	}

	// Square VCO
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <generate_waveforms+0x280>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d133      	bne.n	8002f40 <generate_waveforms+0x1b8>
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	; (800300c <generate_waveforms+0x284>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d02f      	beq.n	8002f40 <generate_waveforms+0x1b8>
		 * --> n = 48000/f
		 * Therefore, duration of positive (one) half is n/2 = 48000/2f.  Same for negative (zero) half.
		 *
		 */

		for(i = start; i < end; i++)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee4:	e027      	b.n	8002f36 <generate_waveforms+0x1ae>
		{
			buffer_vco[i] = vco_amp * gen_square((sample_count+(i-start)) % samples_cycle_vco, samples_half_cycle_vco);
 8002ee6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <generate_waveforms+0x288>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002efc:	fb02 f201 	mul.w	r2, r2, r1
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	b292      	uxth	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fd9c 	bl	8003a48 <gen_square>
 8002f10:	eeb0 7a40 	vmov.f32	s14, s0
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <generate_waveforms+0x28c>)
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f22:	edc7 7a00 	vstr	s15, [r7]
 8002f26:	883b      	ldrh	r3, [r7, #0]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <generate_waveforms+0x290>)
 8002f2c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		 * --> n = 48000/f
		 * Therefore, duration of positive (one) half is n/2 = 48000/2f.  Same for negative (zero) half.
		 *
		 */

		for(i = start; i < end; i++)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	3301      	adds	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	88ba      	ldrh	r2, [r7, #4]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	dcd3      	bgt.n	8002ee6 <generate_waveforms+0x15e>
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-start))*angle_vco);
		}
	}

	// Square VCO
	else if(wav_vco == WAVE_SQUARE && mod_type != MOD_FM)
 8002f3e:	e09d      	b.n	800307c <generate_waveforms+0x2f4>
			buffer_vco[i] = vco_amp * gen_square((sample_count+(i-start)) % samples_cycle_vco, samples_half_cycle_vco);
		}
	}

	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <generate_waveforms+0x280>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d13c      	bne.n	8002fc2 <generate_waveforms+0x23a>
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <generate_waveforms+0x284>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d038      	beq.n	8002fc2 <generate_waveforms+0x23a>
	{
		for(i = start; i < end; i++)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e030      	b.n	8002fb8 <generate_waveforms+0x230>
		{
			buffer_vco[i] = vco_amp * gen_sawtooth(samples_cycle_vco - ((sample_count+(i-start)) % samples_cycle_vco), samples_cycle_vco, sawtooth_vco_min, sawtooth_vco_max);
 8002f56:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <generate_waveforms+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f6e:	fb02 f200 	mul.w	r2, r2, r0
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	1aca      	subs	r2, r1, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <generate_waveforms+0x294>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <generate_waveforms+0x298>)
 8002f80:	ed93 7a00 	vldr	s14, [r3]
 8002f84:	eef0 0a47 	vmov.f32	s1, s14
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fd79 	bl	8003a84 <gen_sawtooth>
 8002f92:	eeb0 7a40 	vmov.f32	s14, s0
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <generate_waveforms+0x28c>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa4:	edc7 7a00 	vstr	s15, [r7]
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <generate_waveforms+0x290>)
 8002fae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}

	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
	{
		for(i = start; i < end; i++)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	88ba      	ldrh	r2, [r7, #4]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dcca      	bgt.n	8002f56 <generate_waveforms+0x1ce>
			buffer_vco[i] = vco_amp * gen_square((sample_count+(i-start)) % samples_cycle_vco, samples_half_cycle_vco);
		}
	}

	// Sawtooth VCO
	else if(wav_vco == WAVE_SAWTOOTH && mod_type != MOD_FM)
 8002fc0:	e05c      	b.n	800307c <generate_waveforms+0x2f4>
		{
			buffer_vco[i] = vco_amp * gen_sawtooth(samples_cycle_vco - ((sample_count+(i-start)) % samples_cycle_vco), samples_cycle_vco, sawtooth_vco_min, sawtooth_vco_max);
		}
	}

	else if(wav_vco == WAVE_TRIANGLE && mod_type != MOD_FM)
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <generate_waveforms+0x280>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d158      	bne.n	800307c <generate_waveforms+0x2f4>
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <generate_waveforms+0x284>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d054      	beq.n	800307c <generate_waveforms+0x2f4>
	{
		for(i = start; i < end; i++)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e04d      	b.n	8003074 <generate_waveforms+0x2ec>
 8002fd8:	200003cc 	.word	0x200003cc
 8002fdc:	20000088 	.word	0x20000088
 8002fe0:	200003d0 	.word	0x200003d0
 8002fe4:	2000008c 	.word	0x2000008c
 8002fe8:	200003d4 	.word	0x200003d4
 8002fec:	200003d8 	.word	0x200003d8
 8002ff0:	20000090 	.word	0x20000090
 8002ff4:	200003dc 	.word	0x200003dc
 8002ff8:	20000058 	.word	0x20000058
 8002ffc:	40490fdb 	.word	0x40490fdb
 8003000:	473b8000 	.word	0x473b8000
 8003004:	2000005c 	.word	0x2000005c
 8003008:	20000060 	.word	0x20000060
 800300c:	200003c2 	.word	0x200003c2
 8003010:	200003bc 	.word	0x200003bc
 8003014:	20000064 	.word	0x20000064
 8003018:	2000013c 	.word	0x2000013c
 800301c:	200003c4 	.word	0x200003c4
 8003020:	20000078 	.word	0x20000078
		{
			buffer_vco[i] = vco_amp * gen_triangle( (sample_count+(i-start)) % samples_cycle_vco, samples_half_cycle_vco, 1.0);
 8003024:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4ba0      	ldr	r3, [pc, #640]	; (80032b0 <generate_waveforms+0x528>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	fbb3 f1f2 	udiv	r1, r3, r2
 800303a:	fb02 f201 	mul.w	r2, r2, r1
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd8b 	bl	8003b64 <gen_triangle>
 800304e:	eeb0 7a40 	vmov.f32	s14, s0
 8003052:	4b98      	ldr	r3, [pc, #608]	; (80032b4 <generate_waveforms+0x52c>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003060:	edc7 7a00 	vstr	s15, [r7]
 8003064:	883b      	ldrh	r3, [r7, #0]
 8003066:	b29a      	uxth	r2, r3
 8003068:	4b93      	ldr	r3, [pc, #588]	; (80032b8 <generate_waveforms+0x530>)
 800306a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		}
	}

	else if(wav_vco == WAVE_TRIANGLE && mod_type != MOD_FM)
	{
		for(i = start; i < end; i++)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	3301      	adds	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
 8003074:	88ba      	ldrh	r2, [r7, #4]
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	429a      	cmp	r2, r3
 800307a:	dcd3      	bgt.n	8003024 <generate_waveforms+0x29c>
			// buffer_lfo_float[i] = triangle( (sample_count+(i-start)) % samples_cycle, samples_half_cycle, 1.0);
		}
	}

	// SINE LFO
	if(wav_lfo == WAVE_SINE)
 800307c:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <generate_waveforms+0x534>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d13f      	bne.n	8003104 <generate_waveforms+0x37c>
	{
		if(wav_vco == WAVE_SAWTOOTH || wav_vco == WAVE_TRIANGLE)
 8003084:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <generate_waveforms+0x538>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d003      	beq.n	8003094 <generate_waveforms+0x30c>
 800308c:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <generate_waveforms+0x538>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d107      	bne.n	80030a4 <generate_waveforms+0x31c>
		{
			lfo_offset = 0.5;
 8003094:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <generate_waveforms+0x53c>)
 8003096:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800309a:	601a      	str	r2, [r3, #0]
			lfo_amp = 0.25;
 800309c:	4b8a      	ldr	r3, [pc, #552]	; (80032c8 <generate_waveforms+0x540>)
 800309e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80030a2:	601a      	str	r2, [r3, #0]
		}

		for(i = start; i < end; i++)
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e027      	b.n	80030fa <generate_waveforms+0x372>
			// buffer_lfo_float[i] = 0.4 + 0.4*arm_sin_f32((sample_count+i)*angle_lfo);		// Small amplitude for AM mod of sine
			// buffer_lfo_float[i] = 40.0 + 40.0*arm_sin_f32((sample_count+i)*angle_lfo);	// Large amplitude for FM mod of sine
			// buffer_lfo_float[i] = 10 + 10*arm_sin_f32((sample_count+i)*angle_lfo);		// Medium amplitude for FM mod of square

			// TODO: uncomment after testing.
			buffer_lfo_float[i] = lfo_offset + lfo_amp*arm_sin_f32((sample_count+(i-start))*angle_lfo);
 80030aa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b7e      	ldr	r3, [pc, #504]	; (80032b0 <generate_waveforms+0x528>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	f000 ffa3 	bl	8004018 <arm_sin_f32>
 80030d2:	eeb0 7a40 	vmov.f32	s14, s0
 80030d6:	4b7c      	ldr	r3, [pc, #496]	; (80032c8 <generate_waveforms+0x540>)
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e0:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <generate_waveforms+0x53c>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ea:	4a78      	ldr	r2, [pc, #480]	; (80032cc <generate_waveforms+0x544>)
 80030ec:	00a3      	lsls	r3, r4, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	edc3 7a00 	vstr	s15, [r3]
		{
			lfo_offset = 0.5;
			lfo_amp = 0.25;
		}

		for(i = start; i < end; i++)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	88ba      	ldrh	r2, [r7, #4]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	dcd3      	bgt.n	80030aa <generate_waveforms+0x322>
 8003102:	e10e      	b.n	8003322 <generate_waveforms+0x59a>
		}
	}

	// Square LFO
	// TODO: amplitude adjustment -- so it's not just 000011111, but could be 0.2 0.2 0.2 0.6 0.6 0.6
	else if(wav_lfo == WAVE_SQUARE)
 8003104:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <generate_waveforms+0x534>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d126      	bne.n	800315a <generate_waveforms+0x3d2>
	{
		for(i = start; i < end; i++)
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	e01e      	b.n	8003150 <generate_waveforms+0x3c8>
		{
			buffer_lfo_float[i] = gen_square((sample_count+(i-start)) % samples_cycle_lfo, samples_half_cycle_lfo);
 8003112:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <generate_waveforms+0x528>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4413      	add	r3, r2
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	fbb3 f1f2 	udiv	r1, r3, r2
 8003128:	fb02 f201 	mul.w	r2, r2, r1
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	b292      	uxth	r2, r2
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fc86 	bl	8003a48 <gen_square>
 800313c:	eef0 7a40 	vmov.f32	s15, s0
 8003140:	4a62      	ldr	r2, [pc, #392]	; (80032cc <generate_waveforms+0x544>)
 8003142:	00a3      	lsls	r3, r4, #2
 8003144:	4413      	add	r3, r2
 8003146:	edc3 7a00 	vstr	s15, [r3]

	// Square LFO
	// TODO: amplitude adjustment -- so it's not just 000011111, but could be 0.2 0.2 0.2 0.6 0.6 0.6
	else if(wav_lfo == WAVE_SQUARE)
	{
		for(i = start; i < end; i++)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	3301      	adds	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	88ba      	ldrh	r2, [r7, #4]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	429a      	cmp	r2, r3
 8003156:	dcdc      	bgt.n	8003112 <generate_waveforms+0x38a>
 8003158:	e0e3      	b.n	8003322 <generate_waveforms+0x59a>
			buffer_lfo_float[i] = gen_square((sample_count+(i-start)) % samples_cycle_lfo, samples_half_cycle_lfo);
		}
	}

	// Sawtooth LFO
	else if(wav_lfo == WAVE_SAWTOOTH)
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <generate_waveforms+0x534>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d173      	bne.n	800324a <generate_waveforms+0x4c2>
	{
		// TODO: TEST For FM modulation, sawtooth shape LFO is one way
		// 	     For AM modulation, sawtooth shape is the other way

		if(mod_type != MOD_FM)
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <generate_waveforms+0x548>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d02d      	beq.n	80031c6 <generate_waveforms+0x43e>
		{
			for(i = start; i < end; i++)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	e025      	b.n	80031bc <generate_waveforms+0x434>
			{
				// buffer_lfo_float[i] = sawtooth(samples_cycle - (sample_count+(i-start)) % samples_cycle, samples_cycle, sawtooth_lfo_min, sawtooth_lfo_max);

				buffer_lfo_float[i] = gen_sawtooth((sample_count+(i-start)) % samples_cycle_lfo, samples_cycle_lfo, sawtooth_lfo_min, sawtooth_lfo_max);
 8003170:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4b4d      	ldr	r3, [pc, #308]	; (80032b0 <generate_waveforms+0x528>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4413      	add	r3, r2
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fbb3 f1f2 	udiv	r1, r3, r2
 8003186:	fb02 f201 	mul.w	r2, r2, r1
 800318a:	1a9a      	subs	r2, r3, r2
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <generate_waveforms+0x54c>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <generate_waveforms+0x550>)
 8003196:	ed93 7a00 	vldr	s14, [r3]
 800319a:	eef0 0a47 	vmov.f32	s1, s14
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fc6e 	bl	8003a84 <gen_sawtooth>
 80031a8:	eef0 7a40 	vmov.f32	s15, s0
 80031ac:	4a47      	ldr	r2, [pc, #284]	; (80032cc <generate_waveforms+0x544>)
 80031ae:	00a3      	lsls	r3, r4, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	edc3 7a00 	vstr	s15, [r3]
		// TODO: TEST For FM modulation, sawtooth shape LFO is one way
		// 	     For AM modulation, sawtooth shape is the other way

		if(mod_type != MOD_FM)
		{
			for(i = start; i < end; i++)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	3301      	adds	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	88ba      	ldrh	r2, [r7, #4]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dcd5      	bgt.n	8003170 <generate_waveforms+0x3e8>
 80031c4:	e0ad      	b.n	8003322 <generate_waveforms+0x59a>
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else
		{
			for(i = start; i < end; i++)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e039      	b.n	8003240 <generate_waveforms+0x4b8>
			{
				buffer_lfo_float[i] = gen_sawtooth((sample_count+(i-start)) % samples_cycle_lfo, samples_cycle_lfo, sawtooth_lfo_min, sawtooth_lfo_max);
 80031cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <generate_waveforms+0x528>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	fbb3 f1f2 	udiv	r1, r3, r2
 80031e2:	fb02 f201 	mul.w	r2, r2, r1
 80031e6:	1a9a      	subs	r2, r3, r2
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <generate_waveforms+0x54c>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <generate_waveforms+0x550>)
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	eef0 0a47 	vmov.f32	s1, s14
 80031fa:	eeb0 0a67 	vmov.f32	s0, s15
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fc40 	bl	8003a84 <gen_sawtooth>
 8003204:	eef0 7a40 	vmov.f32	s15, s0
 8003208:	4a30      	ldr	r2, [pc, #192]	; (80032cc <generate_waveforms+0x544>)
 800320a:	00a3      	lsls	r3, r4, #2
 800320c:	4413      	add	r3, r2
 800320e:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = buffer_lfo_float[i] * buffer_lfo_float[i];
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003216:	492d      	ldr	r1, [pc, #180]	; (80032cc <generate_waveforms+0x544>)
 8003218:	0092      	lsls	r2, r2, #2
 800321a:	440a      	add	r2, r1
 800321c:	ed92 7a00 	vldr	s14, [r2]
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	492a      	ldr	r1, [pc, #168]	; (80032cc <generate_waveforms+0x544>)
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	440a      	add	r2, r1
 8003228:	edd2 7a00 	vldr	s15, [r2]
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <generate_waveforms+0x544>)
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else
		{
			for(i = start; i < end; i++)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	3301      	adds	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	88ba      	ldrh	r2, [r7, #4]
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	429a      	cmp	r2, r3
 8003246:	dcc1      	bgt.n	80031cc <generate_waveforms+0x444>
 8003248:	e06b      	b.n	8003322 <generate_waveforms+0x59a>
				buffer_lfo_float[i] = buffer_lfo_float[i] * buffer_lfo_float[i];
			}
		}
	}

	else if(wav_lfo == WAVE_TRIANGLE)
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <generate_waveforms+0x534>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d167      	bne.n	8003322 <generate_waveforms+0x59a>
	{
		if(mod_type != MOD_FM)
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <generate_waveforms+0x548>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d026      	beq.n	80032a8 <generate_waveforms+0x520>
		{
			for(i = start; i < end; i++)
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e01e      	b.n	800329e <generate_waveforms+0x516>
			{
				// TODO: change 1.0 to variable.
				// 			Variable for min/max
				buffer_lfo_float[i] = gen_triangle( (sample_count+(i-start)) % samples_cycle_lfo, samples_half_cycle_lfo, 1.0);
 8003260:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <generate_waveforms+0x528>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4413      	add	r3, r2
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	fbb3 f1f2 	udiv	r1, r3, r2
 8003276:	fb02 f201 	mul.w	r2, r2, r1
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fc6d 	bl	8003b64 <gen_triangle>
 800328a:	eef0 7a40 	vmov.f32	s15, s0
 800328e:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <generate_waveforms+0x544>)
 8003290:	00a3      	lsls	r3, r4, #2
 8003292:	4413      	add	r3, r2
 8003294:	edc3 7a00 	vstr	s15, [r3]

	else if(wav_lfo == WAVE_TRIANGLE)
	{
		if(mod_type != MOD_FM)
		{
			for(i = start; i < end; i++)
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	88ba      	ldrh	r2, [r7, #4]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	429a      	cmp	r2, r3
 80032a4:	dcdc      	bgt.n	8003260 <generate_waveforms+0x4d8>
 80032a6:	e03c      	b.n	8003322 <generate_waveforms+0x59a>
		}

		// If FM mod, need integral of modulating signal.
		else
		{
			for(i = start; i < end; i++)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
 80032ac:	e035      	b.n	800331a <generate_waveforms+0x592>
 80032ae:	bf00      	nop
 80032b0:	200003bc 	.word	0x200003bc
 80032b4:	20000064 	.word	0x20000064
 80032b8:	2000013c 	.word	0x2000013c
 80032bc:	200003c0 	.word	0x200003c0
 80032c0:	20000060 	.word	0x20000060
 80032c4:	2000006c 	.word	0x2000006c
 80032c8:	20000068 	.word	0x20000068
 80032cc:	200001bc 	.word	0x200001bc
 80032d0:	200003c2 	.word	0x200003c2
 80032d4:	200003c8 	.word	0x200003c8
 80032d8:	2000007c 	.word	0x2000007c
			{
				// TODO: change 1.0 to variable.
				// 			Variable for min/max
				buffer_lfo_float[i] = gen_triangle_integral( (sample_count+(i-start)) % samples_cycle_lfo, samples_half_cycle_lfo, 1.0);
 80032dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4bac      	ldr	r3, [pc, #688]	; (8003598 <generate_waveforms+0x810>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80032f2:	fb02 f201 	mul.w	r2, r2, r1
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fc69 	bl	8003bd8 <gen_triangle_integral>
 8003306:	eef0 7a40 	vmov.f32	s15, s0
 800330a:	4aa4      	ldr	r2, [pc, #656]	; (800359c <generate_waveforms+0x814>)
 800330c:	00a3      	lsls	r3, r4, #2
 800330e:	4413      	add	r3, r2
 8003310:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else
		{
			for(i = start; i < end; i++)
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	88ba      	ldrh	r2, [r7, #4]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	429a      	cmp	r2, r3
 8003320:	dcdc      	bgt.n	80032dc <generate_waveforms+0x554>
	{
		// TODO: fill lfo buffer with zeros?
	}

	// AM modulation
	if(mod_type == MOD_AM)
 8003322:	4b9f      	ldr	r3, [pc, #636]	; (80035a0 <generate_waveforms+0x818>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d125      	bne.n	8003376 <generate_waveforms+0x5ee>
	{
		for(i = start; i < end; i++)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	e01d      	b.n	800336c <generate_waveforms+0x5e4>
		{
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	499b      	ldr	r1, [pc, #620]	; (80035a4 <generate_waveforms+0x81c>)
 8003336:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800333a:	b292      	uxth	r2, r2
 800333c:	ee07 2a90 	vmov	s15, r2
 8003340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	4995      	ldr	r1, [pc, #596]	; (800359c <generate_waveforms+0x814>)
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	440a      	add	r2, r1
 800334c:	edd2 7a00 	vldr	s15, [r2]
 8003350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003358:	edc7 7a00 	vstr	s15, [r7]
 800335c:	883a      	ldrh	r2, [r7, #0]
 800335e:	b291      	uxth	r1, r2
 8003360:	4a91      	ldr	r2, [pc, #580]	; (80035a8 <generate_waveforms+0x820>)
 8003362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM modulation
	if(mod_type == MOD_AM)
	{
		for(i = start; i < end; i++)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	3301      	adds	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	88ba      	ldrh	r2, [r7, #4]
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	429a      	cmp	r2, r3
 8003372:	dcdd      	bgt.n	8003330 <generate_waveforms+0x5a8>
 8003374:	e27d      	b.n	8003872 <generate_waveforms+0xaea>
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SINE)
 8003376:	4b8d      	ldr	r3, [pc, #564]	; (80035ac <generate_waveforms+0x824>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d150      	bne.n	8003420 <generate_waveforms+0x698>
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <generate_waveforms+0x818>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d14c      	bne.n	8003420 <generate_waveforms+0x698>
 8003386:	4b8a      	ldr	r3, [pc, #552]	; (80035b0 <generate_waveforms+0x828>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d148      	bne.n	8003420 <generate_waveforms+0x698>
	{
		for(i = start; i < end; i++)
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	e040      	b.n	8003416 <generate_waveforms+0x68e>
		{
			// Using 40 for sine modulated with sine
			// TODO: consider changing 40 to a variable.
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32((sample_count+(i-start))*angle_vco + 40*buffer_lfo_float[i]);
 8003394:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <generate_waveforms+0x810>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80033b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	4a79      	ldr	r2, [pc, #484]	; (800359c <generate_waveforms+0x814>)
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80035b4 <generate_waveforms+0x82c>
 80033c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	eeb0 0a67 	vmov.f32	s0, s15
 80033d0:	f000 fe22 	bl	8004018 <arm_sin_f32>
 80033d4:	eeb0 7a40 	vmov.f32	s14, s0
 80033d8:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <generate_waveforms+0x830>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e2:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <generate_waveforms+0x830>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f0:	edc7 7a00 	vstr	s15, [r7]
 80033f4:	883b      	ldrh	r3, [r7, #0]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <generate_waveforms+0x81c>)
 80033fa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	4968      	ldr	r1, [pc, #416]	; (80035a4 <generate_waveforms+0x81c>)
 8003404:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003408:	b291      	uxth	r1, r2
 800340a:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <generate_waveforms+0x820>)
 800340c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SINE)
	{
		for(i = start; i < end; i++)
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3301      	adds	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	88ba      	ldrh	r2, [r7, #4]
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	429a      	cmp	r2, r3
 800341c:	dcba      	bgt.n	8003394 <generate_waveforms+0x60c>
			buffer_output[i] = buffer_vco[i] * buffer_lfo_float[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SINE)
 800341e:	e228      	b.n	8003872 <generate_waveforms+0xaea>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sine wave VCO, square LFO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SQUARE)
 8003420:	4b62      	ldr	r3, [pc, #392]	; (80035ac <generate_waveforms+0x824>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d14c      	bne.n	80034c2 <generate_waveforms+0x73a>
 8003428:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <generate_waveforms+0x818>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d148      	bne.n	80034c2 <generate_waveforms+0x73a>
 8003430:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <generate_waveforms+0x828>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d144      	bne.n	80034c2 <generate_waveforms+0x73a>
	{
		for(i = start; i < end; i++)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
 800343c:	e03c      	b.n	80034b8 <generate_waveforms+0x730>
		{
			// For modulating with square and sawtooth wave
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32( (sample_count+(i-start))*angle_vco*buffer_lfo_float[i] );
 800343e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	461a      	mov	r2, r3
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <generate_waveforms+0x810>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4413      	add	r3, r2
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003456:	edd7 7a08 	vldr	s15, [r7, #32]
 800345a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	4a4e      	ldr	r2, [pc, #312]	; (800359c <generate_waveforms+0x814>)
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	f000 fdd1 	bl	8004018 <arm_sin_f32>
 8003476:	eeb0 7a40 	vmov.f32	s14, s0
 800347a:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <generate_waveforms+0x830>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003484:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <generate_waveforms+0x830>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003492:	edc7 7a00 	vstr	s15, [r7]
 8003496:	883b      	ldrh	r3, [r7, #0]
 8003498:	b29a      	uxth	r2, r3
 800349a:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <generate_waveforms+0x81c>)
 800349c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	493f      	ldr	r1, [pc, #252]	; (80035a4 <generate_waveforms+0x81c>)
 80034a6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80034aa:	b291      	uxth	r1, r2
 80034ac:	4a3e      	ldr	r2, [pc, #248]	; (80035a8 <generate_waveforms+0x820>)
 80034ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// FM for sine wave VCO, square LFO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SQUARE)
	{
		for(i = start; i < end; i++)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	88ba      	ldrh	r2, [r7, #4]
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	429a      	cmp	r2, r3
 80034be:	dcbe      	bgt.n	800343e <generate_waveforms+0x6b6>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sine wave VCO, square LFO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && wav_lfo == WAVE_SQUARE)
 80034c0:	e1d7      	b.n	8003872 <generate_waveforms+0xaea>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && ( wav_lfo == WAVE_SAWTOOTH ||  wav_lfo == WAVE_TRIANGLE))
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <generate_waveforms+0x824>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d15a      	bne.n	8003580 <generate_waveforms+0x7f8>
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <generate_waveforms+0x818>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d156      	bne.n	8003580 <generate_waveforms+0x7f8>
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <generate_waveforms+0x828>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d003      	beq.n	80034e2 <generate_waveforms+0x75a>
 80034da:	4b35      	ldr	r3, [pc, #212]	; (80035b0 <generate_waveforms+0x828>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d14e      	bne.n	8003580 <generate_waveforms+0x7f8>
	{
		for(i = start; i < end; i++)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e046      	b.n	8003576 <generate_waveforms+0x7ee>
		{
			// For modulating with square and sawtooth wave
			// buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32( (sample_count+(i-start))*angle_vco*buffer_lfo_float[i] );
			// buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32( ( (sample_count+(i-start)) % samples_cycle_lfo) *angle_vco*buffer_lfo_float[i] );
			buffer_vco[i] = vco_amp + vco_amp*arm_sin_f32( ( (sample_count+(i-start)) % samples_cycle_lfo) * angle_vco + 1000*buffer_lfo_float[i] );
 80034e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <generate_waveforms+0x810>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80034fe:	fb02 f201 	mul.w	r2, r2, r1
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800350c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <generate_waveforms+0x814>)
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035bc <generate_waveforms+0x834>
 8003524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	eeb0 0a67 	vmov.f32	s0, s15
 8003530:	f000 fd72 	bl	8004018 <arm_sin_f32>
 8003534:	eeb0 7a40 	vmov.f32	s14, s0
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <generate_waveforms+0x830>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <generate_waveforms+0x830>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	edc7 7a00 	vstr	s15, [r7]
 8003554:	883b      	ldrh	r3, [r7, #0]
 8003556:	b29a      	uxth	r2, r3
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <generate_waveforms+0x81c>)
 800355a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	4910      	ldr	r1, [pc, #64]	; (80035a4 <generate_waveforms+0x81c>)
 8003564:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003568:	b291      	uxth	r1, r2
 800356a:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <generate_waveforms+0x820>)
 800356c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && ( wav_lfo == WAVE_SAWTOOTH ||  wav_lfo == WAVE_TRIANGLE))
	{
		for(i = start; i < end; i++)
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	3301      	adds	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	88ba      	ldrh	r2, [r7, #4]
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	dcb4      	bgt.n	80034e8 <generate_waveforms+0x760>
			buffer_output[i] = buffer_vco[i];
		}
	}

	// FM for sine wave VCO.
	else if(wav_vco == WAVE_SINE && mod_type == MOD_FM && ( wav_lfo == WAVE_SAWTOOTH ||  wav_lfo == WAVE_TRIANGLE))
 800357e:	e178      	b.n	8003872 <generate_waveforms+0xaea>
	}

	// FM for square wave VCO.
	// TODO: Fix glitchiness. I think just needs offset, fm_mod_level, etc adjusted.
	// TODO: Use integral fm modulation formula.  See if sawtooth vco version works here.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <generate_waveforms+0x824>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 8081 	bne.w	800368c <generate_waveforms+0x904>
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <generate_waveforms+0x818>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d17c      	bne.n	800368c <generate_waveforms+0x904>
	{
		for(i = start; i < end; i++)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e074      	b.n	8003682 <generate_waveforms+0x8fa>
 8003598:	200003bc 	.word	0x200003bc
 800359c:	200001bc 	.word	0x200001bc
 80035a0:	200003c2 	.word	0x200003c2
 80035a4:	2000013c 	.word	0x2000013c
 80035a8:	200000bc 	.word	0x200000bc
 80035ac:	20000060 	.word	0x20000060
 80035b0:	200003c0 	.word	0x200003c0
 80035b4:	42200000 	.word	0x42200000
 80035b8:	20000064 	.word	0x20000064
 80035bc:	447a0000 	.word	0x447a0000
		{
			// buffer_vco[i] = vco_amp * square( (sample_count+(i-start)) % ( (uint16_t)(samples_cycle + 20*buffer_lfo_float[i]) ), ( samples_cycle + 20*buffer_lfo_float[i])/2 );

			buffer_vco[i] = vco_amp * gen_square( (sample_count+(i-start)) % ( (uint16_t)(samples_cycle_vco*fm_mod_level*buffer_lfo_float[i]) ), ( samples_cycle_vco*fm_mod_level*buffer_lfo_float[i])/2 );
 80035c0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4bae      	ldr	r3, [pc, #696]	; (8003884 <generate_waveforms+0xafc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	ee07 2a90 	vmov	s15, r2
 80035d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035da:	4aab      	ldr	r2, [pc, #684]	; (8003888 <generate_waveforms+0xb00>)
 80035dc:	edd2 7a00 	vldr	s15, [r2]
 80035e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	49a9      	ldr	r1, [pc, #676]	; (800388c <generate_waveforms+0xb04>)
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	440a      	add	r2, r1
 80035ec:	edd2 7a00 	vldr	s15, [r2]
 80035f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f8:	edc7 7a00 	vstr	s15, [r7]
 80035fc:	883a      	ldrh	r2, [r7, #0]
 80035fe:	b292      	uxth	r2, r2
 8003600:	fbb3 f1f2 	udiv	r1, r3, r2
 8003604:	fb02 f201 	mul.w	r2, r2, r1
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	b298      	uxth	r0, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003616:	4b9c      	ldr	r3, [pc, #624]	; (8003888 <generate_waveforms+0xb00>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	4a9a      	ldr	r2, [pc, #616]	; (800388c <generate_waveforms+0xb04>)
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003630:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363c:	edc7 7a00 	vstr	s15, [r7]
 8003640:	883b      	ldrh	r3, [r7, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4619      	mov	r1, r3
 8003646:	f000 f9ff 	bl	8003a48 <gen_square>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	4b90      	ldr	r3, [pc, #576]	; (8003890 <generate_waveforms+0xb08>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800365c:	edc7 7a00 	vstr	s15, [r7]
 8003660:	883b      	ldrh	r3, [r7, #0]
 8003662:	b29a      	uxth	r2, r3
 8003664:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <generate_waveforms+0xb0c>)
 8003666:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	4989      	ldr	r1, [pc, #548]	; (8003894 <generate_waveforms+0xb0c>)
 8003670:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003674:	b291      	uxth	r1, r2
 8003676:	4a88      	ldr	r2, [pc, #544]	; (8003898 <generate_waveforms+0xb10>)
 8003678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// FM for square wave VCO.
	// TODO: Fix glitchiness. I think just needs offset, fm_mod_level, etc adjusted.
	// TODO: Use integral fm modulation formula.  See if sawtooth vco version works here.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
	{
		for(i = start; i < end; i++)
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	3301      	adds	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	88ba      	ldrh	r2, [r7, #4]
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	429a      	cmp	r2, r3
 8003688:	dc9a      	bgt.n	80035c0 <generate_waveforms+0x838>
	}

	// FM for square wave VCO.
	// TODO: Fix glitchiness. I think just needs offset, fm_mod_level, etc adjusted.
	// TODO: Use integral fm modulation formula.  See if sawtooth vco version works here.
	else if(wav_vco == WAVE_SQUARE && mod_type == MOD_FM)
 800368a:	e0f2      	b.n	8003872 <generate_waveforms+0xaea>
		}
	}

	// FM for sawtooth wave VCO.
	// TODO: Works for sine LFO.  Crappy for sawtooth LFO.  Check gain, offset.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 800368c:	4b83      	ldr	r3, [pc, #524]	; (800389c <generate_waveforms+0xb14>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d170      	bne.n	8003776 <generate_waveforms+0x9ee>
 8003694:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <generate_waveforms+0xb18>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d16c      	bne.n	8003776 <generate_waveforms+0x9ee>
	{
		for(i = start; i < end; i++)
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e064      	b.n	800376c <generate_waveforms+0x9e4>
			// buffer_vco[i] = 40 * sawtooth(  samples_cycle - ((sample_count+i) % samples_cycle));

			// During call to sawtooth, I think do...
			//		samples_cycle - (sample_count+(i-start)) ...
			// Because, otherwise the sawtooth waveform appears backwards.
			buffer_vco[i] = vco_amp * gen_sawtooth( samples_cycle_vco - (sample_count+(i-start)) % ( (uint16_t)(samples_cycle_vco*fm_mod_level*buffer_lfo_float[i]) ), samples_cycle_vco*fm_mod_level*buffer_lfo_float[i], sawtooth_vco_min, sawtooth_vco_max);
 80036a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80036a4:	6979      	ldr	r1, [r7, #20]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b75      	ldr	r3, [pc, #468]	; (8003884 <generate_waveforms+0xafc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	ee07 2a90 	vmov	s15, r2
 80036ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <generate_waveforms+0xb00>)
 80036c0:	edd2 7a00 	vldr	s15, [r2]
 80036c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	4870      	ldr	r0, [pc, #448]	; (800388c <generate_waveforms+0xb04>)
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	4402      	add	r2, r0
 80036d0:	edd2 7a00 	vldr	s15, [r2]
 80036d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036dc:	edc7 7a00 	vstr	s15, [r7]
 80036e0:	883a      	ldrh	r2, [r7, #0]
 80036e2:	b292      	uxth	r2, r2
 80036e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80036e8:	fb02 f200 	mul.w	r2, r2, r0
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	1ac8      	subs	r0, r1, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <generate_waveforms+0xb00>)
 80036fc:	edd3 7a00 	vldr	s15, [r3]
 8003700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	4a61      	ldr	r2, [pc, #388]	; (800388c <generate_waveforms+0xb04>)
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8003718:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <generate_waveforms+0xb1c>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <generate_waveforms+0xb20>)
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	eef0 0a47 	vmov.f32	s1, s14
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	ee16 1a90 	vmov	r1, s13
 8003730:	f000 f9a8 	bl	8003a84 <gen_sawtooth>
 8003734:	eeb0 7a40 	vmov.f32	s14, s0
 8003738:	4b55      	ldr	r3, [pc, #340]	; (8003890 <generate_waveforms+0xb08>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	edc7 7a00 	vstr	s15, [r7]
 800374a:	883b      	ldrh	r3, [r7, #0]
 800374c:	b29a      	uxth	r2, r3
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <generate_waveforms+0xb0c>)
 8003750:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	494e      	ldr	r1, [pc, #312]	; (8003894 <generate_waveforms+0xb0c>)
 800375a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800375e:	b291      	uxth	r1, r2
 8003760:	4a4d      	ldr	r2, [pc, #308]	; (8003898 <generate_waveforms+0xb10>)
 8003762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// FM for sawtooth wave VCO.
	// TODO: Works for sine LFO.  Crappy for sawtooth LFO.  Check gain, offset.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
	{
		for(i = start; i < end; i++)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	3301      	adds	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	88ba      	ldrh	r2, [r7, #4]
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	429a      	cmp	r2, r3
 8003772:	dc96      	bgt.n	80036a2 <generate_waveforms+0x91a>
		}
	}

	// FM for sawtooth wave VCO.
	// TODO: Works for sine LFO.  Crappy for sawtooth LFO.  Check gain, offset.
	else if(wav_vco == WAVE_SAWTOOTH && mod_type == MOD_FM)
 8003774:	e07d      	b.n	8003872 <generate_waveforms+0xaea>
		}
	}

	// FM for triangle wave VCO.
	// TODO: fix this...
	else if(wav_vco == WAVE_TRIANGLE && mod_type == MOD_FM)
 8003776:	4b49      	ldr	r3, [pc, #292]	; (800389c <generate_waveforms+0xb14>)
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d166      	bne.n	800384c <generate_waveforms+0xac4>
 800377e:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <generate_waveforms+0xb18>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d162      	bne.n	800384c <generate_waveforms+0xac4>
	{
		for(i = start; i < end; i++)
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e05a      	b.n	8003842 <generate_waveforms+0xaba>
		{
			buffer_vco[i] = vco_amp * gen_triangle( (sample_count+(i-start)) % ( (uint16_t)(samples_cycle_vco*fm_mod_level*buffer_lfo_float[i]) ), samples_half_cycle_vco*fm_mod_level*buffer_lfo_float[i], 1.0);
 800378c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <generate_waveforms+0xafc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	ee07 2a90 	vmov	s15, r2
 80037a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a6:	4a38      	ldr	r2, [pc, #224]	; (8003888 <generate_waveforms+0xb00>)
 80037a8:	edd2 7a00 	vldr	s15, [r2]
 80037ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	4936      	ldr	r1, [pc, #216]	; (800388c <generate_waveforms+0xb04>)
 80037b4:	0092      	lsls	r2, r2, #2
 80037b6:	440a      	add	r2, r1
 80037b8:	edd2 7a00 	vldr	s15, [r2]
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c4:	edc7 7a00 	vstr	s15, [r7]
 80037c8:	883a      	ldrh	r2, [r7, #0]
 80037ca:	b292      	uxth	r2, r2
 80037cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80037d0:	fb02 f201 	mul.w	r2, r2, r1
 80037d4:	1a98      	subs	r0, r3, r2
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <generate_waveforms+0xb00>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <generate_waveforms+0xb04>)
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003802:	ee17 1a90 	vmov	r1, s15
 8003806:	f000 f9ad 	bl	8003b64 <gen_triangle>
 800380a:	eeb0 7a40 	vmov.f32	s14, s0
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <generate_waveforms+0xb08>)
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	edc7 7a00 	vstr	s15, [r7]
 8003820:	883b      	ldrh	r3, [r7, #0]
 8003822:	b29a      	uxth	r2, r3
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <generate_waveforms+0xb0c>)
 8003826:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			buffer_output[i] = buffer_vco[i];
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	4919      	ldr	r1, [pc, #100]	; (8003894 <generate_waveforms+0xb0c>)
 8003830:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003834:	b291      	uxth	r1, r2
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <generate_waveforms+0xb10>)
 8003838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// FM for triangle wave VCO.
	// TODO: fix this...
	else if(wav_vco == WAVE_TRIANGLE && mod_type == MOD_FM)
	{
		for(i = start; i < end; i++)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3301      	adds	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	88ba      	ldrh	r2, [r7, #4]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	429a      	cmp	r2, r3
 8003848:	dca0      	bgt.n	800378c <generate_waveforms+0xa04>
		}
	}

	// FM for triangle wave VCO.
	// TODO: fix this...
	else if(wav_vco == WAVE_TRIANGLE && mod_type == MOD_FM)
 800384a:	e012      	b.n	8003872 <generate_waveforms+0xaea>
	}

	// No modulation
	else
	{
		for(i = start; i < end; i++)
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	e00b      	b.n	800386a <generate_waveforms+0xae2>
		{
			buffer_output[i] = buffer_vco[i];
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	490f      	ldr	r1, [pc, #60]	; (8003894 <generate_waveforms+0xb0c>)
 8003858:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800385c:	b291      	uxth	r1, r2
 800385e:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <generate_waveforms+0xb10>)
 8003860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No modulation
	else
	{
		for(i = start; i < end; i++)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	3301      	adds	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	88ba      	ldrh	r2, [r7, #4]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	429a      	cmp	r2, r3
 8003870:	dcef      	bgt.n	8003852 <generate_waveforms+0xaca>
		}
	}

	// ADSR: Attack decay sustain release
	// The waveform contains 4 segments.
	if(adsr)
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <generate_waveforms+0xb24>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80bb 	beq.w	80039f2 <generate_waveforms+0xc6a>
	{
		for(i = start; i < end; i++)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e0b2      	b.n	80039e8 <generate_waveforms+0xc60>
 8003882:	bf00      	nop
 8003884:	200003bc 	.word	0x200003bc
 8003888:	20000080 	.word	0x20000080
 800388c:	200001bc 	.word	0x200001bc
 8003890:	20000064 	.word	0x20000064
 8003894:	2000013c 	.word	0x2000013c
 8003898:	200000bc 	.word	0x200000bc
 800389c:	20000060 	.word	0x20000060
 80038a0:	200003c2 	.word	0x200003c2
 80038a4:	200003c4 	.word	0x200003c4
 80038a8:	20000078 	.word	0x20000078
 80038ac:	20000084 	.word	0x20000084
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			// if( sample_count+(i-start) < d_start)
			if( (sample_count+(i-start))%sample_cycle_adsr < d_start)
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <generate_waveforms+0xc94>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80038c4:	fb02 f201 	mul.w	r2, r2, r1
 80038c8:	1a9a      	subs	r2, r3, r2
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <generate_waveforms+0xc98>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d220      	bcs.n	8003914 <generate_waveforms+0xb8c>
			{
				// Attack
				// buffer_adsr[i] = 0.2;
				// sawtooth(current sample, samples per cycle, min, max)
				// buffer_lfo_float[i] = sawtooth(samples_cycle - (sample_count+(i-start)) % samples_cycle, samples_cycle, sawtooth_lfo_min, sawtooth_lfo_max);
				buffer_adsr[i] = gen_sawtooth( (sample_count+(i-start)) % attack_len, attack_len, 0.0, 1.0);
 80038d2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <generate_waveforms+0xc94>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4413      	add	r3, r2
 80038e2:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <generate_waveforms+0xc9c>)
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80038ea:	fb02 f201 	mul.w	r2, r2, r1
 80038ee:	1a9a      	subs	r2, r3, r2
 80038f0:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <generate_waveforms+0xc9c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80038f8:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003a28 <generate_waveforms+0xca0>
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 f8c0 	bl	8003a84 <gen_sawtooth>
 8003904:	eef0 7a40 	vmov.f32	s15, s0
 8003908:	4a48      	ldr	r2, [pc, #288]	; (8003a2c <generate_waveforms+0xca4>)
 800390a:	00a3      	lsls	r3, r4, #2
 800390c:	4413      	add	r3, r2
 800390e:	edc3 7a00 	vstr	s15, [r3]
 8003912:	e04b      	b.n	80039ac <generate_waveforms+0xc24>

			}
			// else if(sample_count+(i-start) < s_start)
			else if( (sample_count+(i-start))%sample_cycle_adsr < s_start)
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <generate_waveforms+0xc94>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4413      	add	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	fbb3 f1f2 	udiv	r1, r3, r2
 8003928:	fb02 f201 	mul.w	r2, r2, r1
 800392c:	1a9a      	subs	r2, r3, r2
 800392e:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <generate_waveforms+0xca8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d222      	bcs.n	800397c <generate_waveforms+0xbf4>
			{
				// Decay
				// buffer_adsr[i] = 0.4;
				// buffer_adsr[i] = gen_rampdown((sample_count+(i-start)) % decay_len, decay_len, 0.5, 1.0);
				// buffer_adsr[i] = gen_rampdown((sample_count+i-start-d_start) % decay_len, decay_len, 0.5, 1.0);
				buffer_adsr[i] = gen_rampdown((sample_count+i-start-d_start) % d_start, decay_len, 0.5, 1.0);
 8003936:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003938:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <generate_waveforms+0xc94>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	441a      	add	r2, r3
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <generate_waveforms+0xc98>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <generate_waveforms+0xc98>)
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003952:	fb02 f201 	mul.w	r2, r2, r1
 8003956:	1a9a      	subs	r2, r3, r2
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <generate_waveforms+0xcac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003960:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 f8c4 	bl	8003af4 <gen_rampdown>
 800396c:	eef0 7a40 	vmov.f32	s15, s0
 8003970:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <generate_waveforms+0xca4>)
 8003972:	00a3      	lsls	r3, r4, #2
 8003974:	4413      	add	r3, r2
 8003976:	edc3 7a00 	vstr	s15, [r3]
 800397a:	e017      	b.n	80039ac <generate_waveforms+0xc24>
//				// rampdown(current sample, samples/cycle, min value, max value)
//				// buffer_adsr[i] = gen_rampdown( ( sample_count+(i-start) ) % release_len, release_len, 0.0, 0.5);
//				buffer_adsr[i] = gen_rampdown( (sample_count+i-start-r_start) % release_len, release_len, 0.0, 0.5);
//
//			}
			else if( (sample_count+(i-start))%sample_cycle_adsr < b_end)
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	461a      	mov	r2, r3
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <generate_waveforms+0xc94>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4413      	add	r3, r2
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003990:	fb02 f201 	mul.w	r2, r2, r1
 8003994:	1a9a      	subs	r2, r3, r2
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <generate_waveforms+0xcb0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d206      	bcs.n	80039ac <generate_waveforms+0xc24>
			{
				// Blank
				buffer_adsr[i] = 0;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <generate_waveforms+0xca4>)
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
			}

			buffer_output[i] = buffer_output[i] * buffer_adsr[i];
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	4922      	ldr	r1, [pc, #136]	; (8003a3c <generate_waveforms+0xcb4>)
 80039b2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80039b6:	b292      	uxth	r2, r2
 80039b8:	ee07 2a90 	vmov	s15, r2
 80039bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <generate_waveforms+0xca4>)
 80039c4:	0092      	lsls	r2, r2, #2
 80039c6:	440a      	add	r2, r1
 80039c8:	edd2 7a00 	vldr	s15, [r2]
 80039cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d4:	edc7 7a00 	vstr	s15, [r7]
 80039d8:	883a      	ldrh	r2, [r7, #0]
 80039da:	b291      	uxth	r1, r2
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <generate_waveforms+0xcb4>)
 80039de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// ADSR: Attack decay sustain release
	// The waveform contains 4 segments.
	if(adsr)
	{
		for(i = start; i < end; i++)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	88ba      	ldrh	r2, [r7, #4]
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	429a      	cmp	r2, r3
 80039ee:	f73f af5f 	bgt.w	80038b0 <generate_waveforms+0xb28>
	//		 Might be able to rollover at end of (vfo? lfo?) waveform instead of samplerate.
	// 		However.. might need to also account for size of integer.

	// sample_count = (sample_count + (i-start)) % SAMPLERATE;
	//
	sample_count = (sample_count + (i-start)) % TEN_SECOND;
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <generate_waveforms+0xc94>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	441a      	add	r2, r3
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <generate_waveforms+0xcb8>)
 8003a02:	fba3 1302 	umull	r1, r3, r3, r2
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	490e      	ldr	r1, [pc, #56]	; (8003a44 <generate_waveforms+0xcbc>)
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <generate_waveforms+0xc94>)
 8003a12:	6013      	str	r3, [r2, #0]

	return;
 8003a14:	bf00      	nop
}
 8003a16:	372c      	adds	r7, #44	; 0x2c
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	200003bc 	.word	0x200003bc
 8003a20:	200003d0 	.word	0x200003d0
 8003a24:	20000088 	.word	0x20000088
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	200002bc 	.word	0x200002bc
 8003a30:	200003d4 	.word	0x200003d4
 8003a34:	2000008c 	.word	0x2000008c
 8003a38:	200003dc 	.word	0x200003dc
 8003a3c:	200000bc 	.word	0x200000bc
 8003a40:	45e7b273 	.word	0x45e7b273
 8003a44:	000ea600 	.word	0x000ea600

08003a48 <gen_square>:
 * Returns 1 if current_sample > samples_half_cycle
 *
 * Parameter angle: value from 0.0 to 1.0.
 */
float32_t gen_square(uint16_t current_sample, uint16_t samples_half_cycle)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460a      	mov	r2, r1
 8003a52:	80fb      	strh	r3, [r7, #6]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80bb      	strh	r3, [r7, #4]
	if (current_sample < samples_half_cycle)
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	88bb      	ldrh	r3, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d202      	bcs.n	8003a66 <gen_square+0x1e>
	{
		return square_min;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <gen_square+0x34>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	e001      	b.n	8003a6a <gen_square+0x22>
	}
	return square_max;
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <gen_square+0x38>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	ee07 3a90 	vmov	s15, r3
}
 8003a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	20000070 	.word	0x20000070
 8003a80:	20000074 	.word	0x20000074

08003a84 <gen_sawtooth>:
 *		Parameter current_sample is the n'th sample in the current cycle.  This corresponds to x in f(x) = mx+b

 *
 */
float32_t gen_sawtooth(uint32_t current_sample, uint32_t samples_cycle, float32_t min, float32_t max)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a92:	edc7 0a00 	vstr	s1, [r7]
	float32_t m = 0.0;
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0;
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]

	// y = mx + b
	m = (max - min)/samples_cycle;
 8003aa2:	ed97 7a00 	vldr	s14, [r7]
 8003aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aaa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abc:	edc7 7a05 	vstr	s15, [r7, #20]
	val = (m * current_sample) + min;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ada:	edc7 7a04 	vstr	s15, [r7, #16]

	return val;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	ee07 3a90 	vmov	s15, r3
}
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <gen_rampdown>:

float32_t gen_rampdown(uint32_t current_sample, uint32_t samples_cycle, float32_t min, float32_t max)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b02:	edc7 0a00 	vstr	s1, [r7]
	float32_t m = 0.0;
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0;
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]

	// y = mx + b
	// m = (max - min)/samples_cycle;
	// val = max - m * current_sample + min;

	m = (min - max)/samples_cycle;
 8003b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b16:	edd7 7a00 	vldr	s15, [r7]
 8003b1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2c:	edc7 7a05 	vstr	s15, [r7, #20]
	val = m * current_sample + max;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b42:	edd7 7a00 	vldr	s15, [r7]
 8003b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4a:	edc7 7a04 	vstr	s15, [r7, #16]

	return val;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	ee07 3a90 	vmov	s15, r3
}
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop

08003b64 <gen_triangle>:

float32_t gen_triangle(uint32_t current_sample, uint32_t samples_half_cycle, float32_t amp)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	m = amp/(samples_half_cycle);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b82:	edd7 6a01 	vldr	s13, [r7, #4]
 8003b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8a:	edc7 7a05 	vstr	s15, [r7, #20]

	if(current_sample < samples_half_cycle)
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d209      	bcs.n	8003baa <gen_triangle+0x46>
	{
		return (m * current_sample);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba8:	e00e      	b.n	8003bc8 <gen_triangle+0x64>
	}
	// Make sure difference can be negative.
	return amp + (m * (int32_t)(samples_half_cycle - current_sample));
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <gen_triangle_integral>:


float32_t gen_triangle_integral(uint32_t current_sample, uint32_t samples_half_cycle, float32_t amp)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
	float32_t result = 0.0;
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period
	m = amp/(samples_half_cycle);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bfc:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c04:	edc7 7a05 	vstr	s15, [r7, #20]

	if(current_sample < samples_half_cycle)
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d211      	bcs.n	8003c34 <gen_triangle_integral+0x5c>
	{
		result = m*current_sample;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a04 	vstr	s15, [r7, #16]
		return result*result;
 8003c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	e018      	b.n	8003c66 <gen_triangle_integral+0x8e>
	}
	// Make sure difference can be negative.
	result = amp + (m * (int32_t)(samples_half_cycle - current_sample));
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c52:	edc7 7a04 	vstr	s15, [r7, #16]
	return -(result*result);
 8003c56:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	eef1 7a67 	vneg.f32	s15, s15
}
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c7a:	e003      	b.n	8003c84 <LoopCopyDataInit>

08003c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c82:	3104      	adds	r1, #4

08003c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c84:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c8c:	d3f6      	bcc.n	8003c7c <CopyDataInit>
  ldr  r2, =_sbss
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c90:	e002      	b.n	8003c98 <LoopFillZerobss>

08003c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c94:	f842 3b04 	str.w	r3, [r2], #4

08003c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c9c:	d3f9      	bcc.n	8003c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c9e:	f000 f86f 	bl	8003d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ca2:	f000 f9f5 	bl	8004090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ca6:	f7fe ffe5 	bl	8002c74 <main>
  bx  lr    
 8003caa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cac:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003cb0:	08004918 	.word	0x08004918
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cb8:	20000094 	.word	0x20000094
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003cbc:	20000094 	.word	0x20000094
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cc0:	20000464 	.word	0x20000464

08003cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc4:	e7fe      	b.n	8003cc4 <ADC_IRQHandler>
	...

08003cc8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop

08003cd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003cdc:	e7fe      	b.n	8003cdc <HardFault_Handler+0x4>
 8003cde:	bf00      	nop

08003ce0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003ce4:	e7fe      	b.n	8003ce4 <MemManage_Handler+0x4>
 8003ce6:	bf00      	nop

08003ce8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003cec:	e7fe      	b.n	8003cec <BusFault_Handler+0x4>
 8003cee:	bf00      	nop

08003cf0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003cf4:	e7fe      	b.n	8003cf4 <UsageFault_Handler+0x4>
 8003cf6:	bf00      	nop

08003cf8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0

}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop

08003d48 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <TIM2_IRQHandler>:


void TIM2_IRQHandler(){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET){
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d62:	f7fd ff17 	bl	8001b94 <TIM_GetITStatus>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <TIM2_IRQHandler+0x22>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d72:	f7fd ff39 	bl	8001be8 <TIM_ClearITPendingBit>
		update_selector_state();
 8003d76:	f000 f8cd 	bl	8003f14 <update_selector_state>
	}
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop

08003d80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  //#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <SystemInit+0x60>)
 8003d86:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <SystemInit+0x60>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  //#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d94:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <SystemInit+0x64>)
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <SystemInit+0x64>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <SystemInit+0x64>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <SystemInit+0x64>)
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <SystemInit+0x64>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <SystemInit+0x64>)
 8003db8:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <SystemInit+0x68>)
 8003dba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <SystemInit+0x64>)
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <SystemInit+0x64>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <SystemInit+0x64>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003dce:	f000 f80d 	bl	8003dec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dd2:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <SystemInit+0x60>)
 8003dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd8:	609a      	str	r2, [r3, #8]
#endif
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	e000ed00 	.word	0xe000ed00
 8003de4:	40023800 	.word	0x40023800
 8003de8:	24003010 	.word	0x24003010

08003dec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003dfa:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <SetSysClock+0x114>)
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <SetSysClock+0x114>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <SetSysClock+0x114>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <SetSysClock+0x38>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e22:	d1f0      	bne.n	8003e06 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003e24:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <SetSysClock+0x114>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e30:	2301      	movs	r3, #1
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	e001      	b.n	8003e3a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e36:	2300      	movs	r3, #0
 8003e38:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d142      	bne.n	8003ec6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e40:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <SetSysClock+0x114>)
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <SetSysClock+0x114>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <SetSysClock+0x118>)
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <SetSysClock+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e56:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e58:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <SetSysClock+0x114>)
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <SetSysClock+0x114>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <SetSysClock+0x114>)
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <SetSysClock+0x114>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e6c:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <SetSysClock+0x114>)
 8003e6e:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <SetSysClock+0x114>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e76:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <SetSysClock+0x114>)
 8003e7a:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <SetSysClock+0x11c>)
 8003e7c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e7e:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <SetSysClock+0x114>)
 8003e80:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <SetSysClock+0x114>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e8a:	bf00      	nop
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <SetSysClock+0x114>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f9      	beq.n	8003e8c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003e98:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <SetSysClock+0x120>)
 8003e9a:	f240 6205 	movw	r2, #1541	; 0x605
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <SetSysClock+0x114>)
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <SetSysClock+0x114>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <SetSysClock+0x114>)
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <SetSysClock+0x114>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003eb8:	bf00      	nop
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <SetSysClock+0x114>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d1f9      	bne.n	8003eba <SetSysClock+0xce>

/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <SetSysClock+0x114>)
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <SetSysClock+0x114>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ed0:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <SetSysClock+0x114>)
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <SetSysClock+0x124>)
 8003ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <SetSysClock+0x114>)
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <SetSysClock+0x114>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8003ee6:	bf00      	nop
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <SetSysClock+0x114>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f9      	beq.n	8003ee8 <SetSysClock+0xfc>
  {
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40007000 	.word	0x40007000
 8003f08:	07405408 	.word	0x07405408
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	30004080 	.word	0x30004080

08003f14 <update_selector_state>:

/*
 * Gets and updated the state of both the selector rotary switches
 * This funtion is called by the tim2 interrupt handler
 */
void update_selector_state (){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7) == 1){
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	483b      	ldr	r0, [pc, #236]	; (8004008 <update_selector_state+0xf4>)
 8003f1c:	f7fc ff4a 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d103      	bne.n	8003f2e <update_selector_state+0x1a>
		vfo_state = sine;
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <update_selector_state+0xf8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e02e      	b.n	8003f8c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8) == 1){
 8003f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f32:	4835      	ldr	r0, [pc, #212]	; (8004008 <update_selector_state+0xf4>)
 8003f34:	f7fc ff3e 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d103      	bne.n	8003f46 <update_selector_state+0x32>
		vfo_state = sawtooth;
 8003f3e:	4b33      	ldr	r3, [pc, #204]	; (800400c <update_selector_state+0xf8>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e022      	b.n	8003f8c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9) == 1){
 8003f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f4a:	482f      	ldr	r0, [pc, #188]	; (8004008 <update_selector_state+0xf4>)
 8003f4c:	f7fc ff32 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d103      	bne.n	8003f5e <update_selector_state+0x4a>
		vfo_state = square;
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <update_selector_state+0xf8>)
 8003f58:	2202      	movs	r2, #2
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e016      	b.n	8003f8c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_10) == 1){
 8003f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f62:	4829      	ldr	r0, [pc, #164]	; (8004008 <update_selector_state+0xf4>)
 8003f64:	f7fc ff26 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d103      	bne.n	8003f76 <update_selector_state+0x62>
		vfo_state = triangle;
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <update_selector_state+0xf8>)
 8003f70:	2203      	movs	r2, #3
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e00a      	b.n	8003f8c <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11) == 1){
 8003f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f7a:	4823      	ldr	r0, [pc, #140]	; (8004008 <update_selector_state+0xf4>)
 8003f7c:	f7fc ff1a 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <update_selector_state+0x78>
		vfo_state = other2;
 8003f86:	4b21      	ldr	r3, [pc, #132]	; (800400c <update_selector_state+0xf8>)
 8003f88:	2204      	movs	r2, #4
 8003f8a:	701a      	strb	r2, [r3, #0]
	}


	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
 8003f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f90:	481d      	ldr	r0, [pc, #116]	; (8004008 <update_selector_state+0xf4>)
 8003f92:	f7fc ff0f 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d103      	bne.n	8003fa4 <update_selector_state+0x90>
		lfo_state = sine;
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <update_selector_state+0xfc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8003fa2:	e02e      	b.n	8004002 <update_selector_state+0xee>
	}


	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
 8003fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fa8:	4817      	ldr	r0, [pc, #92]	; (8004008 <update_selector_state+0xf4>)
 8003faa:	f7fc ff03 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d103      	bne.n	8003fbc <update_selector_state+0xa8>
		lfo_state = sawtooth;
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <update_selector_state+0xfc>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8003fba:	e022      	b.n	8004002 <update_selector_state+0xee>

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
 8003fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc0:	4811      	ldr	r0, [pc, #68]	; (8004008 <update_selector_state+0xf4>)
 8003fc2:	f7fc fef7 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d103      	bne.n	8003fd4 <update_selector_state+0xc0>
		lfo_state = square;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <update_selector_state+0xfc>)
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8003fd2:	e016      	b.n	8004002 <update_selector_state+0xee>
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
 8003fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <update_selector_state+0xf4>)
 8003fda:	f7fc feeb 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d103      	bne.n	8003fec <update_selector_state+0xd8>
		lfo_state = triangle;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <update_selector_state+0xfc>)
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8003fea:	e00a      	b.n	8004002 <update_selector_state+0xee>
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
 8003fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ff0:	4808      	ldr	r0, [pc, #32]	; (8004014 <update_selector_state+0x100>)
 8003ff2:	f7fc fedf 	bl	8000db4 <GPIO_ReadInputDataBit>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <update_selector_state+0xee>
		lfo_state = other2;
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <update_selector_state+0xfc>)
 8003ffe:	2204      	movs	r2, #4
 8004000:	701a      	strb	r2, [r3, #0]
	}
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	2000045c 	.word	0x2000045c
 8004010:	2000045d 	.word	0x2000045d
 8004014:	40020800 	.word	0x40020800

08004018 <arm_sin_f32>:
 8004018:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004084 <arm_sin_f32+0x6c>
 800401c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004020:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800402c:	d504      	bpl.n	8004038 <arm_sin_f32+0x20>
 800402e:	ee17 3a90 	vmov	r3, s15
 8004032:	3b01      	subs	r3, #1
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004088 <arm_sin_f32+0x70>
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <arm_sin_f32+0x74>)
 8004042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800404e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004052:	ee16 3a90 	vmov	r3, s13
 8004056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405a:	ee06 3a90 	vmov	s13, r3
 800405e:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8004062:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800406a:	edd1 6a00 	vldr	s13, [r1]
 800406e:	ed91 7a01 	vldr	s14, [r1, #4]
 8004072:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800407e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004082:	4770      	bx	lr
 8004084:	3e22f983 	.word	0x3e22f983
 8004088:	44000000 	.word	0x44000000
 800408c:	0800410c 	.word	0x0800410c

08004090 <__libc_init_array>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <__libc_init_array+0x3c>)
 8004094:	4c0e      	ldr	r4, [pc, #56]	; (80040d0 <__libc_init_array+0x40>)
 8004096:	1ae4      	subs	r4, r4, r3
 8004098:	10a4      	asrs	r4, r4, #2
 800409a:	2500      	movs	r5, #0
 800409c:	461e      	mov	r6, r3
 800409e:	42a5      	cmp	r5, r4
 80040a0:	d004      	beq.n	80040ac <__libc_init_array+0x1c>
 80040a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040a6:	4798      	blx	r3
 80040a8:	3501      	adds	r5, #1
 80040aa:	e7f8      	b.n	800409e <__libc_init_array+0xe>
 80040ac:	f000 f816 	bl	80040dc <_init>
 80040b0:	4c08      	ldr	r4, [pc, #32]	; (80040d4 <__libc_init_array+0x44>)
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <__libc_init_array+0x48>)
 80040b4:	1ae4      	subs	r4, r4, r3
 80040b6:	10a4      	asrs	r4, r4, #2
 80040b8:	2500      	movs	r5, #0
 80040ba:	461e      	mov	r6, r3
 80040bc:	42a5      	cmp	r5, r4
 80040be:	d004      	beq.n	80040ca <__libc_init_array+0x3a>
 80040c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c4:	4798      	blx	r3
 80040c6:	3501      	adds	r5, #1
 80040c8:	e7f8      	b.n	80040bc <__libc_init_array+0x2c>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	08004910 	.word	0x08004910
 80040d0:	08004910 	.word	0x08004910
 80040d4:	08004914 	.word	0x08004914
 80040d8:	08004910 	.word	0x08004910

080040dc <_init>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	bf00      	nop
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr

080040e8 <_fini>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr
