
C:\stm32_workspace\audio_test_01\Debug\audio_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a0  20000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
  7 .bss          00000470  200001a0  200001a0  000201a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000610  20000610  000201a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bd7c  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ee4  00000000  00000000  0002bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000eb0  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005682  00000000  00000000  0002fa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004a84  00000000  00000000  000350a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  00039b26  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003e48  00000000  00000000  00039c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00000190  00000000  00000000  0003da5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005970 	.word	0x08005970

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	08005970 	.word	0x08005970

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	2300      	movs	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]
 8000b48:	230f      	movs	r3, #15
 8000b4a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d038      	beq.n	8000bc6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <NVIC_Init+0xbc>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f1c3 0304 	rsb	r3, r3, #4
 8000b68:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b6a:	7b7a      	ldrb	r2, [r7, #13]
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	fa42 f303 	asr.w	r3, r2, r3
 8000b72:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	789a      	ldrb	r2, [r3, #2]
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <NVIC_Init+0xc0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	7bfa      	ldrb	r2, [r7, #15]
 8000ba2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ba6:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <NVIC_Init+0xc0>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	095b      	lsrs	r3, r3, #5
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bc4:	e00f      	b.n	8000be6 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bc6:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <NVIC_Init+0xc0>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	095b      	lsrs	r3, r3, #5
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	f003 031f 	and.w	r3, r3, #31
 8000bda:	2201      	movs	r2, #1
 8000bdc:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bde:	f100 0320 	add.w	r3, r0, #32
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000c00:	2101      	movs	r1, #1
 8000c02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c06:	f001 f98d 	bl	8001f24 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c10:	f001 f988 	bl	8001f24 <RCC_APB2PeriphResetCmd>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c3a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c46:	4313      	orrs	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <ADC_Init+0xa8>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c6a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c70:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c92:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	7d1b      	ldrb	r3, [r3, #20]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	051b      	lsls	r3, r3, #20
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	c0fff7fd 	.word	0xc0fff7fd

08000cc4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	751a      	strb	r2, [r3, #20]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <ADC_CommonInit+0x48>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <ADC_CommonInit+0x4c>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d26:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d2c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d32:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <ADC_CommonInit+0x48>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6053      	str	r3, [r2, #4]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40012300 	.word	0x40012300
 8000d50:	fffc30e0 	.word	0xfffc30e0

08000d54 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000d9e:	e005      	b.n	8000dac <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f023 0201 	bic.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	609a      	str	r2, [r3, #8]
  }
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	70fb      	strb	r3, [r7, #3]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70bb      	strb	r3, [r7, #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d923      	bls.n	8000e28 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	f1a3 020a 	sub.w	r2, r3, #10
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	2207      	movs	r2, #7
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e04:	7879      	ldrb	r1, [r7, #1]
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	f1a3 020a 	sub.w	r2, r3, #10
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	e01e      	b.n	8000e66 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e2e:	78fa      	ldrb	r2, [r7, #3]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	2207      	movs	r2, #7
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e48:	7879      	ldrb	r1, [r7, #1]
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e66:	78bb      	ldrb	r3, [r7, #2]
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d821      	bhi.n	8000eb0 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e70:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e72:	78bb      	ldrb	r3, [r7, #2]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e8e:	78f9      	ldrb	r1, [r7, #3]
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000eae:	e047      	b.n	8000f40 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000eb0:	78bb      	ldrb	r3, [r7, #2]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d821      	bhi.n	8000efa <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	1fda      	subs	r2, r3, #7
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	221f      	movs	r2, #31
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
 8000eda:	78bb      	ldrb	r3, [r7, #2]
 8000edc:	1fda      	subs	r2, r3, #7
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000ef8:	e022      	b.n	8000f40 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	f1a3 020d 	sub.w	r2, r3, #13
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	221f      	movs	r2, #31
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f1e:	78f9      	ldrb	r1, [r7, #3]
 8000f20:	78bb      	ldrb	r3, [r7, #2]
 8000f22:	f1a3 020d 	sub.w	r2, r3, #13
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000f6a:	e005      	b.n	8000f78 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
  }
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000fa2:	e005      	b.n	8000fb0 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}                    
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <DAC_Init+0x64>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001000:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001020:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001026:	4313      	orrs	r3, r2
 8001028:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <DAC_Init+0x64>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40007400 	.word	0x40007400

08001050 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <DAC_Cmd+0x48>)
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <DAC_Cmd+0x48>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2001      	movs	r0, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	fa00 f303 	lsl.w	r3, r0, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8001074:	e009      	b.n	800108a <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <DAC_Cmd+0x48>)
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <DAC_Cmd+0x48>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2001      	movs	r0, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	fa00 f303 	lsl.w	r3, r0, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40007400 	.word	0x40007400

0800109c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <DAC_SetChannel1Data+0x34>)
 80010ae:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	3308      	adds	r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	461a      	mov	r2, r3
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40007400 	.word	0x40007400

080010d4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 0201 	bic.w	r2, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2221      	movs	r2, #33	; 0x21
 800110a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a46      	ldr	r2, [pc, #280]	; (8001228 <DMA_DeInit+0x154>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d103      	bne.n	800111c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <DMA_DeInit+0x158>)
 8001116:	223d      	movs	r2, #61	; 0x3d
 8001118:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800111a:	e07e      	b.n	800121a <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a44      	ldr	r2, [pc, #272]	; (8001230 <DMA_DeInit+0x15c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d104      	bne.n	800112e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <DMA_DeInit+0x158>)
 8001126:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800112a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800112c:	e075      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a40      	ldr	r2, [pc, #256]	; (8001234 <DMA_DeInit+0x160>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d104      	bne.n	8001140 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <DMA_DeInit+0x158>)
 8001138:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800113c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800113e:	e06c      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <DMA_DeInit+0x164>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d104      	bne.n	8001152 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <DMA_DeInit+0x158>)
 800114a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800114e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001150:	e063      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a39      	ldr	r2, [pc, #228]	; (800123c <DMA_DeInit+0x168>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <DMA_DeInit+0x158>)
 800115c:	4a38      	ldr	r2, [pc, #224]	; (8001240 <DMA_DeInit+0x16c>)
 800115e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001160:	e05b      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a37      	ldr	r2, [pc, #220]	; (8001244 <DMA_DeInit+0x170>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d103      	bne.n	8001172 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <DMA_DeInit+0x158>)
 800116c:	4a36      	ldr	r2, [pc, #216]	; (8001248 <DMA_DeInit+0x174>)
 800116e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001170:	e053      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a35      	ldr	r2, [pc, #212]	; (800124c <DMA_DeInit+0x178>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d103      	bne.n	8001182 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <DMA_DeInit+0x158>)
 800117c:	4a34      	ldr	r2, [pc, #208]	; (8001250 <DMA_DeInit+0x17c>)
 800117e:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001180:	e04b      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a33      	ldr	r2, [pc, #204]	; (8001254 <DMA_DeInit+0x180>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d104      	bne.n	8001194 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <DMA_DeInit+0x158>)
 800118c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001190:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001192:	e042      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a30      	ldr	r2, [pc, #192]	; (8001258 <DMA_DeInit+0x184>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d103      	bne.n	80011a4 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <DMA_DeInit+0x188>)
 800119e:	223d      	movs	r2, #61	; 0x3d
 80011a0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011a2:	e03a      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <DMA_DeInit+0x18c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d104      	bne.n	80011b6 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <DMA_DeInit+0x188>)
 80011ae:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80011b2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011b4:	e031      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <DMA_DeInit+0x190>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d104      	bne.n	80011c8 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <DMA_DeInit+0x188>)
 80011c0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80011c4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011c6:	e028      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <DMA_DeInit+0x194>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d104      	bne.n	80011da <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <DMA_DeInit+0x188>)
 80011d2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80011d6:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011d8:	e01f      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <DMA_DeInit+0x198>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d103      	bne.n	80011ea <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <DMA_DeInit+0x188>)
 80011e4:	4a16      	ldr	r2, [pc, #88]	; (8001240 <DMA_DeInit+0x16c>)
 80011e6:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011e8:	e017      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <DMA_DeInit+0x19c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d103      	bne.n	80011fa <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <DMA_DeInit+0x188>)
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <DMA_DeInit+0x174>)
 80011f6:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011f8:	e00f      	b.n	800121a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <DMA_DeInit+0x1a0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d103      	bne.n	800120a <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <DMA_DeInit+0x188>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <DMA_DeInit+0x17c>)
 8001206:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001208:	e007      	b.n	800121a <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <DMA_DeInit+0x1a4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d103      	bne.n	800121a <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <DMA_DeInit+0x188>)
 8001214:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001218:	60da      	str	r2, [r3, #12]
    }
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40026010 	.word	0x40026010
 800122c:	40026000 	.word	0x40026000
 8001230:	40026028 	.word	0x40026028
 8001234:	40026040 	.word	0x40026040
 8001238:	40026058 	.word	0x40026058
 800123c:	40026070 	.word	0x40026070
 8001240:	2000003d 	.word	0x2000003d
 8001244:	40026088 	.word	0x40026088
 8001248:	20000f40 	.word	0x20000f40
 800124c:	400260a0 	.word	0x400260a0
 8001250:	203d0000 	.word	0x203d0000
 8001254:	400260b8 	.word	0x400260b8
 8001258:	40026410 	.word	0x40026410
 800125c:	40026400 	.word	0x40026400
 8001260:	40026428 	.word	0x40026428
 8001264:	40026440 	.word	0x40026440
 8001268:	40026458 	.word	0x40026458
 800126c:	40026470 	.word	0x40026470
 8001270:	40026488 	.word	0x40026488
 8001274:	400264a0 	.word	0x400264a0
 8001278:	400264b8 	.word	0x400264b8

0800127c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <DMA_Init+0xac>)
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012be:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012ca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 0307 	bic.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4313      	orrs	r3, r2
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60da      	str	r2, [r3, #12]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	f01c803f 	.word	0xf01c803f

0800132c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80013ba:	e005      	b.n	80013c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 0201 	bic.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	601a      	str	r2, [r3, #0]
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a15      	ldr	r2, [pc, #84]	; (8001440 <DMA_GetFlagStatus+0x6c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d802      	bhi.n	80013f4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <DMA_GetFlagStatus+0x70>)
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	e001      	b.n	80013f8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <DMA_GetFlagStatus+0x74>)
 80013f6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e002      	b.n	8001410 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001416:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800141a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
 800142a:	e001      	b.n	8001430 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001430:	7dfb      	ldrb	r3, [r7, #23]
}
 8001432:	4618      	mov	r0, r3
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	4002640f 	.word	0x4002640f
 8001444:	40026000 	.word	0x40026000
 8001448:	40026400 	.word	0x40026400

0800144c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <DMA_ClearFlag+0x50>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d802      	bhi.n	8001464 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <DMA_ClearFlag+0x54>)
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e001      	b.n	8001468 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <DMA_ClearFlag+0x58>)
 8001466:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001478:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001480:	e006      	b.n	8001490 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001488:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	6093      	str	r3, [r2, #8]
  }    
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	4002640f 	.word	0x4002640f
 80014a0:	40026000 	.word	0x40026000
 80014a4:	40026400 	.word	0x40026400

080014a8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00f      	beq.n	80014e0 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	e005      	b.n	80014e0 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b80      	cmp	r3, #128	; 0x80
 80014e4:	d014      	beq.n	8001510 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f003 031e 	and.w	r3, r3, #30
 80014f6:	431a      	orrs	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80014fc:	e008      	b.n	8001510 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 031e 	and.w	r3, r3, #30
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <EXTI_Init+0xe0>)
 800152a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	799b      	ldrb	r3, [r3, #6]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d04f      	beq.n	80015d4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001534:	4931      	ldr	r1, [pc, #196]	; (80015fc <EXTI_Init+0xe0>)
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <EXTI_Init+0xe0>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	43db      	mvns	r3, r3
 8001540:	4013      	ands	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001544:	492d      	ldr	r1, [pc, #180]	; (80015fc <EXTI_Init+0xe0>)
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <EXTI_Init+0xe0>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	43db      	mvns	r3, r3
 8001550:	4013      	ands	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	6811      	ldr	r1, [r2, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800156e:	4923      	ldr	r1, [pc, #140]	; (80015fc <EXTI_Init+0xe0>)
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <EXTI_Init+0xe0>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	43db      	mvns	r3, r3
 800157a:	4013      	ands	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800157e:	491f      	ldr	r1, [pc, #124]	; (80015fc <EXTI_Init+0xe0>)
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <EXTI_Init+0xe0>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	43db      	mvns	r3, r3
 800158a:	4013      	ands	r3, r2
 800158c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	795b      	ldrb	r3, [r3, #5]
 8001592:	2b10      	cmp	r3, #16
 8001594:	d10e      	bne.n	80015b4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001596:	4919      	ldr	r1, [pc, #100]	; (80015fc <EXTI_Init+0xe0>)
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <EXTI_Init+0xe0>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80015a4:	4915      	ldr	r1, [pc, #84]	; (80015fc <EXTI_Init+0xe0>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <EXTI_Init+0xe0>)
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015b2:	e01d      	b.n	80015f0 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <EXTI_Init+0xe0>)
 80015b6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	795b      	ldrb	r3, [r3, #5]
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	6811      	ldr	r1, [r2, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015d2:	e00d      	b.n	80015f0 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	43d2      	mvns	r2, r2
 80015ec:	400a      	ands	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
  }
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40013c00 	.word	0x40013c00

08001600 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <EXTI_ClearITPendingBit+0x1c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6153      	str	r3, [r2, #20]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40013c00 	.word	0x40013c00

08001620 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e076      	b.n	800172a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800163c:	2201      	movs	r2, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d165      	bne.n	8001724 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2103      	movs	r1, #3
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	401a      	ands	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	4619      	mov	r1, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d003      	beq.n	8001696 <GPIO_Init+0x76>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d12e      	bne.n	80016f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2103      	movs	r1, #3
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	4619      	mov	r1, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	799b      	ldrb	r3, [r3, #6]
 80016e2:	4619      	mov	r1, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2103      	movs	r1, #3
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	79db      	ldrb	r3, [r3, #7]
 8001714:	4619      	mov	r1, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d985      	bls.n	800163c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	71da      	strb	r2, [r3, #7]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80017c0:	e002      	b.n	80017c8 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	835a      	strh	r2, [r3, #26]
  }
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017ec:	787a      	ldrb	r2, [r7, #1]
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	b29b      	uxth	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	210f      	movs	r1, #15
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	ea02 0103 	and.w	r1, r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f100 0208 	add.w	r2, r0, #8
 800182e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	b29b      	uxth	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <I2C_DeInit+0x68>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10a      	bne.n	800188e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001878:	2101      	movs	r1, #1
 800187a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800187e:	f000 fb31 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001882:	2100      	movs	r1, #0
 8001884:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001888:	f000 fb2c 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800188c:	e01c      	b.n	80018c8 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <I2C_DeInit+0x6c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10a      	bne.n	80018ac <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001896:	2101      	movs	r1, #1
 8001898:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800189c:	f000 fb22 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80018a0:	2100      	movs	r1, #0
 80018a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018a6:	f000 fb1d 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80018aa:	e00d      	b.n	80018c8 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <I2C_DeInit+0x70>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d109      	bne.n	80018c8 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80018b4:	2101      	movs	r1, #1
 80018b6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018ba:	f000 fb13 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80018be:	2100      	movs	r1, #0
 80018c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018c4:	f000 fb0e 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40005800 	.word	0x40005800
 80018d8:	40005c00 	.word	0x40005c00

080018dc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018ea:	2300      	movs	r3, #0
 80018ec:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80018ee:	2304      	movs	r3, #4
 80018f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80018f2:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <I2C_Init+0x174>)
 80018f4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	889b      	ldrh	r3, [r3, #4]
 80018fa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80018fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001902:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f9e1 	bl	8001cd0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <I2C_Init+0x178>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800191e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001922:	4313      	orrs	r3, r2
 8001924:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800192a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <I2C_Init+0x17c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d815      	bhi.n	8001976 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800195a:	2b03      	cmp	r3, #3
 800195c:	d801      	bhi.n	8001962 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800195e:	2304      	movs	r3, #4
 8001960:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001966:	4313      	orrs	r3, r2
 8001968:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800196a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800196c:	3301      	adds	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	841a      	strh	r2, [r3, #32]
 8001974:	e040      	b.n	80019f8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	88db      	ldrh	r3, [r3, #6]
 800197a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800197e:	4293      	cmp	r3, r2
 8001980:	d109      	bne.n	8001996 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001994:	e00e      	b.n	80019b4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80019ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80019b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80019be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80019c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80019d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <I2C_Init+0x180>)
 80019e4:	fb82 1203 	smull	r1, r2, r2, r3
 80019e8:	1192      	asrs	r2, r2, #6
 80019ea:	17db      	asrs	r3, r3, #31
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019fc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a16:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001a1a:	f023 0302 	bic.w	r3, r3, #2
 8001a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	889a      	ldrh	r2, [r3, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	895b      	ldrh	r3, [r3, #10]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a36:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	899a      	ldrh	r2, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	891b      	ldrh	r3, [r3, #8]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	811a      	strh	r2, [r3, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	007a1200 	.word	0x007a1200
 8001a54:	431bde83 	.word	0x431bde83
 8001a58:	000186a0 	.word	0x000186a0
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001a82:	e007      	b.n	8001a94 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	801a      	strh	r2, [r3, #0]
  }
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001ac2:	e007      	b.n	8001ad4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	801a      	strh	r2, [r3, #0]
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001b02:	e007      	b.n	8001b14 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	801a      	strh	r2, [r3, #0]
  }
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	70fb      	strb	r3, [r7, #3]
 8001b3e:	e003      	b.n	8001b48 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	821a      	strh	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001b7e:	e007      	b.n	8001b90 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	801a      	strh	r2, [r3, #0]
  }
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	821a      	strh	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	8a1b      	ldrh	r3, [r3, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8a9b      	ldrh	r3, [r3, #20]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8b1b      	ldrh	r3, [r3, #24]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c12:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	401a      	ands	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d102      	bne.n	8001c26 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001c20:	2301      	movs	r3, #1
 8001c22:	75fb      	strb	r3, [r7, #23]
 8001c24:	e001      	b.n	8001c2a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	0f1b      	lsrs	r3, r3, #28
 8001c56:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c5e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3314      	adds	r3, #20
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e005      	b.n	8001c7a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3318      	adds	r3, #24
 8001c78:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
 8001c8a:	e001      	b.n	8001c90 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cb4:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	829a      	strh	r2, [r3, #20]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	2302      	movs	r3, #2
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d007      	beq.n	8001d10 <RCC_GetClocksFreq+0x40>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d009      	beq.n	8001d18 <RCC_GetClocksFreq+0x48>
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d13f      	bne.n	8001d88 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <RCC_GetClocksFreq+0x148>)
 8001d0c:	601a      	str	r2, [r3, #0]
      break;
 8001d0e:	e03f      	b.n	8001d90 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a42      	ldr	r2, [pc, #264]	; (8001e1c <RCC_GetClocksFreq+0x14c>)
 8001d14:	601a      	str	r2, [r3, #0]
      break;
 8001d16:	e03b      	b.n	8001d90 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d20:	0d9b      	lsrs	r3, r3, #22
 8001d22:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <RCC_GetClocksFreq+0x14c>)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d44:	400b      	ands	r3, r1
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	fb03 f302 	mul.w	r3, r3, r2
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e00c      	b.n	8001d6a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <RCC_GetClocksFreq+0x148>)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d60:	400b      	ands	r3, r1
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	fb03 f302 	mul.w	r3, r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	3301      	adds	r3, #1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
      break;
 8001d86:	e003      	b.n	8001d90 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <RCC_GetClocksFreq+0x148>)
 8001d8c:	601a      	str	r2, [r3, #0]
      break;
 8001d8e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d98:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001da0:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <RCC_GetClocksFreq+0x150>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	40da      	lsrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001dc0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	0a9b      	lsrs	r3, r3, #10
 8001dc6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <RCC_GetClocksFreq+0x150>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	40da      	lsrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <RCC_GetClocksFreq+0x144>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001de8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	0b5b      	lsrs	r3, r3, #13
 8001dee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <RCC_GetClocksFreq+0x150>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3724      	adds	r7, #36	; 0x24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40023800 	.word	0x40023800
 8001e18:	00f42400 	.word	0x00f42400
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	20000000 	.word	0x20000000

08001e24 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e36:	490a      	ldr	r1, [pc, #40]	; (8001e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e42:	e006      	b.n	8001e52 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e44:	4906      	ldr	r1, [pc, #24]	; (8001e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e82:	e006      	b.n	8001e92 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4013      	ands	r3, r2
 8001e90:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001ec2:	e006      	b.n	8001ed2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ef6:	490a      	ldr	r1, [pc, #40]	; (8001f20 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <RCC_APB1PeriphResetCmd+0x3c>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001f02:	e006      	b.n	8001f12 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001f04:	4906      	ldr	r1, [pc, #24]	; (8001f20 <RCC_APB1PeriphResetCmd+0x3c>)
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <RCC_APB1PeriphResetCmd+0x3c>)
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	620b      	str	r3, [r1, #32]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f36:	490a      	ldr	r1, [pc, #40]	; (8001f60 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f42:	e006      	b.n	8001f52 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <SPI_I2S_DeInit+0xc4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10a      	bne.n	8001f8a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f74:	2101      	movs	r1, #1
 8001f76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f7a:	f7ff ffd3 	bl	8001f24 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f84:	f7ff ffce 	bl	8001f24 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f88:	e049      	b.n	800201e <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <SPI_I2S_DeInit+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10a      	bne.n	8001fa8 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001f92:	2101      	movs	r1, #1
 8001f94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f98:	f7ff ffa4 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fa2:	f7ff ff9f 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fa6:	e03a      	b.n	800201e <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <SPI_I2S_DeInit+0xcc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d10a      	bne.n	8001fc6 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fb6:	f7ff ff95 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fc0:	f7ff ff90 	bl	8001ee4 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fc4:	e02b      	b.n	800201e <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <SPI_I2S_DeInit+0xd0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10a      	bne.n	8001fe4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fd4:	f7ff ffa6 	bl	8001f24 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fde:	f7ff ffa1 	bl	8001f24 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fe2:	e01c      	b.n	800201e <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <SPI_I2S_DeInit+0xd4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10a      	bne.n	8002002 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001fec:	2101      	movs	r1, #1
 8001fee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ff2:	f7ff ff97 	bl	8001f24 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ffc:	f7ff ff92 	bl	8001f24 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8002000:	e00d      	b.n	800201e <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <SPI_I2S_DeInit+0xd8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d109      	bne.n	800201e <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 800200a:	2101      	movs	r1, #1
 800200c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002010:	f7ff ff88 	bl	8001f24 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002014:	2100      	movs	r1, #0
 8002016:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800201a:	f7ff ff83 	bl	8001f24 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40013000 	.word	0x40013000
 800202c:	40003800 	.word	0x40003800
 8002030:	40003c00 	.word	0x40003c00
 8002034:	40013400 	.word	0x40013400
 8002038:	40015000 	.word	0x40015000
 800203c:	40015400 	.word	0x40015400

08002040 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002040:	b480      	push	{r7}
 8002042:	b08b      	sub	sp, #44	; 0x2c
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800204a:	2300      	movs	r3, #0
 800204c:	837b      	strh	r3, [r7, #26]
 800204e:	2302      	movs	r3, #2
 8002050:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002052:	2300      	movs	r3, #0
 8002054:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002056:	2301      	movs	r3, #1
 8002058:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8b9b      	ldrh	r3, [r3, #28]
 8002072:	b29b      	uxth	r3, r3
 8002074:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002078:	f023 030f 	bic.w	r3, r3, #15
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8b9b      	ldrh	r3, [r3, #28]
 800208c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d104      	bne.n	80020a0 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8002096:	2300      	movs	r3, #0
 8002098:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800209a:	2302      	movs	r3, #2
 800209c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800209e:	e072      	b.n	8002186 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	889b      	ldrh	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80020a8:	2301      	movs	r3, #1
 80020aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80020ac:	e001      	b.n	80020b2 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80020b2:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <I2S_Init+0x1a8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80020be:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <I2S_Init+0x1a8>)
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <I2S_Init+0x1a8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c8:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <I2S_Init+0x1a8>)
 80020cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020d4:	4013      	ands	r3, r2
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <I2S_Init+0x1a8>)
 80020e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80020e8:	0f1b      	lsrs	r3, r3, #28
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <I2S_Init+0x1a8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80020fa:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <I2S_Init+0x1ac>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	fb02 f203 	mul.w	r2, r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	88db      	ldrh	r3, [r3, #6]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d10f      	bne.n	800213a <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0a1a      	lsrs	r2, r3, #8
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	3305      	adds	r3, #5
 8002134:	b29b      	uxth	r3, r3
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e012      	b.n	8002160 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800213a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	461a      	mov	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fbb3 f2f2 	udiv	r2, r3, r2
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	b29b      	uxth	r3, r3
 800215a:	3305      	adds	r3, #5
 800215c:	b29b      	uxth	r3, r3
 800215e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <I2S_Init+0x1b0>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002188:	2b01      	cmp	r3, #1
 800218a:	d902      	bls.n	8002192 <I2S_Init+0x152>
 800218c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d903      	bls.n	800219a <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002192:	2302      	movs	r3, #2
 8002194:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	88da      	ldrh	r2, [r3, #6]
 800219e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	8859      	ldrh	r1, [r3, #2]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021be:	4303      	orrs	r3, r0
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	430b      	orrs	r3, r1
 80021c4:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	8b7b      	ldrh	r3, [r7, #26]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d4:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8b7a      	ldrh	r2, [r7, #26]
 80021da:	839a      	strh	r2, [r3, #28]
}
 80021dc:	bf00      	nop
 80021de:	372c      	adds	r7, #44	; 0x2c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40023800 	.word	0x40023800
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	cccccccd 	.word	0xcccccccd

080021f4 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8b9b      	ldrh	r3, [r3, #28]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8002216:	e007      	b.n	8002228 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8b9b      	ldrh	r3, [r3, #28]
 800221c:	b29b      	uxth	r3, r3
 800221e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002222:	b29a      	uxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	839a      	strh	r2, [r3, #28]
  }
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	819a      	strh	r2, [r3, #12]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	889b      	ldrh	r3, [r3, #4]
 800226e:	b29a      	uxth	r2, r3
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4313      	orrs	r3, r2
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800227a:	e009      	b.n	8002290 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	889b      	ldrh	r3, [r3, #4]
 8002280:	b29a      	uxth	r2, r3
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	43db      	mvns	r3, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	4013      	ands	r3, r2
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	809a      	strh	r2, [r3, #4]
  }
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	4613      	mov	r3, r2
 80022aa:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80022ac:	2300      	movs	r3, #0
 80022ae:	81fb      	strh	r3, [r7, #14]
 80022b0:	2300      	movs	r3, #0
 80022b2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80022c6:	78bb      	ldrb	r3, [r7, #2]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	889b      	ldrh	r3, [r3, #4]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	89bb      	ldrh	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80022dc:	e009      	b.n	80022f2 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	889b      	ldrh	r3, [r3, #4]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	89bb      	ldrh	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4013      	ands	r3, r2
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	809a      	strh	r2, [r3, #4]
  }
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	891b      	ldrh	r3, [r3, #8]
 8002314:	b29a      	uxth	r2, r3
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	4013      	ands	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002338:	b490      	push	{r4, r7}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	460a      	mov	r2, r1
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	4613      	mov	r3, r2
 8002346:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <SYSCFG_EXTILineConfig+0x80>)
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <SYSCFG_EXTILineConfig+0x80>)
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3302      	adds	r3, #2
 8002370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	1c83      	adds	r3, r0, #2
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <SYSCFG_EXTILineConfig+0x80>)
 8002382:	79bb      	ldrb	r3, [r7, #6]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461c      	mov	r4, r3
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <SYSCFG_EXTILineConfig+0x80>)
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3302      	adds	r3, #2
 8002394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002398:	79f9      	ldrb	r1, [r7, #7]
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	431a      	orrs	r2, r3
 80023a8:	1ca3      	adds	r3, r4, #2
 80023aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc90      	pop	{r4, r7}
 80023b6:	4770      	bx	lr
 80023b8:	40013800 	.word	0x40013800

080023bc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a29      	ldr	r2, [pc, #164]	; (8002478 <TIM_TimeBaseInit+0xbc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <TIM_TimeBaseInit+0x44>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a28      	ldr	r2, [pc, #160]	; (800247c <TIM_TimeBaseInit+0xc0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00f      	beq.n	8002400 <TIM_TimeBaseInit+0x44>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d00b      	beq.n	8002400 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <TIM_TimeBaseInit+0xc4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <TIM_TimeBaseInit+0x44>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <TIM_TimeBaseInit+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d003      	beq.n	8002400 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a23      	ldr	r2, [pc, #140]	; (8002488 <TIM_TimeBaseInit+0xcc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d108      	bne.n	8002412 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002400:	89fb      	ldrh	r3, [r7, #14]
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	885a      	ldrh	r2, [r3, #2]
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	4313      	orrs	r3, r2
 8002410:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <TIM_TimeBaseInit+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00c      	beq.n	8002434 <TIM_TimeBaseInit+0x78>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <TIM_TimeBaseInit+0xd4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d008      	beq.n	8002434 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	891a      	ldrh	r2, [r3, #8]
 800242e:	89fb      	ldrh	r3, [r7, #14]
 8002430:	4313      	orrs	r3, r2
 8002432:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	89fa      	ldrh	r2, [r7, #14]
 8002438:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <TIM_TimeBaseInit+0xbc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <TIM_TimeBaseInit+0x9e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <TIM_TimeBaseInit+0xc0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d104      	bne.n	8002464 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7a9b      	ldrb	r3, [r3, #10]
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	829a      	strh	r2, [r3, #20]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000
 800247c:	40010400 	.word	0x40010400
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40001000 	.word	0x40001000
 8002490:	40001400 	.word	0x40001400

08002494 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f04f 32ff 	mov.w	r2, #4294967295
 80024a2:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	729a      	strb	r2, [r3, #10]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80024ea:	e007      	b.n	80024fc <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	801a      	strh	r2, [r3, #0]
  }
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	899b      	ldrh	r3, [r3, #12]
 8002522:	b29a      	uxth	r2, r3
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	4313      	orrs	r3, r2
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800252e:	e009      	b.n	8002544 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	899b      	ldrh	r3, [r3, #12]
 8002534:	b29a      	uxth	r2, r3
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	43db      	mvns	r3, r3
 800253a:	b29b      	uxth	r3, r3
 800253c:	4013      	ands	r3, r2
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	819a      	strh	r2, [r3, #12]
  }
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	43db      	mvns	r3, r3
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	821a      	strh	r2, [r3, #16]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	889b      	ldrh	r3, [r3, #4]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	b29a      	uxth	r2, r3
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	4313      	orrs	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	809a      	strh	r2, [r3, #4]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <STM_EVAL_LEDInit+0x50>)
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fc2f 	bl	8001e24 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <STM_EVAL_LEDInit+0x54>)
 80025ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80025d0:	2301      	movs	r3, #1
 80025d2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80025dc:	2302      	movs	r3, #2
 80025de:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <STM_EVAL_LEDInit+0x58>)
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	f107 0208 	add.w	r2, r7, #8
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f816 	bl	8001620 <GPIO_Init>
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08005990 	.word	0x08005990
 8002600:	08005988 	.word	0x08005988
 8002604:	20000010 	.word	0x20000010

08002608 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <STM_EVAL_LEDOn+0x28>)
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	79fa      	ldrb	r2, [r7, #7]
 800261c:	4905      	ldr	r1, [pc, #20]	; (8002634 <STM_EVAL_LEDOn+0x2c>)
 800261e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002622:	831a      	strh	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20000010 	.word	0x20000010
 8002634:	08005988 	.word	0x08005988

08002638 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	80fb      	strh	r3, [r7, #6]
 8002644:	460b      	mov	r3, r1
 8002646:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8002648:	797b      	ldrb	r3, [r7, #5]
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d80b      	bhi.n	8002666 <EVAL_AUDIO_Init+0x2e>
 800264e:	797a      	ldrb	r2, [r7, #5]
 8002650:	4613      	mov	r3, r2
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <EVAL_AUDIO_Init+0x54>)
 8002658:	fb82 1203 	smull	r1, r2, r2, r3
 800265c:	1152      	asrs	r2, r2, #5
 800265e:	17db      	asrs	r3, r3, #31
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e000      	b.n	8002668 <EVAL_AUDIO_Init+0x30>
 8002666:	2364      	movs	r3, #100	; 0x64
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f000 f8f3 	bl	8002858 <Codec_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 8002678:	2301      	movs	r3, #1
 800267a:	e002      	b.n	8002682 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 800267c:	f000 fcb4 	bl	8002fe8 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8002680:	2300      	movs	r3, #0
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <EVAL_AUDIO_Play+0x60>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 80026a0:	f000 f986 	bl	80029b0 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf28      	it	cs
 80026b0:	4613      	movcs	r3, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f000 fd40 	bl	8003138 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <EVAL_AUDIO_Play+0x60>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c0:	4293      	cmp	r3, r2
 80026c2:	bf28      	it	cs
 80026c4:	4613      	movcs	r3, r2
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <EVAL_AUDIO_Play+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <EVAL_AUDIO_Play+0x60>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d6:	4293      	cmp	r3, r2
 80026d8:	bf28      	it	cs
 80026da:	4613      	movcs	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <EVAL_AUDIO_Play+0x68>)
 80026e4:	6013      	str	r3, [r2, #0]
  
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000020 	.word	0x20000020
 80026f4:	20000024 	.word	0x20000024
 80026f8:	2000056c 	.word	0x2000056c

080026fc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <Audio_MAL_IRQHandler+0xe0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <Audio_MAL_IRQHandler+0xe4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800270e:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <Audio_MAL_IRQHandler+0xec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	4610      	mov	r0, r2
 800271a:	f7fe fe5b 	bl	80013d4 <DMA_GetFlagStatus>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 ffcb 	bl	80036c4 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <Audio_MAL_IRQHandler+0xec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7fe fe87 	bl	800144c <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <Audio_MAL_IRQHandler+0xf0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f7fe fe43 	bl	80013d4 <DMA_GetFlagStatus>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 ffa5 	bl	80036a8 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <Audio_MAL_IRQHandler+0xf0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7fe fe6f 	bl	800144c <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <Audio_MAL_IRQHandler+0xf4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7fe fe2b 	bl	80013d4 <DMA_GetFlagStatus>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d115      	bne.n	80027b0 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <Audio_MAL_IRQHandler+0xf8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7fe fe20 	bl	80013d4 <DMA_GetFlagStatus>
 8002794:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <Audio_MAL_IRQHandler+0xfc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7fe fe15 	bl	80013d4 <DMA_GetFlagStatus>
 80027aa:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 80027b0:	463b      	mov	r3, r7
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 ff9c 	bl	80036f0 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <Audio_MAL_IRQHandler+0xe8>)
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <Audio_MAL_IRQHandler+0xf4>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <Audio_MAL_IRQHandler+0xf8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <Audio_MAL_IRQHandler+0xfc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe fe3d 	bl	800144c <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000056c 	.word	0x2000056c
 80027e0:	20000024 	.word	0x20000024
 80027e4:	20000034 	.word	0x20000034
 80027e8:	20000040 	.word	0x20000040
 80027ec:	20000044 	.word	0x20000044
 80027f0:	2000004c 	.word	0x2000004c
 80027f4:	20000048 	.word	0x20000048
 80027f8:	20000050 	.word	0x20000050

080027fc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002800:	f7ff ff7c 	bl	80026fc <Audio_MAL_IRQHandler>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800280c:	f7ff ff76 	bl	80026fc <Audio_MAL_IRQHandler>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002818:	2102      	movs	r1, #2
 800281a:	480d      	ldr	r0, [pc, #52]	; (8002850 <SPI3_IRQHandler+0x3c>)
 800281c:	f7ff fd70 	bl	8002300 <SPI_I2S_GetFlagStatus>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <SPI3_IRQHandler+0x40>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d106      	bne.n	800283c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800282e:	f000 ff57 	bl	80036e0 <EVAL_AUDIO_GetSampleCallBack>
 8002832:	4603      	mov	r3, r0
 8002834:	4619      	mov	r1, r3
 8002836:	2004      	movs	r0, #4
 8002838:	f7fe fc30 	bl	800109c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800283c:	f000 ff50 	bl	80036e0 <EVAL_AUDIO_GetSampleCallBack>
 8002840:	4603      	mov	r3, r0
 8002842:	4619      	mov	r1, r3
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <SPI3_IRQHandler+0x3c>)
 8002846:	f7ff fcf5 	bl	8002234 <SPI_I2S_SendData>
  }
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40003c00 	.word	0x40003c00
 8002854:	2000002c 	.word	0x2000002c

08002858 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	603a      	str	r2, [r7, #0]
 8002862:	80fb      	strh	r3, [r7, #6]
 8002864:	460b      	mov	r3, r1
 8002866:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 800286c:	f000 fb1a 	bl	8002ea4 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8002870:	f000 f8e2 	bl	8002a38 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 8002874:	f000 faa8 	bl	8002dc8 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 8002878:	2101      	movs	r1, #1
 800287a:	2002      	movs	r0, #2
 800287c:	f000 f8f0 	bl	8002a60 <Codec_WriteRegister>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8002888:	21af      	movs	r1, #175	; 0xaf
 800288a:	2004      	movs	r0, #4
 800288c:	f000 f8e8 	bl	8002a60 <Codec_WriteRegister>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <Codec_Init+0x150>)
 800289a:	22af      	movs	r2, #175	; 0xaf
 800289c:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 800289e:	2181      	movs	r1, #129	; 0x81
 80028a0:	2005      	movs	r0, #5
 80028a2:	f000 f8dd 	bl	8002a60 <Codec_WriteRegister>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 80028ae:	2104      	movs	r1, #4
 80028b0:	2006      	movs	r0, #6
 80028b2:	f000 f8d5 	bl	8002a60 <Codec_WriteRegister>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 80028be:	797b      	ldrb	r3, [r7, #5]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f87d 	bl	80029c0 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <Codec_Init+0x154>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d127      	bne.n	800291e <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 80028ce:	2101      	movs	r1, #1
 80028d0:	2008      	movs	r0, #8
 80028d2:	f000 f8c5 	bl	8002a60 <Codec_WriteRegister>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 80028de:	2101      	movs	r1, #1
 80028e0:	2009      	movs	r0, #9
 80028e2:	f000 f8bd 	bl	8002a60 <Codec_WriteRegister>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 80028ee:	21c0      	movs	r1, #192	; 0xc0
 80028f0:	200e      	movs	r0, #14
 80028f2:	f000 f8b5 	bl	8002a60 <Codec_WriteRegister>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 80028fe:	2100      	movs	r1, #0
 8002900:	2014      	movs	r0, #20
 8002902:	f000 f8ad 	bl	8002a60 <Codec_WriteRegister>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 800290e:	2100      	movs	r1, #0
 8002910:	2015      	movs	r0, #21
 8002912:	f000 f8a5 	bl	8002a60 <Codec_WriteRegister>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 800291e:	219e      	movs	r1, #158	; 0x9e
 8002920:	2002      	movs	r0, #2
 8002922:	f000 f89d 	bl	8002a60 <Codec_WriteRegister>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 800292e:	2100      	movs	r1, #0
 8002930:	200a      	movs	r0, #10
 8002932:	f000 f895 	bl	8002a60 <Codec_WriteRegister>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <Codec_Init+0x154>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d007      	beq.n	8002956 <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 8002946:	2104      	movs	r1, #4
 8002948:	200e      	movs	r0, #14
 800294a:	f000 f889 	bl	8002a60 <Codec_WriteRegister>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 8002956:	2100      	movs	r1, #0
 8002958:	2027      	movs	r0, #39	; 0x27
 800295a:	f000 f881 	bl	8002a60 <Codec_WriteRegister>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 8002966:	210f      	movs	r1, #15
 8002968:	201f      	movs	r0, #31
 800296a:	f000 f879 	bl	8002a60 <Codec_WriteRegister>
 800296e:	4602      	mov	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 8002976:	210a      	movs	r1, #10
 8002978:	201a      	movs	r0, #26
 800297a:	f000 f871 	bl	8002a60 <Codec_WriteRegister>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 8002986:	210a      	movs	r1, #10
 8002988:	201b      	movs	r0, #27
 800298a:	f000 f869 	bl	8002a60 <Codec_WriteRegister>
 800298e:	4602      	mov	r2, r0
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f000 fa42 	bl	8002e20 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200001bc 	.word	0x200001bc
 80029ac:	2000002c 	.word	0x2000002c

080029b0 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	2be6      	cmp	r3, #230	; 0xe6
 80029d2:	d916      	bls.n	8002a02 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	3319      	adds	r3, #25
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	2020      	movs	r0, #32
 80029de:	f000 f83f 	bl	8002a60 <Codec_WriteRegister>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3319      	adds	r3, #25
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4619      	mov	r1, r3
 80029f2:	2021      	movs	r0, #33	; 0x21
 80029f4:	f000 f834 	bl	8002a60 <Codec_WriteRegister>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e015      	b.n	8002a2e <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	3319      	adds	r3, #25
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	2020      	movs	r0, #32
 8002a0c:	f000 f828 	bl	8002a60 <Codec_WriteRegister>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	3319      	adds	r3, #25
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2021      	movs	r0, #33	; 0x21
 8002a22:	f000 f81d 	bl	8002a60 <Codec_WriteRegister>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2110      	movs	r1, #16
 8002a40:	4806      	ldr	r0, [pc, #24]	; (8002a5c <Codec_Reset+0x24>)
 8002a42:	f7fe feaf 	bl	80017a4 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 8002a46:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8002a4a:	f000 fabb 	bl	8002fc4 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2110      	movs	r1, #16
 8002a52:	4802      	ldr	r0, [pc, #8]	; (8002a5c <Codec_Reset+0x24>)
 8002a54:	f7fe fea6 	bl	80017a4 <GPIO_WriteBit>
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40020c00 	.word	0x40020c00

08002a60 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002a76:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a7a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a7c:	e00a      	b.n	8002a94 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4948      	ldr	r1, [pc, #288]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002a86:	600a      	str	r2, [r1, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <Codec_WriteRegister+0x34>
 8002a8c:	f000 fe04 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002a90:	4603      	mov	r3, r0
 8002a92:	e085      	b.n	8002ba0 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a94:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a98:	4844      	ldr	r0, [pc, #272]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002a9a:	f7ff f8cd 	bl	8001c38 <I2C_GetFlagStatus>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ec      	bne.n	8002a7e <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4841      	ldr	r0, [pc, #260]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002aa8:	f7fe fffa 	bl	8001aa0 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002aac:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab2:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ab4:	e00a      	b.n	8002acc <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	493a      	ldr	r1, [pc, #232]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002abe:	600a      	str	r2, [r1, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <Codec_WriteRegister+0x6c>
 8002ac4:	f000 fde8 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	e069      	b.n	8002ba0 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002acc:	4938      	ldr	r1, [pc, #224]	; (8002bb0 <Codec_WriteRegister+0x150>)
 8002ace:	4837      	ldr	r0, [pc, #220]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002ad0:	f7ff f882 	bl	8001bd8 <I2C_CheckEvent>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ed      	beq.n	8002ab6 <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2194      	movs	r1, #148	; 0x94
 8002ade:	4833      	ldr	r0, [pc, #204]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002ae0:	f7ff f81e 	bl	8001b20 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002ae6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aea:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002aec:	e00a      	b.n	8002b04 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	492c      	ldr	r1, [pc, #176]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002af6:	600a      	str	r2, [r1, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <Codec_WriteRegister+0xa4>
 8002afc:	f000 fdcc 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002b00:	4603      	mov	r3, r0
 8002b02:	e04d      	b.n	8002ba0 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002b04:	492b      	ldr	r1, [pc, #172]	; (8002bb4 <Codec_WriteRegister+0x154>)
 8002b06:	4829      	ldr	r0, [pc, #164]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b08:	f7ff f866 	bl	8001bd8 <I2C_CheckEvent>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ed      	beq.n	8002aee <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4825      	ldr	r0, [pc, #148]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b18:	f7ff f840 	bl	8001b9c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b22:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002b24:	e00a      	b.n	8002b3c <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	491e      	ldr	r1, [pc, #120]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b2e:	600a      	str	r2, [r1, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <Codec_WriteRegister+0xdc>
 8002b34:	f000 fdb0 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	e031      	b.n	8002ba0 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002b3c:	491e      	ldr	r1, [pc, #120]	; (8002bb8 <Codec_WriteRegister+0x158>)
 8002b3e:	481b      	ldr	r0, [pc, #108]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b40:	f7ff f84a 	bl	8001bd8 <I2C_CheckEvent>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ed      	beq.n	8002b26 <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4817      	ldr	r0, [pc, #92]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b50:	f7ff f824 	bl	8001b9c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b56:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b5a:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002b5c:	e008      	b.n	8002b70 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1e5a      	subs	r2, r3, #1
 8002b64:	4910      	ldr	r1, [pc, #64]	; (8002ba8 <Codec_WriteRegister+0x148>)
 8002b66:	600a      	str	r2, [r1, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <Codec_WriteRegister+0x110>
 8002b6c:	f000 fd94 	bl	8003698 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <Codec_WriteRegister+0x15c>)
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b74:	f7ff f860 	bl	8001c38 <I2C_GetFlagStatus>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ef      	beq.n	8002b5e <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002b7e:	2101      	movs	r1, #1
 8002b80:	480a      	ldr	r0, [pc, #40]	; (8002bac <Codec_WriteRegister+0x14c>)
 8002b82:	f7fe ffad 	bl	8001ae0 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f819 	bl	8002bc0 <Codec_ReadRegister>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	79bb      	ldrb	r3, [r7, #6]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000028 	.word	0x20000028
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	00030001 	.word	0x00030001
 8002bb4:	00070082 	.word	0x00070082
 8002bb8:	00070080 	.word	0x00070080
 8002bbc:	10000004 	.word	0x10000004

08002bc0 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002bd0:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002bd4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002bd6:	e00a      	b.n	8002bee <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bd8:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	4972      	ldr	r1, [pc, #456]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002be0:	600a      	str	r2, [r1, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <Codec_ReadRegister+0x2e>
 8002be6:	f000 fd57 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002bea:	4603      	mov	r3, r0
 8002bec:	e0d7      	b.n	8002d9e <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002bee:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002bf2:	486e      	ldr	r0, [pc, #440]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002bf4:	f7ff f820 	bl	8001c38 <I2C_GetFlagStatus>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ec      	bne.n	8002bd8 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	486a      	ldr	r0, [pc, #424]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c02:	f7fe ff4d 	bl	8001aa0 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c06:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c0c:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c0e:	e00a      	b.n	8002c26 <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c10:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	4964      	ldr	r1, [pc, #400]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c18:	600a      	str	r2, [r1, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <Codec_ReadRegister+0x66>
 8002c1e:	f000 fd3b 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002c22:	4603      	mov	r3, r0
 8002c24:	e0bb      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c26:	4962      	ldr	r1, [pc, #392]	; (8002db0 <Codec_ReadRegister+0x1f0>)
 8002c28:	4860      	ldr	r0, [pc, #384]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c2a:	f7fe ffd5 	bl	8001bd8 <I2C_CheckEvent>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ed      	beq.n	8002c10 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2194      	movs	r1, #148	; 0x94
 8002c38:	485c      	ldr	r0, [pc, #368]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c3a:	f7fe ff71 	bl	8001b20 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c44:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002c46:	e00a      	b.n	8002c5e <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c48:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	4956      	ldr	r1, [pc, #344]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c50:	600a      	str	r2, [r1, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <Codec_ReadRegister+0x9e>
 8002c56:	f000 fd1f 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	e09f      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002c5e:	4955      	ldr	r1, [pc, #340]	; (8002db4 <Codec_ReadRegister+0x1f4>)
 8002c60:	4852      	ldr	r0, [pc, #328]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c62:	f7fe ffb9 	bl	8001bd8 <I2C_CheckEvent>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ed      	beq.n	8002c48 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	484e      	ldr	r0, [pc, #312]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c72:	f7fe ff93 	bl	8001b9c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c76:	4b4c      	ldr	r3, [pc, #304]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c7c:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c7e:	e00a      	b.n	8002c96 <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c80:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	4948      	ldr	r1, [pc, #288]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002c88:	600a      	str	r2, [r1, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <Codec_ReadRegister+0xd6>
 8002c8e:	f000 fd03 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002c92:	4603      	mov	r3, r0
 8002c94:	e083      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c96:	4948      	ldr	r1, [pc, #288]	; (8002db8 <Codec_ReadRegister+0x1f8>)
 8002c98:	4844      	ldr	r0, [pc, #272]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002c9a:	f7fe ffcd 	bl	8001c38 <I2C_GetFlagStatus>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ed      	beq.n	8002c80 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4841      	ldr	r0, [pc, #260]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002ca8:	f7fe fefa 	bl	8001aa0 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cb2:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002cb4:	e00a      	b.n	8002ccc <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	493a      	ldr	r1, [pc, #232]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002cbe:	600a      	str	r2, [r1, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <Codec_ReadRegister+0x10c>
 8002cc4:	f000 fce8 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	e068      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ccc:	4938      	ldr	r1, [pc, #224]	; (8002db0 <Codec_ReadRegister+0x1f0>)
 8002cce:	4837      	ldr	r0, [pc, #220]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002cd0:	f7fe ff82 	bl	8001bd8 <I2C_CheckEvent>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ed      	beq.n	8002cb6 <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002cda:	2201      	movs	r2, #1
 8002cdc:	2194      	movs	r1, #148	; 0x94
 8002cde:	4833      	ldr	r0, [pc, #204]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002ce0:	f7fe ff1e 	bl	8001b20 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cea:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002cec:	e00a      	b.n	8002d04 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cee:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	492c      	ldr	r1, [pc, #176]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002cf6:	600a      	str	r2, [r1, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <Codec_ReadRegister+0x144>
 8002cfc:	f000 fccc 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002d00:	4603      	mov	r3, r0
 8002d02:	e04c      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002d04:	492d      	ldr	r1, [pc, #180]	; (8002dbc <Codec_ReadRegister+0x1fc>)
 8002d06:	4829      	ldr	r0, [pc, #164]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d08:	f7fe ff96 	bl	8001c38 <I2C_GetFlagStatus>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ed      	beq.n	8002cee <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002d12:	2100      	movs	r1, #0
 8002d14:	4825      	ldr	r0, [pc, #148]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d16:	f7fe ff21 	bl	8001b5c <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d1c:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d22:	f7fe fedd 	bl	8001ae0 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d2c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002d2e:	e00a      	b.n	8002d46 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	491c      	ldr	r1, [pc, #112]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d38:	600a      	str	r2, [r1, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <Codec_ReadRegister+0x186>
 8002d3e:	f000 fcab 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002d42:	4603      	mov	r3, r0
 8002d44:	e02b      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002d46:	491e      	ldr	r1, [pc, #120]	; (8002dc0 <Codec_ReadRegister+0x200>)
 8002d48:	4818      	ldr	r0, [pc, #96]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d4a:	f7fe ff75 	bl	8001c38 <I2C_GetFlagStatus>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ed      	beq.n	8002d30 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002d54:	4815      	ldr	r0, [pc, #84]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d56:	f7fe ff31 	bl	8001bbc <I2C_ReceiveData>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d64:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002d66:	e00a      	b.n	8002d7e <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	490e      	ldr	r1, [pc, #56]	; (8002da8 <Codec_ReadRegister+0x1e8>)
 8002d70:	600a      	str	r2, [r1, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <Codec_ReadRegister+0x1be>
 8002d76:	f000 fc8f 	bl	8003698 <Codec_TIMEOUT_UserCallback>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	e00f      	b.n	8002d9e <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ed      	bne.n	8002d68 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4807      	ldr	r0, [pc, #28]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d90:	f7fe fee4 	bl	8001b5c <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002d94:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <Codec_ReadRegister+0x204>)
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <Codec_ReadRegister+0x1ec>)
 8002d98:	f7fe ff82 	bl	8001ca0 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000028 	.word	0x20000028
 8002dac:	40005400 	.word	0x40005400
 8002db0:	00030001 	.word	0x00030001
 8002db4:	00070082 	.word	0x00070082
 8002db8:	10000004 	.word	0x10000004
 8002dbc:	10000002 	.word	0x10000002
 8002dc0:	10000040 	.word	0x10000040
 8002dc4:	10000400 	.word	0x10000400

08002dc8 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002dd4:	f7ff f846 	bl	8001e64 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002dd8:	480f      	ldr	r0, [pc, #60]	; (8002e18 <Codec_CtrlInterface_Init+0x50>)
 8002dda:	f7fe fd45 	bl	8001868 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002dde:	2300      	movs	r3, #0
 8002de0:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002de2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002de6:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002de8:	2333      	movs	r3, #51	; 0x33
 8002dea:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df0:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df6:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <Codec_CtrlInterface_Init+0x54>)
 8002dfa:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4806      	ldr	r0, [pc, #24]	; (8002e18 <Codec_CtrlInterface_Init+0x50>)
 8002e00:	f7fe fe2e 	bl	8001a60 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <Codec_CtrlInterface_Init+0x50>)
 8002e0a:	f7fe fd67 	bl	80018dc <I2C_Init>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40005400 	.word	0x40005400
 8002e1c:	000186a0 	.word	0x000186a0

08002e20 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e2e:	f7ff f819 	bl	8001e64 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002e32:	481a      	ldr	r0, [pc, #104]	; (8002e9c <Codec_AudioInterface_Init+0x7c>)
 8002e34:	f7ff f896 	bl	8001f64 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002e40:	2300      	movs	r3, #0
 8002e42:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002e44:	2300      	movs	r3, #0
 8002e46:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4c:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e52:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002e54:	f107 0318 	add.w	r3, r7, #24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4810      	ldr	r0, [pc, #64]	; (8002e9c <Codec_AudioInterface_Init+0x7c>)
 8002e5c:	f7ff f8f0 	bl	8002040 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <Codec_AudioInterface_Init+0x80>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d114      	bne.n	8002e92 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002e68:	2101      	movs	r1, #1
 8002e6a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002e6e:	f7fe fff9 	bl	8001e64 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	4619      	mov	r1, r3
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe f8af 	bl	8000fe8 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fe f8df 	bl	8001050 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40003c00 	.word	0x40003c00
 8002ea0:	2000002c 	.word	0x2000002c

08002ea4 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2008      	movs	r0, #8
 8002eae:	f7fe ffb9 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4839      	ldr	r0, [pc, #228]	; (8002fb0 <Codec_GPIO_Init+0x10c>)
 8002ecc:	f7fe fba8 	bl	8001620 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2007      	movs	r0, #7
 8002ed4:	f7fe ffa6 	bl	8001e24 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002ed8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002edc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002eee:	463b      	mov	r3, r7
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4830      	ldr	r0, [pc, #192]	; (8002fb4 <Codec_GPIO_Init+0x110>)
 8002ef4:	f7fe fb94 	bl	8001620 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002ef8:	2204      	movs	r2, #4
 8002efa:	2106      	movs	r1, #6
 8002efc:	482d      	ldr	r0, [pc, #180]	; (8002fb4 <Codec_GPIO_Init+0x110>)
 8002efe:	f7fe fc69 	bl	80017d4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002f02:	2204      	movs	r2, #4
 8002f04:	2109      	movs	r1, #9
 8002f06:	482b      	ldr	r0, [pc, #172]	; (8002fb4 <Codec_GPIO_Init+0x110>)
 8002f08:	f7fe fc64 	bl	80017d4 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002f0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f10:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f12:	2302      	movs	r3, #2
 8002f14:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f16:	2302      	movs	r3, #2
 8002f18:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002f22:	463b      	mov	r3, r7
 8002f24:	4619      	mov	r1, r3
 8002f26:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <Codec_GPIO_Init+0x114>)
 8002f28:	f7fe fb7a 	bl	8001620 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4822      	ldr	r0, [pc, #136]	; (8002fbc <Codec_GPIO_Init+0x118>)
 8002f32:	f7fe fc4f 	bl	80017d4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002f36:	2206      	movs	r2, #6
 8002f38:	210a      	movs	r1, #10
 8002f3a:	481f      	ldr	r0, [pc, #124]	; (8002fb8 <Codec_GPIO_Init+0x114>)
 8002f3c:	f7fe fc4a 	bl	80017d4 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002f40:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <Codec_GPIO_Init+0x11c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d00c      	beq.n	8002f62 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002f48:	2310      	movs	r3, #16
 8002f4a:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4619      	mov	r1, r3
 8002f50:	481a      	ldr	r0, [pc, #104]	; (8002fbc <Codec_GPIO_Init+0x118>)
 8002f52:	f7fe fb65 	bl	8001620 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002f56:	2206      	movs	r2, #6
 8002f58:	210c      	movs	r1, #12
 8002f5a:	4817      	ldr	r0, [pc, #92]	; (8002fb8 <Codec_GPIO_Init+0x114>)
 8002f5c:	f7fe fc3a 	bl	80017d4 <GPIO_PinAFConfig>
 8002f60:	e00e      	b.n	8002f80 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002f62:	2101      	movs	r1, #1
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe ff5d 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002f6a:	2310      	movs	r3, #16
 8002f6c:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f76:	463b      	mov	r3, r7
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4810      	ldr	r0, [pc, #64]	; (8002fbc <Codec_GPIO_Init+0x118>)
 8002f7c:	f7fe fb50 	bl	8001620 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f84:	2302      	movs	r3, #2
 8002f86:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002f94:	463b      	mov	r3, r7
 8002f96:	4619      	mov	r1, r3
 8002f98:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <Codec_GPIO_Init+0x114>)
 8002f9a:	f7fe fb41 	bl	8001620 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	2107      	movs	r1, #7
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <Codec_GPIO_Init+0x114>)
 8002fa4:	f7fe fc16 	bl	80017d4 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	2000002c 	.word	0x2000002c

08002fc4 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002fcc:	e002      	b.n	8002fd4 <Delay+0x10>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f9      	bne.n	8002fce <Delay+0xa>
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop

08002fe8 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <Audio_MAL_Init+0x130>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d16e      	bne.n	80030d4 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <Audio_MAL_Init+0x134>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe ff11 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <Audio_MAL_Init+0x138>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe f9c7 	bl	800139c <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <Audio_MAL_Init+0x138>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f85e 	bl	80010d4 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8003018:	4b42      	ldr	r3, [pc, #264]	; (8003124 <Audio_MAL_Init+0x13c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <Audio_MAL_Init+0x140>)
 800301e:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <Audio_MAL_Init+0x144>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a40      	ldr	r2, [pc, #256]	; (8003128 <Audio_MAL_Init+0x140>)
 8003026:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8003028:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <Audio_MAL_Init+0x140>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <Audio_MAL_Init+0x140>)
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8003034:	4b3c      	ldr	r3, [pc, #240]	; (8003128 <Audio_MAL_Init+0x140>)
 8003036:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800303a:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <Audio_MAL_Init+0x140>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <Audio_MAL_Init+0x140>)
 8003044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003048:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <Audio_MAL_Init+0x140>)
 800304c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003050:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8003052:	4b35      	ldr	r3, [pc, #212]	; (8003128 <Audio_MAL_Init+0x140>)
 8003054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003058:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <Audio_MAL_Init+0x140>)
 800305c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <Audio_MAL_Init+0x140>)
 8003064:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <Audio_MAL_Init+0x140>)
 800306c:	2200      	movs	r2, #0
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <Audio_MAL_Init+0x140>)
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <Audio_MAL_Init+0x140>)
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <Audio_MAL_Init+0x140>)
 800307e:	2200      	movs	r2, #0
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <Audio_MAL_Init+0x138>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4928      	ldr	r1, [pc, #160]	; (8003128 <Audio_MAL_Init+0x140>)
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe f8f7 	bl	800127c <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <Audio_MAL_Init+0x138>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	2110      	movs	r1, #16
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fa06 	bl	80014a8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <Audio_MAL_Init+0x138>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	2108      	movs	r1, #8
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe f9ff 	bl	80014a8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <Audio_MAL_Init+0x138>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	2186      	movs	r1, #134	; 0x86
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f9f8 	bl	80014a8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <Audio_MAL_Init+0x148>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 80030c0:	2300      	movs	r3, #0
 80030c2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 80030c4:	2300      	movs	r3, #0
 80030c6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fd32 	bl	8000b38 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <Audio_MAL_Init+0x130>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 80030dc:	2201      	movs	r2, #1
 80030de:	2102      	movs	r1, #2
 80030e0:	4814      	ldr	r0, [pc, #80]	; (8003134 <Audio_MAL_Init+0x14c>)
 80030e2:	f7ff f8b7 	bl	8002254 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 80030e6:	e012      	b.n	800310e <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 80030e8:	f000 f86c 	bl	80031c4 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2171      	movs	r1, #113	; 0x71
 80030f0:	4810      	ldr	r0, [pc, #64]	; (8003134 <Audio_MAL_Init+0x14c>)
 80030f2:	f7ff f8d3 	bl	800229c <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 80030f6:	2333      	movs	r3, #51	; 0x33
 80030f8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 80030fa:	2300      	movs	r3, #0
 80030fc:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 80030fe:	2300      	movs	r3, #0
 8003100:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003102:	2301      	movs	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fd15 	bl	8000b38 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000002c 	.word	0x2000002c
 800311c:	20000030 	.word	0x20000030
 8003120:	20000034 	.word	0x20000034
 8003124:	200001c0 	.word	0x200001c0
 8003128:	200005ac 	.word	0x200005ac
 800312c:	20000038 	.word	0x20000038
 8003130:	2000003c 	.word	0x2000003c
 8003134:	40003c00 	.word	0x40003c00

08003138 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <Audio_MAL_Play+0x7c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d112      	bne.n	8003170 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <Audio_MAL_Play+0x80>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <Audio_MAL_Play+0x80>)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <Audio_MAL_Play+0x84>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4917      	ldr	r1, [pc, #92]	; (80031b8 <Audio_MAL_Play+0x80>)
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe f88d 	bl	800127c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <Audio_MAL_Play+0x84>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe f917 	bl	800139c <DMA_Cmd>
 800316e:	e011      	b.n	8003194 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <Audio_MAL_Play+0x80>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003176:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <Audio_MAL_Play+0x80>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <Audio_MAL_Play+0x84>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	490d      	ldr	r1, [pc, #52]	; (80031b8 <Audio_MAL_Play+0x80>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f87a 	bl	800127c <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <Audio_MAL_Play+0x84>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe f904 	bl	800139c <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <Audio_MAL_Play+0x88>)
 8003196:	8b9b      	ldrh	r3, [r3, #28]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 80031a2:	2101      	movs	r1, #1
 80031a4:	4806      	ldr	r0, [pc, #24]	; (80031c0 <Audio_MAL_Play+0x88>)
 80031a6:	f7ff f825 	bl	80021f4 <I2S_Cmd>
  }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000002c 	.word	0x2000002c
 80031b8:	200005ac 	.word	0x200005ac
 80031bc:	20000034 	.word	0x20000034
 80031c0:	40003c00 	.word	0x40003c00

080031c4 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 80031ca:	2101      	movs	r1, #1
 80031cc:	4813      	ldr	r0, [pc, #76]	; (800321c <DAC_Config+0x58>)
 80031ce:	f7fe fe29 	bl	8001e24 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80031d2:	2101      	movs	r1, #1
 80031d4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80031d8:	f7fe fe44 	bl	8001e64 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 80031dc:	2310      	movs	r3, #16
 80031de:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80031e0:	2303      	movs	r3, #3
 80031e2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031e8:	463b      	mov	r3, r7
 80031ea:	4619      	mov	r1, r3
 80031ec:	480c      	ldr	r0, [pc, #48]	; (8003220 <DAC_Config+0x5c>)
 80031ee:	f7fe fa17 	bl	8001620 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 80031fe:	f107 0308 	add.w	r3, r7, #8
 8003202:	4619      	mov	r1, r3
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd feef 	bl	8000fe8 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 800320a:	2101      	movs	r1, #1
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd ff1f 	bl	8001050 <DAC_Cmd>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	00200001 	.word	0x00200001
 8003220:	40020000 	.word	0x40020000

08003224 <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 8003224:	b580      	push	{r7, lr}
 8003226:	b0a0      	sub	sp, #128	; 0x80
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800322c:	2101      	movs	r1, #1
 800322e:	2001      	movs	r0, #1
 8003230:	f7fe fe18 	bl	8001e64 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f92b 	bl	8002494 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 800323e:	2300      	movs	r3, #0
 8003240:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003242:	2300      	movs	r3, #0
 8003244:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 8003246:	f243 1338 	movw	r3, #12600	; 0x3138
 800324a:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 800324c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003250:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	4619      	mov	r1, r3
 8003258:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800325c:	f7ff f8ae 	bl	80023bc <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8003260:	2120      	movs	r1, #32
 8003262:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003266:	f7ff f985 	bl	8002574 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800326a:	2201      	movs	r2, #1
 800326c:	2101      	movs	r1, #1
 800326e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003272:	f7ff f949 	bl	8002508 <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8003276:	2101      	movs	r1, #1
 8003278:	2001      	movs	r0, #1
 800327a:	f7fe fdd3 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 800327e:	2101      	movs	r1, #1
 8003280:	2002      	movs	r0, #2
 8003282:	f7fe fdcf 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8003286:	2101      	movs	r1, #1
 8003288:	2004      	movs	r0, #4
 800328a:	f7fe fdcb 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 800328e:	2101      	movs	r1, #1
 8003290:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003294:	f7fe fdc6 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_4	VCO-Volume
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_6	ENVELOPE-decay
	//GPIO_Pin_7	ENVELOPE-Sustain
	GPIO_StructInit(&GPIO_InitStructure);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fa4d 	bl	800173c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80032a2:	23ff      	movs	r3, #255	; 0xff
 80032a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80032a6:	2303      	movs	r3, #3
 80032a8:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032aa:	2302      	movs	r3, #2
 80032ac:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	487c      	ldr	r0, [pc, #496]	; (80034ac <init_adc+0x288>)
 80032ba:	f7fe f9b1 	bl	8001620 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fa3a 	bl	800173c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 80032c8:	2303      	movs	r3, #3
 80032ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80032cc:	2303      	movs	r3, #3
 80032ce:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032d0:	2302      	movs	r3, #2
 80032d2:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4874      	ldr	r0, [pc, #464]	; (80034b0 <init_adc+0x28c>)
 80032e0:	f7fe f99e 	bl	8001620 <GPIO_Init>

	//C bank pins//GPIO_Pin_0	FILTER-FreqHigh
	//GPIO_Pin_1	FILTER-FreqResonance
	//GPIO_Pin_4	FILTER-FreqGain
	GPIO_StructInit(&GPIO_InitStructure);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fa27 	bl	800173c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;
 80032ee:	2313      	movs	r3, #19
 80032f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80032f2:	2303      	movs	r3, #3
 80032f4:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80032f6:	2302      	movs	r3, #2
 80032f8:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	486b      	ldr	r0, [pc, #428]	; (80034b4 <init_adc+0x290>)
 8003306:	f7fe f98b 	bl	8001620 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 800330a:	f107 031c 	add.w	r3, r7, #28
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe f80c 	bl	800132c <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 8003318:	230d      	movs	r3, #13
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 8003320:	2300      	movs	r3, #0
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003328:	2300      	movs	r3, #0
 800332a:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800332c:	2300      	movs	r3, #0
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 8003336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 8003340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8003346:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <init_adc+0x294>)
 8003348:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800334a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003356:	2300      	movs	r3, #0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 800335a:	f107 031c 	add.w	r3, r7, #28
 800335e:	4619      	mov	r1, r3
 8003360:	4856      	ldr	r0, [pc, #344]	; (80034bc <init_adc+0x298>)
 8003362:	f7fd ff8b 	bl	800127c <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 8003366:	2101      	movs	r1, #1
 8003368:	4854      	ldr	r0, [pc, #336]	; (80034bc <init_adc+0x298>)
 800336a:	f7fe f817 	bl	800139c <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 800336e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fca6 	bl	8000cc4 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 8003378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fce9 	bl	8000d54 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 8003382:	2100      	movs	r1, #0
 8003384:	484e      	ldr	r0, [pc, #312]	; (80034c0 <init_adc+0x29c>)
 8003386:	f7fd fcfb 	bl	8000d80 <ADC_Cmd>
	ADC_DeInit();
 800338a:	f7fd fc37 	bl	8000bfc <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800338e:	2101      	movs	r1, #1
 8003390:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003394:	f7fe fd86 	bl	8001ea4 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8003398:	2300      	movs	r3, #0
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 800339c:	2300      	movs	r3, #0
 800339e:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80033a0:	2300      	movs	r3, #0
 80033a2:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 80033a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80033a8:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 80033aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fca8 	bl	8000d04 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 80033b4:	2300      	movs	r3, #0
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 80033c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033c8:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 80033ca:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80033ce:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 80033d0:	2300      	movs	r3, #0
 80033d2:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 80033d4:	230d      	movs	r3, #13
 80033d6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 80033da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033de:	4619      	mov	r1, r3
 80033e0:	4837      	ldr	r0, [pc, #220]	; (80034c0 <init_adc+0x29c>)
 80033e2:	f7fd fc19 	bl	8000c18 <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 80033e6:	2307      	movs	r3, #7
 80033e8:	2201      	movs	r2, #1
 80033ea:	2100      	movs	r1, #0
 80033ec:	4834      	ldr	r0, [pc, #208]	; (80034c0 <init_adc+0x29c>)
 80033ee:	f7fd fce3 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 80033f2:	2307      	movs	r3, #7
 80033f4:	2202      	movs	r2, #2
 80033f6:	2101      	movs	r1, #1
 80033f8:	4831      	ldr	r0, [pc, #196]	; (80034c0 <init_adc+0x29c>)
 80033fa:	f7fd fcdd 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 80033fe:	2307      	movs	r3, #7
 8003400:	2203      	movs	r2, #3
 8003402:	2102      	movs	r1, #2
 8003404:	482e      	ldr	r0, [pc, #184]	; (80034c0 <init_adc+0x29c>)
 8003406:	f7fd fcd7 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 800340a:	2307      	movs	r3, #7
 800340c:	2204      	movs	r2, #4
 800340e:	2103      	movs	r1, #3
 8003410:	482b      	ldr	r0, [pc, #172]	; (80034c0 <init_adc+0x29c>)
 8003412:	f7fd fcd1 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, ADC_SampleTime_480Cycles);		//VCO-Volume
 8003416:	2307      	movs	r3, #7
 8003418:	2205      	movs	r2, #5
 800341a:	2104      	movs	r1, #4
 800341c:	4828      	ldr	r0, [pc, #160]	; (80034c0 <init_adc+0x29c>)
 800341e:	f7fd fccb 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 8003422:	2307      	movs	r3, #7
 8003424:	2206      	movs	r2, #6
 8003426:	2105      	movs	r1, #5
 8003428:	4825      	ldr	r0, [pc, #148]	; (80034c0 <init_adc+0x29c>)
 800342a:	f7fd fcc5 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-decay
 800342e:	2307      	movs	r3, #7
 8003430:	2207      	movs	r2, #7
 8003432:	2106      	movs	r1, #6
 8003434:	4822      	ldr	r0, [pc, #136]	; (80034c0 <init_adc+0x29c>)
 8003436:	f7fd fcbf 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain
 800343a:	2307      	movs	r3, #7
 800343c:	2208      	movs	r2, #8
 800343e:	2107      	movs	r1, #7
 8003440:	481f      	ldr	r0, [pc, #124]	; (80034c0 <init_adc+0x29c>)
 8003442:	f7fd fcb9 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 9, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 8003446:	2307      	movs	r3, #7
 8003448:	2209      	movs	r2, #9
 800344a:	2108      	movs	r1, #8
 800344c:	481c      	ldr	r0, [pc, #112]	; (80034c0 <init_adc+0x29c>)
 800344e:	f7fd fcb3 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 10, ADC_SampleTime_480Cycles);	//FILTER-FreqLow
 8003452:	2307      	movs	r3, #7
 8003454:	220a      	movs	r2, #10
 8003456:	2109      	movs	r1, #9
 8003458:	4819      	ldr	r0, [pc, #100]	; (80034c0 <init_adc+0x29c>)
 800345a:	f7fd fcad 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 11, ADC_SampleTime_480Cycles);	//FILTER-FreqHigh
 800345e:	2307      	movs	r3, #7
 8003460:	220b      	movs	r2, #11
 8003462:	210a      	movs	r1, #10
 8003464:	4816      	ldr	r0, [pc, #88]	; (80034c0 <init_adc+0x29c>)
 8003466:	f7fd fca7 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 12, ADC_SampleTime_480Cycles);	//FILTER-FreqResonance
 800346a:	2307      	movs	r3, #7
 800346c:	220c      	movs	r2, #12
 800346e:	210b      	movs	r1, #11
 8003470:	4813      	ldr	r0, [pc, #76]	; (80034c0 <init_adc+0x29c>)
 8003472:	f7fd fca1 	bl	8000db8 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 13, ADC_SampleTime_480Cycles);	//FILTER-FreqGain
 8003476:	2307      	movs	r3, #7
 8003478:	220d      	movs	r2, #13
 800347a:	210e      	movs	r1, #14
 800347c:	4810      	ldr	r0, [pc, #64]	; (80034c0 <init_adc+0x29c>)
 800347e:	f7fd fc9b 	bl	8000db8 <ADC_RegularChannelConfig>


	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 8003482:	2101      	movs	r1, #1
 8003484:	480e      	ldr	r0, [pc, #56]	; (80034c0 <init_adc+0x29c>)
 8003486:	f7fd fd7d 	bl	8000f84 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 800348a:	2101      	movs	r1, #1
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <init_adc+0x29c>)
 800348e:	f7fd fd5d 	bl	8000f4c <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 8003492:	2101      	movs	r1, #1
 8003494:	480a      	ldr	r0, [pc, #40]	; (80034c0 <init_adc+0x29c>)
 8003496:	f7fd fc73 	bl	8000d80 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 800349a:	2101      	movs	r1, #1
 800349c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80034a0:	f7ff f812 	bl	80024c8 <TIM_Cmd>



}
 80034a4:	bf00      	nop
 80034a6:	3780      	adds	r7, #128	; 0x80
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	4001204c 	.word	0x4001204c
 80034bc:	40026410 	.word	0x40026410
 80034c0:	40012000 	.word	0x40012000

080034c4 <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 80034ca:	2101      	movs	r1, #1
 80034cc:	2004      	movs	r0, #4
 80034ce:	f7fe fca9 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE);
 80034d2:	2101      	movs	r1, #1
 80034d4:	2010      	movs	r0, #16
 80034d6:	f7fe fca5 	bl	8001e24 <RCC_AHB1PeriphClockCmd>
	 * PE12 	lfo_sine
	 * PE13		lfo_sawtooth
	 * PE14		lfo_square
	 * PE15		lfo_triangle
	 */
	GPIO_StructInit(&GPIO_InitStructure);							// Default values
 80034da:	f107 0320 	add.w	r3, r7, #32
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f92c 	bl	800173c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80034e4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80034e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80034fc:	f107 0320 	add.w	r3, r7, #32
 8003500:	4619      	mov	r1, r3
 8003502:	484e      	ldr	r0, [pc, #312]	; (800363c <init_gpios+0x178>)
 8003504:	f7fe f88c 	bl	8001620 <GPIO_Init>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003508:	f107 0320 	add.w	r3, r7, #32
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe f915 	bl	800173c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003528:	f107 0320 	add.w	r3, r7, #32
 800352c:	4619      	mov	r1, r3
 800352e:	4844      	ldr	r0, [pc, #272]	; (8003640 <init_gpios+0x17c>)
 8003530:	f7fe f876 	bl	8001620 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003534:	2101      	movs	r1, #1
 8003536:	2004      	movs	r0, #4
 8003538:	f7fe fc94 	bl	8001e64 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe ffa7 	bl	8002494 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 800354a:	2300      	movs	r3, #0
 800354c:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 800354e:	f643 136c 	movw	r3, #14700	; 0x396c
 8003552:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 8003554:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003558:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	4838      	ldr	r0, [pc, #224]	; (8003644 <init_gpios+0x180>)
 8003562:	f7fe ff2b 	bl	80023bc <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 8003566:	231e      	movs	r3, #30
 8003568:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800356a:	2301      	movs	r3, #1
 800356c:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800356e:	2300      	movs	r3, #0
 8003570:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fadd 	bl	8000b38 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 800357e:	2201      	movs	r2, #1
 8003580:	2101      	movs	r1, #1
 8003582:	4830      	ldr	r0, [pc, #192]	; (8003644 <init_gpios+0x180>)
 8003584:	f7fe ffc0 	bl	8002508 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003588:	2101      	movs	r1, #1
 800358a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800358e:	f7fe fc89 	bl	8001ea4 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 8003592:	2106      	movs	r1, #6
 8003594:	2002      	movs	r0, #2
 8003596:	f7fe fecf 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource7);
 800359a:	2107      	movs	r1, #7
 800359c:	2004      	movs	r0, #4
 800359e:	f7fe fecb 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource8);
 80035a2:	2108      	movs	r1, #8
 80035a4:	2004      	movs	r0, #4
 80035a6:	f7fe fec7 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource9);
 80035aa:	2109      	movs	r1, #9
 80035ac:	2004      	movs	r0, #4
 80035ae:	f7fe fec3 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource10);
 80035b2:	210a      	movs	r1, #10
 80035b4:	2004      	movs	r0, #4
 80035b6:	f7fe febf 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource11);
 80035ba:	210b      	movs	r1, #11
 80035bc:	2004      	movs	r0, #4
 80035be:	f7fe febb 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource12);
 80035c2:	210c      	movs	r1, #12
 80035c4:	2004      	movs	r0, #4
 80035c6:	f7fe feb7 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource13);
 80035ca:	210d      	movs	r1, #13
 80035cc:	2004      	movs	r0, #4
 80035ce:	f7fe feb3 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource14);
 80035d2:	210e      	movs	r1, #14
 80035d4:	2004      	movs	r0, #4
 80035d6:	f7fe feaf 	bl	8002338 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);
 80035da:	210f      	movs	r1, #15
 80035dc:	2004      	movs	r0, #4
 80035de:	f7fe feab 	bl	8002338 <SYSCFG_EXTILineConfig>


	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
 80035e2:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80035e6:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80035ec:	2300      	movs	r3, #0
 80035ee:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80035f0:	2308      	movs	r3, #8
 80035f2:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd ff8f 	bl	800151c <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 80035fe:	2317      	movs	r3, #23
 8003600:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003602:	230f      	movs	r3, #15
 8003604:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003606:	230f      	movs	r3, #15
 8003608:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fa90 	bl	8000b38 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;;
 8003618:	2328      	movs	r3, #40	; 0x28
 800361a:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800361c:	230f      	movs	r3, #15
 800361e:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003620:	230f      	movs	r3, #15
 8003622:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003624:	2301      	movs	r3, #1
 8003626:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003628:	f107 0308 	add.w	r3, r7, #8
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fa83 	bl	8000b38 <NVIC_Init>




}
 8003632:	bf00      	nop
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	40020800 	.word	0x40020800
 8003644:	40000800 	.word	0x40000800

08003648 <main>:

/* Globals */
extern uint16_t buffer_output[BUFF_LEN];

int main(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
	*  SCB->VTOR register.
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

	/* Initialize LEDS */
	STM_EVAL_LEDInit(LED3); // orange LED		// From Horrorophone
 800364c:	2001      	movs	r0, #1
 800364e:	f7fe ffad 	bl	80025ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4); // green LED		// From Horrorophone
 8003652:	2000      	movs	r0, #0
 8003654:	f7fe ffaa 	bl	80025ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5); // red LED			// From Horrorophone
 8003658:	2002      	movs	r0, #2
 800365a:	f7fe ffa7 	bl	80025ac <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6); // blue LED			// From Horrorophone
 800365e:	2003      	movs	r0, #3
 8003660:	f7fe ffa4 	bl	80025ac <STM_EVAL_LEDInit>

	/* Green Led On: start of application */
	STM_EVAL_LEDOn(LED4);						// From Horrorophone
 8003664:	2000      	movs	r0, #0
 8003666:	f7fe ffcf 	bl	8002608 <STM_EVAL_LEDOn>

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	init_gpios();								//initialize gpios
 800366a:	f7ff ff2b 	bl	80034c4 <init_gpios>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 800366e:	4808      	ldr	r0, [pc, #32]	; (8003690 <main+0x48>)
 8003670:	f7ff fdd8 	bl	8003224 <init_adc>
	update_selector_state();					// get startup state
 8003674:	f001 fd6c 	bl	8005150 <update_selector_state>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8003678:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800367c:	2150      	movs	r1, #80	; 0x50
 800367e:	2004      	movs	r0, #4
 8003680:	f7fe ffda 	bl	8002638 <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, BUFF_LEN);
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <main+0x4c>)
 8003688:	f7ff f802 	bl	8002690 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 800368c:	e7fe      	b.n	800368c <main+0x44>
 800368e:	bf00      	nop
 8003690:	200005f4 	.word	0x200005f4
 8003694:	200001c4 	.word	0x200001c4

08003698 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 800369c:	2002      	movs	r0, #2
 800369e:	f7fe ffb3 	bl	8002608 <STM_EVAL_LEDOn>
	return (0);
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_DIV2);
 80036b2:	2120      	movs	r1, #32
 80036b4:	2000      	movs	r0, #0
 80036b6:	f000 f827 	bl	8003708 <generate_waveforms>
	return;
 80036ba:	bf00      	nop
}
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop

080036c4 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_DIV2, BUFF_LEN);
 80036ce:	2140      	movs	r1, #64	; 0x40
 80036d0:	2020      	movs	r0, #32
 80036d2:	f000 f819 	bl	8003708 <generate_waveforms>
	return;
 80036d6:	bf00      	nop
}
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop

080036e0 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */

  // return -1;
	return 0;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7fe ff85 	bl	8002608 <STM_EVAL_LEDOn>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop

08003708 <generate_waveforms>:
/*
 * For first half of buffer, start = 0; end = buff_len/2
 * For second half, start = buff_len/2; end = buff_len
 */
void generate_waveforms(uint16_t start, uint16_t end)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	ed2d 8b02 	vpush	{d8}
 800370e:	b093      	sub	sp, #76	; 0x4c
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	460a      	mov	r2, r1
 8003716:	80fb      	strh	r3, [r7, #6]
 8003718:	4613      	mov	r3, r2
 800371a:	80bb      	strh	r3, [r7, #4]
	uint32_t max_sample_count = QUARTER_SECOND;
 800371c:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8003720:	647b      	str	r3, [r7, #68]	; 0x44


	osc.vco_wav = vfo_state;
 8003722:	4bb1      	ldr	r3, [pc, #708]	; (80039e8 <generate_waveforms+0x2e0>)
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	4bb1      	ldr	r3, [pc, #708]	; (80039ec <generate_waveforms+0x2e4>)
 8003728:	731a      	strb	r2, [r3, #12]
	osc.lfo_wav = lfo_state;
 800372a:	4bb1      	ldr	r3, [pc, #708]	; (80039f0 <generate_waveforms+0x2e8>)
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	4baf      	ldr	r3, [pc, #700]	; (80039ec <generate_waveforms+0x2e4>)
 8003730:	735a      	strb	r2, [r3, #13]

	// osc.vco_amp = (float) (ADCBuffer[0] & 0xfffe);			// A0
	osc.vco_freq = (float) (ADCBuffer[1] & 0xfff0);			// A1
 8003732:	4bb0      	ldr	r3, [pc, #704]	; (80039f4 <generate_waveforms+0x2ec>)
 8003734:	885b      	ldrh	r3, [r3, #2]
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800373e:	4013      	ands	r3, r2
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	4ba8      	ldr	r3, [pc, #672]	; (80039ec <generate_waveforms+0x2e4>)
 800374a:	edc3 7a00 	vstr	s15, [r3]

	// Someone else's moving average filter.
	// Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
	// Note that this discards bits and then smooths it.  What if it did this the other way around?

	osc.vco_freq = log10(ADCBuffer[1] & 0xffff)*200;
 800374e:	4ba9      	ldr	r3, [pc, #676]	; (80039f4 <generate_waveforms+0x2ec>)
 8003750:	885b      	ldrh	r3, [r3, #2]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fe89 	bl	800046c <__aeabi_i2d>
 800375a:	4603      	mov	r3, r0
 800375c:	460c      	mov	r4, r1
 800375e:	ec44 3b10 	vmov	d0, r3, r4
 8003762:	f001 fe19 	bl	8005398 <log10>
 8003766:	ec51 0b10 	vmov	r0, r1, d0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	4ba2      	ldr	r3, [pc, #648]	; (80039f8 <generate_waveforms+0x2f0>)
 8003770:	f7fc fee2 	bl	8000538 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4618      	mov	r0, r3
 800377a:	4621      	mov	r1, r4
 800377c:	f7fd f98c 	bl	8000a98 <__aeabi_d2f>
 8003780:	4602      	mov	r2, r0
 8003782:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <generate_waveforms+0x2e4>)
 8003784:	601a      	str	r2, [r3, #0]
	// fc_resonance = ADCBuffer[11];
	// gain = ADCBuffer[12];


	// Get ADSR values.
	adsr_setting adsr_settings = adsr_03;			// Fall back on this.
 8003786:	4b9d      	ldr	r3, [pc, #628]	; (80039fc <generate_waveforms+0x2f4>)
 8003788:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800378c:	461d      	mov	r5, r3
 800378e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003796:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// TODO: turn this off...
	// adsr_settings.mod = DualMode_VCO;
	adsr_settings.mod = NO_MOD;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	/*
	 * TODO: Turn this on...
	 * 	adsr_settings.mod = menu_state.adsr_mod;
	 */

	adsr_settings.attack_len = ADCBuffer[5]*20;		// A5
 80037a0:	4b94      	ldr	r3, [pc, #592]	; (80039f4 <generate_waveforms+0x2ec>)
 80037a2:	895b      	ldrh	r3, [r3, #10]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
	adsr_settings.decay_len = (ADCBuffer[6])*20;	// A6
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <generate_waveforms+0x2ec>)
 80037b4:	899b      	ldrh	r3, [r3, #12]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
	adsr_settings.sustain_len = ADCBuffer[7]*10;	// A7
 80037c4:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <generate_waveforms+0x2ec>)
 80037c6:	89db      	ldrh	r3, [r3, #14]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
	adsr_settings.release_len = ADCBuffer[8]*20;	// B0
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <generate_waveforms+0x2ec>)
 80037d8:	8a1b      	ldrh	r3, [r3, #16]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	adsr_settings.blank_len = ADCBuffer[10]*20;		// C0
 80037e8:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <generate_waveforms+0x2ec>)
 80037ea:	8a9b      	ldrh	r3, [r3, #20]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	643b      	str	r3, [r7, #64]	; 0x40
	adsr_settings.sustain_amp = (float32_t) ADCBuffer[12]/4095;		// C4
 80037fa:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <generate_waveforms+0x2ec>)
 80037fc:	8b1b      	ldrh	r3, [r3, #24]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003808:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8003a00 <generate_waveforms+0x2f8>
 800380c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003810:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate ADSR boundaries.
	attack_start = 0;
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <generate_waveforms+0x2fc>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	decay_start = adsr_settings.attack_len;
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <generate_waveforms+0x300>)
 800381e:	6013      	str	r3, [r2, #0]
	sustain_start = decay_start + adsr_settings.decay_len;
 8003820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003822:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <generate_waveforms+0x300>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a78      	ldr	r2, [pc, #480]	; (8003a0c <generate_waveforms+0x304>)
 800382a:	6013      	str	r3, [r2, #0]
	release_start = sustain_start + adsr_settings.sustain_len;
 800382c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382e:	4b77      	ldr	r3, [pc, #476]	; (8003a0c <generate_waveforms+0x304>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4413      	add	r3, r2
 8003834:	4a76      	ldr	r2, [pc, #472]	; (8003a10 <generate_waveforms+0x308>)
 8003836:	6013      	str	r3, [r2, #0]
	blank_start = release_start + adsr_settings.release_len;
 8003838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800383a:	4b75      	ldr	r3, [pc, #468]	; (8003a10 <generate_waveforms+0x308>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <generate_waveforms+0x30c>)
 8003842:	6013      	str	r3, [r2, #0]
	blank_end = blank_start + adsr_settings.blank_len;
 8003844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <generate_waveforms+0x30c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4413      	add	r3, r2
 800384c:	4a72      	ldr	r2, [pc, #456]	; (8003a18 <generate_waveforms+0x310>)
 800384e:	6013      	str	r3, [r2, #0]

	volatile int i = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate "angles".  This is the sample position in a cycle.
	volatile float32_t angle_vco = osc.vco_freq*PI_DIV_2/(max_sample_count);	// 'angle' based samples per cycle.
 8003854:	4b65      	ldr	r3, [pc, #404]	; (80039ec <generate_waveforms+0x2e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe19 	bl	8000490 <__aeabi_f2d>
 800385e:	a360      	add	r3, pc, #384	; (adr r3, 80039e0 <generate_waveforms+0x2d8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fe68 	bl	8000538 <__aeabi_dmul>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4625      	mov	r5, r4
 800386e:	461c      	mov	r4, r3
 8003870:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003872:	f7fc fdeb 	bl	800044c <__aeabi_ui2d>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc ff85 	bl	800078c <__aeabi_ddiv>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	4618      	mov	r0, r3
 8003888:	4621      	mov	r1, r4
 800388a:	f7fd f905 	bl	8000a98 <__aeabi_d2f>
 800388e:	4603      	mov	r3, r0
 8003890:	623b      	str	r3, [r7, #32]
	// volatile float32_t angle_vco2 = osc.vco2_freq*PI_DIV_2/(max_sample_count);	// 'angle' based samples per cycle.
	volatile float32_t angle_lfo = osc.lfo_freq*PI_DIV_2/(max_sample_count);
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <generate_waveforms+0x2e4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fdfa 	bl	8000490 <__aeabi_f2d>
 800389c:	a350      	add	r3, pc, #320	; (adr r3, 80039e0 <generate_waveforms+0x2d8>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc fe49 	bl	8000538 <__aeabi_dmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	4625      	mov	r5, r4
 80038ac:	461c      	mov	r4, r3
 80038ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038b0:	f7fc fdcc 	bl	800044c <__aeabi_ui2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc ff66 	bl	800078c <__aeabi_ddiv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4618      	mov	r0, r3
 80038c6:	4621      	mov	r1, r4
 80038c8:	f7fd f8e6 	bl	8000a98 <__aeabi_d2f>
 80038cc:	4603      	mov	r3, r0
 80038ce:	61fb      	str	r3, [r7, #28]

	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038da:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003a1c <generate_waveforms+0x314>
 80038de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e2:	edc7 7a06 	vstr	s15, [r7, #24]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038f0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8003a1c <generate_waveforms+0x314>
 80038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f8:	edc7 7a05 	vstr	s15, [r7, #20]
	// volatile float32_t angle_sustain = PI/adsr_settings.sustain_len;
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003906:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003a1c <generate_waveforms+0x314>
 800390a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390e:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate number of cycles.
	// volatile float32_t samples_cycle_vco = SAMPLERATE / osc.vco_freq;
	volatile uint32_t samples_cycle_lfo = 2 * SAMPLERATE / osc.lfo_freq;
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <generate_waveforms+0x2e4>)
 8003914:	ed93 7a02 	vldr	s14, [r3, #8]
 8003918:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003a20 <generate_waveforms+0x318>
 800391c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003924:	ee17 3a90 	vmov	r3, s15
 8003928:	60fb      	str	r3, [r7, #12]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	441a      	add	r2, r3
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	441a      	add	r2, r3
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	441a      	add	r2, r3
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	4413      	add	r3, r2
 800393c:	60bb      	str	r3, [r7, #8]

	// Sine VCO
	// if(osc.vco_wav == sine && osc.fm_mod == OFF)
	if(osc.vco_wav == sine && (osc.mod == NO_MOD || osc.mod == VCOamp ))
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <generate_waveforms+0x2e4>)
 8003940:	7b1b      	ldrb	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d13a      	bne.n	80039bc <generate_waveforms+0x2b4>
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <generate_waveforms+0x2e4>)
 8003948:	7b9b      	ldrb	r3, [r3, #14]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <generate_waveforms+0x24e>
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <generate_waveforms+0x2e4>)
 8003950:	7b9b      	ldrb	r3, [r3, #14]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d132      	bne.n	80039bc <generate_waveforms+0x2b4>
	{
		for(i = start; i < end; i++)
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e02b      	b.n	80039b4 <generate_waveforms+0x2ac>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32((sample_count_vco+(i-start))*angle_vco);
 800395c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <generate_waveforms+0x2e4>)
 8003960:	ed93 8a04 	vldr	s16, [r3, #16]
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <generate_waveforms+0x2e4>)
 8003966:	edd3 8a04 	vldr	s17, [r3, #16]
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	461a      	mov	r2, r3
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <generate_waveforms+0x31c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4413      	add	r3, r2
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003980:	edd7 7a08 	vldr	s15, [r7, #32]
 8003984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003988:	eeb0 0a67 	vmov.f32	s0, s15
 800398c:	f001 fc62 	bl	8005254 <arm_sin_f32>
 8003990:	eef0 7a40 	vmov.f32	s15, s0
 8003994:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003998:	ee78 7a27 	vadd.f32	s15, s16, s15
 800399c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a0:	edc7 7a00 	vstr	s15, [r7]
 80039a4:	883b      	ldrh	r3, [r7, #0]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <generate_waveforms+0x320>)
 80039aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sine VCO
	// if(osc.vco_wav == sine && osc.fm_mod == OFF)
	if(osc.vco_wav == sine && (osc.mod == NO_MOD || osc.mod == VCOamp ))
	{
		for(i = start; i < end; i++)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	3301      	adds	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	88ba      	ldrh	r2, [r7, #4]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dccf      	bgt.n	800395c <generate_waveforms+0x254>
		}
	}

	// Square VCO
	// else if(osc.vco_wav == square && osc.fm_mod == OFF)
	if(osc.vco_wav == square && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <generate_waveforms+0x2e4>)
 80039be:	7b1b      	ldrb	r3, [r3, #12]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d163      	bne.n	8003a8c <generate_waveforms+0x384>
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <generate_waveforms+0x2e4>)
 80039c6:	7b9b      	ldrb	r3, [r3, #14]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <generate_waveforms+0x2cc>
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <generate_waveforms+0x2e4>)
 80039ce:	7b9b      	ldrb	r3, [r3, #14]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d15b      	bne.n	8003a8c <generate_waveforms+0x384>
	{
		for(i = start; i < end; i++)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
 80039d8:	e054      	b.n	8003a84 <generate_waveforms+0x37c>
 80039da:	bf00      	nop
 80039dc:	f3af 8000 	nop.w
 80039e0:	5443d6f4 	.word	0x5443d6f4
 80039e4:	3ff921fb 	.word	0x3ff921fb
 80039e8:	200005e8 	.word	0x200005e8
 80039ec:	20000054 	.word	0x20000054
 80039f0:	200005e9 	.word	0x200005e9
 80039f4:	200005f4 	.word	0x200005f4
 80039f8:	40690000 	.word	0x40690000
 80039fc:	2000008c 	.word	0x2000008c
 8003a00:	457ff000 	.word	0x457ff000
 8003a04:	20000550 	.word	0x20000550
 8003a08:	20000554 	.word	0x20000554
 8003a0c:	20000558 	.word	0x20000558
 8003a10:	2000055c 	.word	0x2000055c
 8003a14:	20000560 	.word	0x20000560
 8003a18:	20000564 	.word	0x20000564
 8003a1c:	40490fdb 	.word	0x40490fdb
 8003a20:	47bb8000 	.word	0x47bb8000
 8003a24:	20000544 	.word	0x20000544
 8003a28:	200001c4 	.word	0x200001c4
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_square_angle((sample_count_vco+(i-start)) * angle_vco);
 8003a2c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003a2e:	4bac      	ldr	r3, [pc, #688]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003a30:	ed93 8a04 	vldr	s16, [r3, #16]
 8003a34:	4baa      	ldr	r3, [pc, #680]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003a36:	edd3 8a04 	vldr	s17, [r3, #16]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	4ba8      	ldr	r3, [pc, #672]	; (8003ce4 <generate_waveforms+0x5dc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a50:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	f000 ff8a 	bl	8004974 <gen_square_angle>
 8003a60:	eef0 7a40 	vmov.f32	s15, s0
 8003a64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003a68:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a70:	edc7 7a00 	vstr	s15, [r7]
 8003a74:	883b      	ldrh	r3, [r7, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	4b9b      	ldr	r3, [pc, #620]	; (8003ce8 <generate_waveforms+0x5e0>)
 8003a7a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Square VCO
	// else if(osc.vco_wav == square && osc.fm_mod == OFF)
	if(osc.vco_wav == square && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
	{
		for(i = start; i < end; i++)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	88ba      	ldrh	r2, [r7, #4]
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dccf      	bgt.n	8003a2c <generate_waveforms+0x324>
		}
	}

	// Sawtooth VCO
	// else if(osc.vco_wav == sawtooth && osc.fm_mod == OFF)
	if(osc.vco_wav == sawtooth && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
 8003a8c:	4b94      	ldr	r3, [pc, #592]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d13a      	bne.n	8003b0a <generate_waveforms+0x402>
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003a96:	7b9b      	ldrb	r3, [r3, #14]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <generate_waveforms+0x39c>
 8003a9c:	4b90      	ldr	r3, [pc, #576]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003a9e:	7b9b      	ldrb	r3, [r3, #14]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d132      	bne.n	8003b0a <generate_waveforms+0x402>
	{
		for(i = start; i < end; i++)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	e02b      	b.n	8003b02 <generate_waveforms+0x3fa>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_sawtooth_angle((sample_count_vco+(i-start)) * angle_vco);
 8003aaa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003aac:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003aae:	ed93 8a04 	vldr	s16, [r3, #16]
 8003ab2:	4b8b      	ldr	r3, [pc, #556]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003ab4:	edd3 8a04 	vldr	s17, [r3, #16]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <generate_waveforms+0x5dc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ace:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	f000 ff73 	bl	80049c4 <gen_sawtooth_angle>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003ae6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aee:	edc7 7a00 	vstr	s15, [r7]
 8003af2:	883b      	ldrh	r3, [r7, #0]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	4b7c      	ldr	r3, [pc, #496]	; (8003ce8 <generate_waveforms+0x5e0>)
 8003af8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sawtooth VCO
	// else if(osc.vco_wav == sawtooth && osc.fm_mod == OFF)
	if(osc.vco_wav == sawtooth && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
	{
		for(i = start; i < end; i++)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	3301      	adds	r3, #1
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
 8003b02:	88ba      	ldrh	r2, [r7, #4]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	429a      	cmp	r2, r3
 8003b08:	dccf      	bgt.n	8003aaa <generate_waveforms+0x3a2>
		}
	}

	// Triangle VCO
	// else if(osc.vco_wav == triangle && osc.fm_mod == OFF)
	if(osc.vco_wav == triangle && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
 8003b0a:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b0c:	7b1b      	ldrb	r3, [r3, #12]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d13a      	bne.n	8003b88 <generate_waveforms+0x480>
 8003b12:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b14:	7b9b      	ldrb	r3, [r3, #14]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <generate_waveforms+0x41a>
 8003b1a:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b1c:	7b9b      	ldrb	r3, [r3, #14]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d132      	bne.n	8003b88 <generate_waveforms+0x480>
	{
		for(i = start; i < end; i++)
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	e02b      	b.n	8003b80 <generate_waveforms+0x478>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_triangle_angle((sample_count_vco+(i-start)) * angle_vco);
 8003b28:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003b2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b2c:	ed93 8a04 	vldr	s16, [r3, #16]
 8003b30:	4b6b      	ldr	r3, [pc, #428]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b32:	edd3 8a04 	vldr	s17, [r3, #16]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <generate_waveforms+0x5dc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	f001 f81c 	bl	8004b94 <gen_triangle_angle>
 8003b5c:	eef0 7a40 	vmov.f32	s15, s0
 8003b60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003b64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6c:	edc7 7a00 	vstr	s15, [r7]
 8003b70:	883b      	ldrh	r3, [r7, #0]
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <generate_waveforms+0x5e0>)
 8003b76:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Triangle VCO
	// else if(osc.vco_wav == triangle && osc.fm_mod == OFF)
	if(osc.vco_wav == triangle && (osc.mod == NO_MOD || osc.mod == VCOamp ) )
	{
		for(i = start; i < end; i++)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	88ba      	ldrh	r2, [r7, #4]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dccf      	bgt.n	8003b28 <generate_waveforms+0x420>
			// buffer_vco2[i] = osc.vco_amp2 + osc.vco_amp2 * gen_triangle_angle((sample_count_vco+(i-start)) * angle_vco2);
		}
	}

	// SINE LFO
	if(osc.lfo_wav == sine)
 8003b88:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b8a:	7b5b      	ldrb	r3, [r3, #13]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d167      	bne.n	8003c60 <generate_waveforms+0x558>
	{
		// if(osc.fm_mod == OFF)
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003b90:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b92:	7b9b      	ldrb	r3, [r3, #14]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d003      	beq.n	8003ba0 <generate_waveforms+0x498>
 8003b98:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003b9a:	7b9b      	ldrb	r3, [r3, #14]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d12f      	bne.n	8003c00 <generate_waveforms+0x4f8>
		{
			for(i = start; i < end; i++)
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	e027      	b.n	8003bf6 <generate_waveforms+0x4ee>
			{
				// AM - Requires an amplitude offset.
				buffer_lfo_float[i] = osc.lfo_amp + osc.lfo_amp*arm_sin_f32((sample_count_lfo+(i-start))*angle_lfo);
 8003ba6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003baa:	ed93 8a06 	vldr	s16, [r3, #24]
 8003bae:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003bb0:	edd3 8a06 	vldr	s17, [r3, #24]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <generate_waveforms+0x5e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bca:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd6:	f001 fb3d 	bl	8005254 <arm_sin_f32>
 8003bda:	eef0 7a40 	vmov.f32	s15, s0
 8003bde:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003be2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003be6:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <generate_waveforms+0x5e8>)
 8003be8:	00a3      	lsls	r3, r4, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	edc3 7a00 	vstr	s15, [r3]
	if(osc.lfo_wav == sine)
	{
		// if(osc.fm_mod == OFF)
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			for(i = start; i < end; i++)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	88ba      	ldrh	r2, [r7, #4]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dcd3      	bgt.n	8003ba6 <generate_waveforms+0x49e>

	// SINE LFO
	if(osc.lfo_wav == sine)
	{
		// if(osc.fm_mod == OFF)
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003bfe:	e16d      	b.n	8003edc <generate_waveforms+0x7d4>
			{
				// AM - Requires an amplitude offset.
				buffer_lfo_float[i] = osc.lfo_amp + osc.lfo_amp*arm_sin_f32((sample_count_lfo+(i-start))*angle_lfo);
			}
		}
		else if(osc.mod == VCOfreq)
 8003c00:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c02:	7b9b      	ldrb	r3, [r3, #14]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 8169 	bne.w	8003edc <generate_waveforms+0x7d4>
		{
			for(i = start; i < end; i++)
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	e022      	b.n	8003c56 <generate_waveforms+0x54e>
			{
				// FM - No offset.
				buffer_lfo_float[i] = osc.lfo_amp*arm_cos_f32((sample_count_lfo+(i-start))*angle_lfo);
 8003c10:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003c12:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c14:	ed93 8a06 	vldr	s16, [r3, #24]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <generate_waveforms+0x5e4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3a:	f001 fb47 	bl	80052cc <arm_cos_f32>
 8003c3e:	eef0 7a40 	vmov.f32	s15, s0
 8003c42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <generate_waveforms+0x5e8>)
 8003c48:	00a3      	lsls	r3, r4, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = osc.lfo_amp + osc.lfo_amp*arm_sin_f32((sample_count_lfo+(i-start))*angle_lfo);
			}
		}
		else if(osc.mod == VCOfreq)
		{
			for(i = start; i < end; i++)
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	3301      	adds	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	88ba      	ldrh	r2, [r7, #4]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dcd8      	bgt.n	8003c10 <generate_waveforms+0x508>
 8003c5e:	e13d      	b.n	8003edc <generate_waveforms+0x7d4>
			}
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c62:	7b5b      	ldrb	r3, [r3, #13]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d16d      	bne.n	8003d44 <generate_waveforms+0x63c>
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c6a:	7b9b      	ldrb	r3, [r3, #14]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d003      	beq.n	8003c78 <generate_waveforms+0x570>
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c72:	7b9b      	ldrb	r3, [r3, #14]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d12a      	bne.n	8003cce <generate_waveforms+0x5c6>
		{
			// AM
			for(i = start; i < end; i++)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7c:	e022      	b.n	8003cc4 <generate_waveforms+0x5bc>
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_square_angle((sample_count_lfo+(i-start))*angle_lfo);
 8003c7e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003c82:	ed93 8a06 	vldr	s16, [r3, #24]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <generate_waveforms+0x5e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	f000 fe64 	bl	8004974 <gen_square_angle>
 8003cac:	eef0 7a40 	vmov.f32	s15, s0
 8003cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <generate_waveforms+0x5e8>)
 8003cb6:	00a3      	lsls	r3, r4, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == square)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			// AM
			for(i = start; i < end; i++)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	88ba      	ldrh	r2, [r7, #4]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	dcd8      	bgt.n	8003c7e <generate_waveforms+0x576>
	}

	// Square LFO
	else if(osc.lfo_wav == square)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003ccc:	e106      	b.n	8003edc <generate_waveforms+0x7d4>
			for(i = start; i < end; i++)
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_square_angle((sample_count_lfo+(i-start))*angle_lfo);
			}
		}
		else if(osc.mod == VCOfreq)
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <generate_waveforms+0x5d8>)
 8003cd0:	7b9b      	ldrb	r3, [r3, #14]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f040 8102 	bne.w	8003edc <generate_waveforms+0x7d4>
		{
			// FM
			for(i = start; i < end; i++)
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	e02d      	b.n	8003d3a <generate_waveforms+0x632>
 8003cde:	bf00      	nop
 8003ce0:	20000054 	.word	0x20000054
 8003ce4:	20000544 	.word	0x20000544
 8003ce8:	200001c4 	.word	0x200001c4
 8003cec:	20000548 	.word	0x20000548
 8003cf0:	20000244 	.word	0x20000244
			{
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = osc.lfo_amp*gen_triangle_angle((sample_count_lfo+(i-start))*angle_lfo);
 8003cf4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003cf6:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <generate_waveforms+0x864>)
 8003cf8:	ed93 8a06 	vldr	s16, [r3, #24]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b9a      	ldr	r3, [pc, #616]	; (8003f70 <generate_waveforms+0x868>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d12:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	f000 ff39 	bl	8004b94 <gen_triangle_angle>
 8003d22:	eef0 7a40 	vmov.f32	s15, s0
 8003d26:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003d2a:	4a92      	ldr	r2, [pc, #584]	; (8003f74 <generate_waveforms+0x86c>)
 8003d2c:	00a3      	lsls	r3, r4, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.mod == VCOfreq)
		{
			// FM
			for(i = start; i < end; i++)
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	3301      	adds	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	88ba      	ldrh	r2, [r7, #4]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	dcd8      	bgt.n	8003cf4 <generate_waveforms+0x5ec>
 8003d42:	e0cb      	b.n	8003edc <generate_waveforms+0x7d4>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 8003d44:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <generate_waveforms+0x864>)
 8003d46:	7b5b      	ldrb	r3, [r3, #13]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d162      	bne.n	8003e12 <generate_waveforms+0x70a>
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003d4c:	4b87      	ldr	r3, [pc, #540]	; (8003f6c <generate_waveforms+0x864>)
 8003d4e:	7b9b      	ldrb	r3, [r3, #14]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d003      	beq.n	8003d5c <generate_waveforms+0x654>
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <generate_waveforms+0x864>)
 8003d56:	7b9b      	ldrb	r3, [r3, #14]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d12a      	bne.n	8003db2 <generate_waveforms+0x6aa>
		{
			for(i = start; i < end; i++)
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e022      	b.n	8003da8 <generate_waveforms+0x6a0>
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_sawtooth_angle((sample_count_lfo+(i-start))*angle_lfo);
 8003d62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003d64:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <generate_waveforms+0x864>)
 8003d66:	ed93 8a06 	vldr	s16, [r3, #24]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b7f      	ldr	r3, [pc, #508]	; (8003f70 <generate_waveforms+0x868>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8c:	f000 fe1a 	bl	80049c4 <gen_sawtooth_angle>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003d98:	4a76      	ldr	r2, [pc, #472]	; (8003f74 <generate_waveforms+0x86c>)
 8003d9a:	00a3      	lsls	r3, r4, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	edc3 7a00 	vstr	s15, [r3]
	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			for(i = start; i < end; i++)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	3301      	adds	r3, #1
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	88ba      	ldrh	r2, [r7, #4]
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	429a      	cmp	r2, r3
 8003dae:	dcd8      	bgt.n	8003d62 <generate_waveforms+0x65a>
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003db0:	e094      	b.n	8003edc <generate_waveforms+0x7d4>
				buffer_lfo_float[i] = osc.lfo_amp*gen_sawtooth_angle((sample_count_lfo+(i-start))*angle_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.mod == VCOfreq)
 8003db2:	4b6e      	ldr	r3, [pc, #440]	; (8003f6c <generate_waveforms+0x864>)
 8003db4:	7b9b      	ldrb	r3, [r3, #14]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	f040 8090 	bne.w	8003edc <generate_waveforms+0x7d4>
		{
			for(i = start; i < end; i++)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	e022      	b.n	8003e08 <generate_waveforms+0x700>
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_sawtooth_integral_angle((sample_count_lfo+(i-start))*angle_lfo);
 8003dc2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <generate_waveforms+0x864>)
 8003dc6:	ed93 8a06 	vldr	s16, [r3, #24]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <generate_waveforms+0x868>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	f000 fe18 	bl	8004a20 <gen_sawtooth_integral_angle>
 8003df0:	eef0 7a40 	vmov.f32	s15, s0
 8003df4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <generate_waveforms+0x86c>)
 8003dfa:	00a3      	lsls	r3, r4, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.mod == VCOfreq)
		{
			for(i = start; i < end; i++)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
 8003e08:	88ba      	ldrh	r2, [r7, #4]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dcd8      	bgt.n	8003dc2 <generate_waveforms+0x6ba>
 8003e10:	e064      	b.n	8003edc <generate_waveforms+0x7d4>
				buffer_lfo_float[i] = osc.lfo_amp*gen_sawtooth_integral_angle((sample_count_lfo+(i-start))*angle_lfo);
			}
		}
	}

	else if(osc.lfo_wav == triangle)
 8003e12:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <generate_waveforms+0x864>)
 8003e14:	7b5b      	ldrb	r3, [r3, #13]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d160      	bne.n	8003edc <generate_waveforms+0x7d4>
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <generate_waveforms+0x864>)
 8003e1c:	7b9b      	ldrb	r3, [r3, #14]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d003      	beq.n	8003e2a <generate_waveforms+0x722>
 8003e22:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <generate_waveforms+0x864>)
 8003e24:	7b9b      	ldrb	r3, [r3, #14]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d12a      	bne.n	8003e80 <generate_waveforms+0x778>
		{
			for(i = start; i < end; i++)
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	e022      	b.n	8003e76 <generate_waveforms+0x76e>
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_triangle_angle( (sample_count_lfo+(i-start)) * angle_lfo);
 8003e30:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e32:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <generate_waveforms+0x864>)
 8003e34:	ed93 8a06 	vldr	s16, [r3, #24]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <generate_waveforms+0x868>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	f000 fe9b 	bl	8004b94 <gen_triangle_angle>
 8003e5e:	eef0 7a40 	vmov.f32	s15, s0
 8003e62:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e66:	4a43      	ldr	r2, [pc, #268]	; (8003f74 <generate_waveforms+0x86c>)
 8003e68:	00a3      	lsls	r3, r4, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	edc3 7a00 	vstr	s15, [r3]

	else if(osc.lfo_wav == triangle)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			for(i = start; i < end; i++)
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	3301      	adds	r3, #1
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	88ba      	ldrh	r2, [r7, #4]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	dcd8      	bgt.n	8003e30 <generate_waveforms+0x728>
		}
	}

	else if(osc.lfo_wav == triangle)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003e7e:	e02d      	b.n	8003edc <generate_waveforms+0x7d4>
				buffer_lfo_float[i] = osc.lfo_amp*gen_triangle_angle( (sample_count_lfo+(i-start)) * angle_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.mod == VCOfreq)
 8003e80:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <generate_waveforms+0x864>)
 8003e82:	7b9b      	ldrb	r3, [r3, #14]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d129      	bne.n	8003edc <generate_waveforms+0x7d4>
		{
			for(i = start; i < end; i++)
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	e022      	b.n	8003ed4 <generate_waveforms+0x7cc>
			{
				buffer_lfo_float[i] = osc.lfo_amp*gen_triangle_integral_angle( (sample_count_lfo+(i-start)) * angle_lfo);
 8003e8e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <generate_waveforms+0x864>)
 8003e92:	ed93 8a06 	vldr	s16, [r3, #24]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <generate_waveforms+0x868>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eac:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb8:	f000 feb2 	bl	8004c20 <gen_triangle_integral_angle>
 8003ebc:	eef0 7a40 	vmov.f32	s15, s0
 8003ec0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <generate_waveforms+0x86c>)
 8003ec6:	00a3      	lsls	r3, r4, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.mod == VCOfreq)
		{
			for(i = start; i < end; i++)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	88ba      	ldrh	r2, [r7, #4]
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	dcd8      	bgt.n	8003e8e <generate_waveforms+0x786>
	}

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_am || adsr_fm)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 8003edc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d008      	beq.n	8003ef6 <generate_waveforms+0x7ee>
 8003ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d004      	beq.n	8003ef6 <generate_waveforms+0x7ee>
 8003eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	f040 8110 	bne.w	8004116 <generate_waveforms+0xa0e>
	{
		for(i = start; i < end; i++)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e107      	b.n	800410c <generate_waveforms+0xa04>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <generate_waveforms+0x870>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f10:	fb02 f201 	mul.w	r2, r2, r1
 8003f14:	1a9a      	subs	r2, r3, r2
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <generate_waveforms+0x874>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d232      	bcs.n	8003f84 <generate_waveforms+0x87c>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0 + 1.0 * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 8003f1e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <generate_waveforms+0x870>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f34:	fb02 f201 	mul.w	r2, r2, r1
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4e:	f000 fd39 	bl	80049c4 <gen_sawtooth_angle>
 8003f52:	eeb0 7a40 	vmov.f32	s14, s0
 8003f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <generate_waveforms+0x878>)
 8003f60:	00a3      	lsls	r3, r4, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	edc3 7a00 	vstr	s15, [r3]
 8003f68:	e0b2      	b.n	80040d0 <generate_waveforms+0x9c8>
 8003f6a:	bf00      	nop
 8003f6c:	20000054 	.word	0x20000054
 8003f70:	20000548 	.word	0x20000548
 8003f74:	20000244 	.word	0x20000244
 8003f78:	2000054c 	.word	0x2000054c
 8003f7c:	20000554 	.word	0x20000554
 8003f80:	20000344 	.word	0x20000344
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4bae      	ldr	r3, [pc, #696]	; (8004248 <generate_waveforms+0xb40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4413      	add	r3, r2
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f98:	fb02 f201 	mul.w	r2, r2, r1
 8003f9c:	1a9a      	subs	r2, r3, r2
 8003f9e:	4bab      	ldr	r3, [pc, #684]	; (800424c <generate_waveforms+0xb44>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d22a      	bcs.n	8003ffc <generate_waveforms+0x8f4>
			{
				// Decay
				buffer_adsr_am[i] = 1.0 * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 8003fa6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <generate_waveforms+0xb48>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1ad2      	subs	r2, r2, r3
 8003fb6:	4ba4      	ldr	r3, [pc, #656]	; (8004248 <generate_waveforms+0xb40>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4413      	add	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fc2:	fb02 f201 	mul.w	r2, r2, r1
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003fdc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003fe0:	eef0 0a47 	vmov.f32	s1, s14
 8003fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe8:	f000 fd8a 	bl	8004b00 <gen_rampdown_angle2>
 8003fec:	eef0 7a40 	vmov.f32	s15, s0
 8003ff0:	4a98      	ldr	r2, [pc, #608]	; (8004254 <generate_waveforms+0xb4c>)
 8003ff2:	00a3      	lsls	r3, r4, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
 8003ffa:	e069      	b.n	80040d0 <generate_waveforms+0x9c8>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	461a      	mov	r2, r3
 8004004:	4b90      	ldr	r3, [pc, #576]	; (8004248 <generate_waveforms+0xb40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4413      	add	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004010:	fb02 f201 	mul.w	r2, r2, r1
 8004014:	1a9a      	subs	r2, r3, r2
 8004016:	4b90      	ldr	r3, [pc, #576]	; (8004258 <generate_waveforms+0xb50>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d206      	bcs.n	800402c <generate_waveforms+0x924>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004022:	498c      	ldr	r1, [pc, #560]	; (8004254 <generate_waveforms+0xb4c>)
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e051      	b.n	80040d0 <generate_waveforms+0x9c8>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 800402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	461a      	mov	r2, r3
 8004034:	4b84      	ldr	r3, [pc, #528]	; (8004248 <generate_waveforms+0xb40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4413      	add	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004040:	fb02 f201 	mul.w	r2, r2, r1
 8004044:	1a9a      	subs	r2, r3, r2
 8004046:	4b85      	ldr	r3, [pc, #532]	; (800425c <generate_waveforms+0xb54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d228      	bcs.n	80040a0 <generate_waveforms+0x998>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 800404e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004050:	ed97 8a0b 	vldr	s16, [r7, #44]	; 0x2c
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	461a      	mov	r2, r3
 800405c:	4b7e      	ldr	r3, [pc, #504]	; (8004258 <generate_waveforms+0xb50>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1ad2      	subs	r2, r2, r3
 8004062:	4b79      	ldr	r3, [pc, #484]	; (8004248 <generate_waveforms+0xb40>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4413      	add	r3, r2
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	fbb3 f1f2 	udiv	r1, r3, r2
 800406e:	fb02 f201 	mul.w	r2, r2, r1
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800407c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004084:	eeb0 0a67 	vmov.f32	s0, s15
 8004088:	f000 fd0a 	bl	8004aa0 <gen_rampdown_angle>
 800408c:	eef0 7a40 	vmov.f32	s15, s0
 8004090:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004094:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <generate_waveforms+0xb4c>)
 8004096:	00a3      	lsls	r3, r4, #2
 8004098:	4413      	add	r3, r2
 800409a:	edc3 7a00 	vstr	s15, [r3]
 800409e:	e017      	b.n	80040d0 <generate_waveforms+0x9c8>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b67      	ldr	r3, [pc, #412]	; (8004248 <generate_waveforms+0xb40>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040b4:	fb02 f201 	mul.w	r2, r2, r1
 80040b8:	1a9a      	subs	r2, r3, r2
 80040ba:	4b69      	ldr	r3, [pc, #420]	; (8004260 <generate_waveforms+0xb58>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d206      	bcs.n	80040d0 <generate_waveforms+0x9c8>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	4a63      	ldr	r2, [pc, #396]	; (8004254 <generate_waveforms+0xb4c>)
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
			}
			buffer_output[i] = buffer_output[i] * buffer_adsr_am[i];
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	4963      	ldr	r1, [pc, #396]	; (8004264 <generate_waveforms+0xb5c>)
 80040d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80040da:	b292      	uxth	r2, r2
 80040dc:	ee07 2a90 	vmov	s15, r2
 80040e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	495b      	ldr	r1, [pc, #364]	; (8004254 <generate_waveforms+0xb4c>)
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	440a      	add	r2, r1
 80040ec:	edd2 7a00 	vldr	s15, [r2]
 80040f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f8:	edc7 7a00 	vstr	s15, [r7]
 80040fc:	883a      	ldrh	r2, [r7, #0]
 80040fe:	b291      	uxth	r1, r2
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <generate_waveforms+0xb5c>)
 8004102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_am || adsr_fm)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	3301      	adds	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	88ba      	ldrh	r2, [r7, #4]
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	429a      	cmp	r2, r3
 8004112:	f73f aef3 	bgt.w	8003efc <generate_waveforms+0x7f4>
	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	// if(adsr_fm)
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 8004116:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800411a:	2b01      	cmp	r3, #1
 800411c:	d004      	beq.n	8004128 <generate_waveforms+0xa20>
 800411e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004122:	2b04      	cmp	r3, #4
 8004124:	f040 818f 	bne.w	8004446 <generate_waveforms+0xd3e>
	{
		for(i = start; i < end; i++)
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	e186      	b.n	800443c <generate_waveforms+0xd34>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	461a      	mov	r2, r3
 8004136:	4b44      	ldr	r3, [pc, #272]	; (8004248 <generate_waveforms+0xb40>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4413      	add	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004142:	fb02 f201 	mul.w	r2, r2, r1
 8004146:	1a9a      	subs	r2, r3, r2
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <generate_waveforms+0xb48>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d234      	bcs.n	80041ba <generate_waveforms+0xab2>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	493f      	ldr	r1, [pc, #252]	; (8004254 <generate_waveforms+0xb4c>)
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	440a      	add	r2, r1
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	4942      	ldr	r1, [pc, #264]	; (8004268 <generate_waveforms+0xb60>)
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	dd15      	ble.n	8004196 <generate_waveforms+0xa8e>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	493e      	ldr	r1, [pc, #248]	; (8004268 <generate_waveforms+0xb60>)
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	440a      	add	r2, r1
 8004174:	ed92 7a00 	vldr	s14, [r2]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	3a01      	subs	r2, #1
 800417c:	493a      	ldr	r1, [pc, #232]	; (8004268 <generate_waveforms+0xb60>)
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	440a      	add	r2, r1
 8004182:	edd2 7a00 	vldr	s15, [r2]
 8004186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800418a:	4a37      	ldr	r2, [pc, #220]	; (8004268 <generate_waveforms+0xb60>)
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	edc3 7a00 	vstr	s15, [r3]
 8004194:	e14f      	b.n	8004436 <generate_waveforms+0xd2e>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	4933      	ldr	r1, [pc, #204]	; (8004268 <generate_waveforms+0xb60>)
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	440a      	add	r2, r1
 80041a0:	ed92 7a00 	vldr	s14, [r2]
 80041a4:	4a30      	ldr	r2, [pc, #192]	; (8004268 <generate_waveforms+0xb60>)
 80041a6:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 80041aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ae:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <generate_waveforms+0xb60>)
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	edc3 7a00 	vstr	s15, [r3]
 80041b8:	e13d      	b.n	8004436 <generate_waveforms+0xd2e>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <generate_waveforms+0xb40>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80041ce:	fb02 f201 	mul.w	r2, r2, r1
 80041d2:	1a9a      	subs	r2, r3, r2
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <generate_waveforms+0xb44>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d247      	bcs.n	800426c <generate_waveforms+0xb64>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	491c      	ldr	r1, [pc, #112]	; (8004254 <generate_waveforms+0xb4c>)
 80041e2:	0092      	lsls	r2, r2, #2
 80041e4:	440a      	add	r2, r1
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	491f      	ldr	r1, [pc, #124]	; (8004268 <generate_waveforms+0xb60>)
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	601a      	str	r2, [r3, #0]
				if(i > 0)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dd15      	ble.n	8004222 <generate_waveforms+0xb1a>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	491b      	ldr	r1, [pc, #108]	; (8004268 <generate_waveforms+0xb60>)
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	440a      	add	r2, r1
 8004200:	ed92 7a00 	vldr	s14, [r2]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	3a01      	subs	r2, #1
 8004208:	4917      	ldr	r1, [pc, #92]	; (8004268 <generate_waveforms+0xb60>)
 800420a:	0092      	lsls	r2, r2, #2
 800420c:	440a      	add	r2, r1
 800420e:	edd2 7a00 	vldr	s15, [r2]
 8004212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <generate_waveforms+0xb60>)
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	edc3 7a00 	vstr	s15, [r3]
 8004220:	e109      	b.n	8004436 <generate_waveforms+0xd2e>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004226:	4910      	ldr	r1, [pc, #64]	; (8004268 <generate_waveforms+0xb60>)
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	440a      	add	r2, r1
 800422c:	ed92 7a00 	vldr	s14, [r2]
 8004230:	4a0d      	ldr	r2, [pc, #52]	; (8004268 <generate_waveforms+0xb60>)
 8004232:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <generate_waveforms+0xb60>)
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	edc3 7a00 	vstr	s15, [r3]
 8004244:	e0f7      	b.n	8004436 <generate_waveforms+0xd2e>
 8004246:	bf00      	nop
 8004248:	2000054c 	.word	0x2000054c
 800424c:	20000558 	.word	0x20000558
 8004250:	20000554 	.word	0x20000554
 8004254:	20000344 	.word	0x20000344
 8004258:	2000055c 	.word	0x2000055c
 800425c:	20000560 	.word	0x20000560
 8004260:	20000564 	.word	0x20000564
 8004264:	200001c4 	.word	0x200001c4
 8004268:	20000444 	.word	0x20000444
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	461a      	mov	r2, r3
 8004274:	4bae      	ldr	r3, [pc, #696]	; (8004530 <generate_waveforms+0xe28>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4413      	add	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004280:	fb02 f201 	mul.w	r2, r2, r1
 8004284:	1a9a      	subs	r2, r3, r2
 8004286:	4bab      	ldr	r3, [pc, #684]	; (8004534 <generate_waveforms+0xe2c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d275      	bcs.n	800437a <generate_waveforms+0xc72>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	461a      	mov	r2, r3
 8004296:	4ba6      	ldr	r3, [pc, #664]	; (8004530 <generate_waveforms+0xe28>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4413      	add	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	fbb3 f1f2 	udiv	r1, r3, r2
 80042a2:	fb02 f201 	mul.w	r2, r2, r1
 80042a6:	1a9a      	subs	r2, r3, r2
 80042a8:	4ba3      	ldr	r3, [pc, #652]	; (8004538 <generate_waveforms+0xe30>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d13f      	bne.n	8004330 <generate_waveforms+0xc28>
				{
					if(i > 1)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	dd13      	ble.n	80042de <generate_waveforms+0xbd6>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	3b01      	subs	r3, #1
 80042ba:	4aa0      	ldr	r2, [pc, #640]	; (800453c <generate_waveforms+0xe34>)
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	3b02      	subs	r3, #2
 80042c8:	4a9c      	ldr	r2, [pc, #624]	; (800453c <generate_waveforms+0xe34>)
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	edd3 7a00 	vldr	s15, [r3]
 80042d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d6:	4b9a      	ldr	r3, [pc, #616]	; (8004540 <generate_waveforms+0xe38>)
 80042d8:	edc3 7a00 	vstr	s15, [r3]
 80042dc:	e020      	b.n	8004320 <generate_waveforms+0xc18>
					}
					else if(i == 0)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <generate_waveforms+0xbf4>
					{
						delta = buffer_adsr_fm[BUFF_LEN-1] - buffer_adsr_fm[BUFF_LEN-2];
 80042e4:	4b95      	ldr	r3, [pc, #596]	; (800453c <generate_waveforms+0xe34>)
 80042e6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 80042ea:	4b94      	ldr	r3, [pc, #592]	; (800453c <generate_waveforms+0xe34>)
 80042ec:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80042f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f4:	4b92      	ldr	r3, [pc, #584]	; (8004540 <generate_waveforms+0xe38>)
 80042f6:	edc3 7a00 	vstr	s15, [r3]
 80042fa:	e011      	b.n	8004320 <generate_waveforms+0xc18>
					}
					else if(i == 1)
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10e      	bne.n	8004320 <generate_waveforms+0xc18>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[BUFF_LEN-1];
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	3b01      	subs	r3, #1
 8004306:	4a8d      	ldr	r2, [pc, #564]	; (800453c <generate_waveforms+0xe34>)
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	ed93 7a00 	vldr	s14, [r3]
 8004310:	4b8a      	ldr	r3, [pc, #552]	; (800453c <generate_waveforms+0xe34>)
 8004312:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8004316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800431a:	4b89      	ldr	r3, [pc, #548]	; (8004540 <generate_waveforms+0xe38>)
 800431c:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	4a86      	ldr	r2, [pc, #536]	; (800453c <generate_waveforms+0xe34>)
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e082      	b.n	8004436 <generate_waveforms+0xd2e>
				}
				else
				{
					if(i > 0)
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	2b00      	cmp	r3, #0
 8004334:	dd12      	ble.n	800435c <generate_waveforms+0xc54>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433a:	3a01      	subs	r2, #1
 800433c:	497f      	ldr	r1, [pc, #508]	; (800453c <generate_waveforms+0xe34>)
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	440a      	add	r2, r1
 8004342:	ed92 7a00 	vldr	s14, [r2]
 8004346:	4a7e      	ldr	r2, [pc, #504]	; (8004540 <generate_waveforms+0xe38>)
 8004348:	edd2 7a00 	vldr	s15, [r2]
 800434c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004350:	4a7a      	ldr	r2, [pc, #488]	; (800453c <generate_waveforms+0xe34>)
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	edc3 7a00 	vstr	s15, [r3]
 800435a:	e06c      	b.n	8004436 <generate_waveforms+0xd2e>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[BUFF_LEN-1] + delta;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	4a77      	ldr	r2, [pc, #476]	; (800453c <generate_waveforms+0xe34>)
 8004360:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8004364:	4a76      	ldr	r2, [pc, #472]	; (8004540 <generate_waveforms+0xe38>)
 8004366:	edd2 7a00 	vldr	s15, [r2]
 800436a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436e:	4a73      	ldr	r2, [pc, #460]	; (800453c <generate_waveforms+0xe34>)
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	edc3 7a00 	vstr	s15, [r3]
 8004378:	e05d      	b.n	8004436 <generate_waveforms+0xd2e>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	461a      	mov	r2, r3
 8004382:	4b6b      	ldr	r3, [pc, #428]	; (8004530 <generate_waveforms+0xe28>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	fbb3 f1f2 	udiv	r1, r3, r2
 800438e:	fb02 f201 	mul.w	r2, r2, r1
 8004392:	1a9a      	subs	r2, r3, r2
 8004394:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <generate_waveforms+0xe3c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d234      	bcs.n	8004406 <generate_waveforms+0xcfe>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	4969      	ldr	r1, [pc, #420]	; (8004548 <generate_waveforms+0xe40>)
 80043a2:	0092      	lsls	r2, r2, #2
 80043a4:	440a      	add	r2, r1
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	4964      	ldr	r1, [pc, #400]	; (800453c <generate_waveforms+0xe34>)
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	601a      	str	r2, [r3, #0]
				if(i > 0)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dd15      	ble.n	80043e2 <generate_waveforms+0xcda>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	4960      	ldr	r1, [pc, #384]	; (800453c <generate_waveforms+0xe34>)
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	440a      	add	r2, r1
 80043c0:	ed92 7a00 	vldr	s14, [r2]
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	3a01      	subs	r2, #1
 80043c8:	495c      	ldr	r1, [pc, #368]	; (800453c <generate_waveforms+0xe34>)
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	440a      	add	r2, r1
 80043ce:	edd2 7a00 	vldr	s15, [r2]
 80043d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d6:	4a59      	ldr	r2, [pc, #356]	; (800453c <generate_waveforms+0xe34>)
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	edc3 7a00 	vstr	s15, [r3]
 80043e0:	e029      	b.n	8004436 <generate_waveforms+0xd2e>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[BUFF_LEN-1];
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	4955      	ldr	r1, [pc, #340]	; (800453c <generate_waveforms+0xe34>)
 80043e8:	0092      	lsls	r2, r2, #2
 80043ea:	440a      	add	r2, r1
 80043ec:	ed92 7a00 	vldr	s14, [r2]
 80043f0:	4a52      	ldr	r2, [pc, #328]	; (800453c <generate_waveforms+0xe34>)
 80043f2:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 80043f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fa:	4a50      	ldr	r2, [pc, #320]	; (800453c <generate_waveforms+0xe34>)
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	edc3 7a00 	vstr	s15, [r3]
 8004404:	e017      	b.n	8004436 <generate_waveforms+0xd2e>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	461a      	mov	r2, r3
 800440e:	4b48      	ldr	r3, [pc, #288]	; (8004530 <generate_waveforms+0xe28>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	fbb3 f1f2 	udiv	r1, r3, r2
 800441a:	fb02 f201 	mul.w	r2, r2, r1
 800441e:	1a9a      	subs	r2, r3, r2
 8004420:	4b4a      	ldr	r3, [pc, #296]	; (800454c <generate_waveforms+0xe44>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d206      	bcs.n	8004436 <generate_waveforms+0xd2e>
			{
				// Blank
				buffer_adsr_fm[i] = 0;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	4a44      	ldr	r2, [pc, #272]	; (800453c <generate_waveforms+0xe34>)
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	// if(adsr_fm)
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	3301      	adds	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	88ba      	ldrh	r2, [r7, #4]
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	429a      	cmp	r2, r3
 8004442:	f73f ae74 	bgt.w	800412e <generate_waveforms+0xa26>
			}
		}
	}

	// FM for sine wave VCO.
	if(osc.vco_wav == sine && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 8004446:	4b42      	ldr	r3, [pc, #264]	; (8004550 <generate_waveforms+0xe48>)
 8004448:	7b1b      	ldrb	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d157      	bne.n	80044fe <generate_waveforms+0xdf6>
 800444e:	4b40      	ldr	r3, [pc, #256]	; (8004550 <generate_waveforms+0xe48>)
 8004450:	7b9b      	ldrb	r3, [r3, #14]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d00b      	beq.n	800446e <generate_waveforms+0xd66>
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <generate_waveforms+0xe48>)
 8004458:	7b9b      	ldrb	r3, [r3, #14]
 800445a:	2b04      	cmp	r3, #4
 800445c:	d007      	beq.n	800446e <generate_waveforms+0xd66>
 800445e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004462:	2b01      	cmp	r3, #1
 8004464:	d003      	beq.n	800446e <generate_waveforms+0xd66>
 8004466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800446a:	2b04      	cmp	r3, #4
 800446c:	d147      	bne.n	80044fe <generate_waveforms+0xdf6>
	{
		for(i = start; i < end; i++)
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	e03f      	b.n	80044f4 <generate_waveforms+0xdec>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32((sample_count_vco+(i-start))*angle_vco + 100*buffer_lfo_float[i] + buffer_adsr_fm[i]);
 8004474:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <generate_waveforms+0xe48>)
 8004478:	ed93 8a04 	vldr	s16, [r3, #16]
 800447c:	4b34      	ldr	r3, [pc, #208]	; (8004550 <generate_waveforms+0xe48>)
 800447e:	edd3 8a04 	vldr	s17, [r3, #16]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	461a      	mov	r2, r3
 800448a:	4b32      	ldr	r3, [pc, #200]	; (8004554 <generate_waveforms+0xe4c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4413      	add	r3, r2
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004498:	edd7 7a08 	vldr	s15, [r7, #32]
 800449c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <generate_waveforms+0xe50>)
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	edd3 7a00 	vldr	s15, [r3]
 80044ac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800455c <generate_waveforms+0xe54>
 80044b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	4a20      	ldr	r2, [pc, #128]	; (800453c <generate_waveforms+0xe34>)
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c8:	eeb0 0a67 	vmov.f32	s0, s15
 80044cc:	f000 fec2 	bl	8005254 <arm_sin_f32>
 80044d0:	eef0 7a40 	vmov.f32	s15, s0
 80044d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80044d8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80044dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e0:	edc7 7a00 	vstr	s15, [r7]
 80044e4:	883b      	ldrh	r3, [r7, #0]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <generate_waveforms+0xe58>)
 80044ea:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}

	// FM for sine wave VCO.
	if(osc.vco_wav == sine && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
	{
		for(i = start; i < end; i++)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	88ba      	ldrh	r2, [r7, #4]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	429a      	cmp	r2, r3
 80044fa:	dcbb      	bgt.n	8004474 <generate_waveforms+0xd6c>
			}
		}
	}

	// FM for sine wave VCO.
	if(osc.vco_wav == sine && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 80044fc:	e176      	b.n	80047ec <generate_waveforms+0x10e4>
		}
	}

	// FM for square wave VCO.
	// else if(osc.vco_wav == square && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == square && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <generate_waveforms+0xe48>)
 8004500:	7b1b      	ldrb	r3, [r3, #12]
 8004502:	2b02      	cmp	r3, #2
 8004504:	f040 808b 	bne.w	800461e <generate_waveforms+0xf16>
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <generate_waveforms+0xe48>)
 800450a:	7b9b      	ldrb	r3, [r3, #14]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d00b      	beq.n	8004528 <generate_waveforms+0xe20>
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <generate_waveforms+0xe48>)
 8004512:	7b9b      	ldrb	r3, [r3, #14]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d007      	beq.n	8004528 <generate_waveforms+0xe20>
 8004518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800451c:	2b01      	cmp	r3, #1
 800451e:	d003      	beq.n	8004528 <generate_waveforms+0xe20>
 8004520:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004524:	2b04      	cmp	r3, #4
 8004526:	d17a      	bne.n	800461e <generate_waveforms+0xf16>
	{
		for(i = start; i < end; i++)
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	e072      	b.n	8004614 <generate_waveforms+0xf0c>
 800452e:	bf00      	nop
 8004530:	2000054c 	.word	0x2000054c
 8004534:	2000055c 	.word	0x2000055c
 8004538:	20000558 	.word	0x20000558
 800453c:	20000444 	.word	0x20000444
 8004540:	20000568 	.word	0x20000568
 8004544:	20000560 	.word	0x20000560
 8004548:	20000344 	.word	0x20000344
 800454c:	20000564 	.word	0x20000564
 8004550:	20000054 	.word	0x20000054
 8004554:	20000544 	.word	0x20000544
 8004558:	20000244 	.word	0x20000244
 800455c:	42c80000 	.word	0x42c80000
 8004560:	200001c4 	.word	0x200001c4
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_square_angle((sample_count_vco+(i-start))*angle_vco + 100*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 8004564:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004566:	4bac      	ldr	r3, [pc, #688]	; (8004818 <generate_waveforms+0x1110>)
 8004568:	ed93 8a04 	vldr	s16, [r3, #16]
 800456c:	4baa      	ldr	r3, [pc, #680]	; (8004818 <generate_waveforms+0x1110>)
 800456e:	edd3 8a04 	vldr	s17, [r3, #16]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	461a      	mov	r2, r3
 800457a:	4ba8      	ldr	r3, [pc, #672]	; (800481c <generate_waveforms+0x1114>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4413      	add	r3, r2
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004588:	edd7 7a08 	vldr	s15, [r7, #32]
 800458c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	4aa3      	ldr	r2, [pc, #652]	; (8004820 <generate_waveforms+0x1118>)
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8004824 <generate_waveforms+0x111c>
 80045a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a8:	ee17 0a90 	vmov	r0, s15
 80045ac:	f7fb ff70 	bl	8000490 <__aeabi_f2d>
 80045b0:	4605      	mov	r5, r0
 80045b2:	460e      	mov	r6, r1
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	4a9c      	ldr	r2, [pc, #624]	; (8004828 <generate_waveforms+0x1120>)
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fb ff66 	bl	8000490 <__aeabi_f2d>
 80045c4:	a390      	add	r3, pc, #576	; (adr r3, 8004808 <generate_waveforms+0x1100>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb ffb5 	bl	8000538 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4628      	mov	r0, r5
 80045d4:	4631      	mov	r1, r6
 80045d6:	f7fb fdfd 	bl	80001d4 <__adddf3>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7fc fa59 	bl	8000a98 <__aeabi_d2f>
 80045e6:	4603      	mov	r3, r0
 80045e8:	ee00 3a10 	vmov	s0, r3
 80045ec:	f000 f9c2 	bl	8004974 <gen_square_angle>
 80045f0:	eef0 7a40 	vmov.f32	s15, s0
 80045f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80045f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80045fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004600:	edc7 7a00 	vstr	s15, [r7]
 8004604:	883b      	ldrh	r3, [r7, #0]
 8004606:	b29a      	uxth	r2, r3
 8004608:	4b88      	ldr	r3, [pc, #544]	; (800482c <generate_waveforms+0x1124>)
 800460a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// FM for square wave VCO.
	// else if(osc.vco_wav == square && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == square && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
	{
		for(i = start; i < end; i++)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	3301      	adds	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	88ba      	ldrh	r2, [r7, #4]
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	429a      	cmp	r2, r3
 800461a:	dca3      	bgt.n	8004564 <generate_waveforms+0xe5c>
		}
	}

	// FM for square wave VCO.
	// else if(osc.vco_wav == square && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == square && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 800461c:	e0e6      	b.n	80047ec <generate_waveforms+0x10e4>
		}
	}

	// FM for sawtooth wave VCO.
	// else if(osc.vco_wav == sawtooth && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == sawtooth && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 800461e:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <generate_waveforms+0x1110>)
 8004620:	7b1b      	ldrb	r3, [r3, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d16f      	bne.n	8004706 <generate_waveforms+0xffe>
 8004626:	4b7c      	ldr	r3, [pc, #496]	; (8004818 <generate_waveforms+0x1110>)
 8004628:	7b9b      	ldrb	r3, [r3, #14]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d00b      	beq.n	8004646 <generate_waveforms+0xf3e>
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <generate_waveforms+0x1110>)
 8004630:	7b9b      	ldrb	r3, [r3, #14]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d007      	beq.n	8004646 <generate_waveforms+0xf3e>
 8004636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800463a:	2b01      	cmp	r3, #1
 800463c:	d003      	beq.n	8004646 <generate_waveforms+0xf3e>
 800463e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004642:	2b04      	cmp	r3, #4
 8004644:	d15f      	bne.n	8004706 <generate_waveforms+0xffe>
	{
		for(i = start; i < end; i++)
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e057      	b.n	80046fc <generate_waveforms+0xff4>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_sawtooth_angle((sample_count_vco+(i-start))*angle_vco + 50*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 800464c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800464e:	4b72      	ldr	r3, [pc, #456]	; (8004818 <generate_waveforms+0x1110>)
 8004650:	ed93 8a04 	vldr	s16, [r3, #16]
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <generate_waveforms+0x1110>)
 8004656:	edd3 8a04 	vldr	s17, [r3, #16]
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4b6e      	ldr	r3, [pc, #440]	; (800481c <generate_waveforms+0x1114>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4413      	add	r3, r2
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004670:	edd7 7a08 	vldr	s15, [r7, #32]
 8004674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	4a69      	ldr	r2, [pc, #420]	; (8004820 <generate_waveforms+0x1118>)
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004830 <generate_waveforms+0x1128>
 8004688:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004690:	ee17 0a90 	vmov	r0, s15
 8004694:	f7fb fefc 	bl	8000490 <__aeabi_f2d>
 8004698:	4605      	mov	r5, r0
 800469a:	460e      	mov	r6, r1
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	4a62      	ldr	r2, [pc, #392]	; (8004828 <generate_waveforms+0x1120>)
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fb fef2 	bl	8000490 <__aeabi_f2d>
 80046ac:	a356      	add	r3, pc, #344	; (adr r3, 8004808 <generate_waveforms+0x1100>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb ff41 	bl	8000538 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4628      	mov	r0, r5
 80046bc:	4631      	mov	r1, r6
 80046be:	f7fb fd89 	bl	80001d4 <__adddf3>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fc f9e5 	bl	8000a98 <__aeabi_d2f>
 80046ce:	4603      	mov	r3, r0
 80046d0:	ee00 3a10 	vmov	s0, r3
 80046d4:	f000 f976 	bl	80049c4 <gen_sawtooth_angle>
 80046d8:	eef0 7a40 	vmov.f32	s15, s0
 80046dc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80046e0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	edc7 7a00 	vstr	s15, [r7]
 80046ec:	883b      	ldrh	r3, [r7, #0]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	4b4e      	ldr	r3, [pc, #312]	; (800482c <generate_waveforms+0x1124>)
 80046f2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// FM for sawtooth wave VCO.
	// else if(osc.vco_wav == sawtooth && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == sawtooth && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
	{
		for(i = start; i < end; i++)
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	3301      	adds	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	88ba      	ldrh	r2, [r7, #4]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	429a      	cmp	r2, r3
 8004702:	dca3      	bgt.n	800464c <generate_waveforms+0xf44>
		}
	}

	// FM for sawtooth wave VCO.
	// else if(osc.vco_wav == sawtooth && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == sawtooth && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 8004704:	e072      	b.n	80047ec <generate_waveforms+0x10e4>
		}
	}

	// FM for triangle wave VCO.
	// else if(osc.vco_wav == triangle && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == triangle && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
 8004706:	4b44      	ldr	r3, [pc, #272]	; (8004818 <generate_waveforms+0x1110>)
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d16e      	bne.n	80047ec <generate_waveforms+0x10e4>
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <generate_waveforms+0x1110>)
 8004710:	7b9b      	ldrb	r3, [r3, #14]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00b      	beq.n	800472e <generate_waveforms+0x1026>
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <generate_waveforms+0x1110>)
 8004718:	7b9b      	ldrb	r3, [r3, #14]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d007      	beq.n	800472e <generate_waveforms+0x1026>
 800471e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004722:	2b01      	cmp	r3, #1
 8004724:	d003      	beq.n	800472e <generate_waveforms+0x1026>
 8004726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800472a:	2b04      	cmp	r3, #4
 800472c:	d15e      	bne.n	80047ec <generate_waveforms+0x10e4>
	{
		for(i = start; i < end; i++)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e057      	b.n	80047e4 <generate_waveforms+0x10dc>
		{
			buffer_output[i] = osc.vco_amp + osc.vco_amp * gen_triangle_angle((sample_count_vco+(i-start))*angle_vco + 50*buffer_lfo_float[i] + 0.01 * buffer_adsr_fm[i]);
 8004734:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <generate_waveforms+0x1110>)
 8004738:	ed93 8a04 	vldr	s16, [r3, #16]
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <generate_waveforms+0x1110>)
 800473e:	edd3 8a04 	vldr	s17, [r3, #16]
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	461a      	mov	r2, r3
 800474a:	4b34      	ldr	r3, [pc, #208]	; (800481c <generate_waveforms+0x1114>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4413      	add	r3, r2
 8004750:	ee07 3a90 	vmov	s15, r3
 8004754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004758:	edd7 7a08 	vldr	s15, [r7, #32]
 800475c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <generate_waveforms+0x1118>)
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004830 <generate_waveforms+0x1128>
 8004770:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004778:	ee17 0a90 	vmov	r0, s15
 800477c:	f7fb fe88 	bl	8000490 <__aeabi_f2d>
 8004780:	4605      	mov	r5, r0
 8004782:	460e      	mov	r6, r1
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	4a28      	ldr	r2, [pc, #160]	; (8004828 <generate_waveforms+0x1120>)
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb fe7e 	bl	8000490 <__aeabi_f2d>
 8004794:	a31e      	add	r3, pc, #120	; (adr r3, 8004810 <generate_waveforms+0x1108>)
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f7fb fecd 	bl	8000538 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4628      	mov	r0, r5
 80047a4:	4631      	mov	r1, r6
 80047a6:	f7fb fd15 	bl	80001d4 <__adddf3>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	f7fc f971 	bl	8000a98 <__aeabi_d2f>
 80047b6:	4603      	mov	r3, r0
 80047b8:	ee00 3a10 	vmov	s0, r3
 80047bc:	f000 f9ea 	bl	8004b94 <gen_triangle_angle>
 80047c0:	eef0 7a40 	vmov.f32	s15, s0
 80047c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80047c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	edc7 7a00 	vstr	s15, [r7]
 80047d4:	883b      	ldrh	r3, [r7, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <generate_waveforms+0x1124>)
 80047da:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// FM for triangle wave VCO.
	// else if(osc.vco_wav == triangle && ( osc.mod == ON || adsr_fm == ON ) )
	else if(osc.vco_wav == triangle && ( osc.mod == VCOfreq || osc.mod == DualMode_VCO || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO ) )
	{
		for(i = start; i < end; i++)
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	88ba      	ldrh	r2, [r7, #4]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dca3      	bgt.n	8004734 <generate_waveforms+0x102c>
		}
	}

	// AM modulation.
	// if(osc.am_mod == ON)
	if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <generate_waveforms+0x1110>)
 80047ee:	7b9b      	ldrb	r3, [r3, #14]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d003      	beq.n	80047fc <generate_waveforms+0x10f4>
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <generate_waveforms+0x1110>)
 80047f6:	7b9b      	ldrb	r3, [r3, #14]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d13d      	bne.n	8004878 <generate_waveforms+0x1170>
	{
		for(i = start; i < end; i++)
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004800:	e036      	b.n	8004870 <generate_waveforms+0x1168>
 8004802:	bf00      	nop
 8004804:	f3af 8000 	nop.w
 8004808:	33333333 	.word	0x33333333
 800480c:	3fd33333 	.word	0x3fd33333
 8004810:	47ae147b 	.word	0x47ae147b
 8004814:	3f847ae1 	.word	0x3f847ae1
 8004818:	20000054 	.word	0x20000054
 800481c:	20000544 	.word	0x20000544
 8004820:	20000244 	.word	0x20000244
 8004824:	42c80000 	.word	0x42c80000
 8004828:	20000444 	.word	0x20000444
 800482c:	200001c4 	.word	0x200001c4
 8004830:	42480000 	.word	0x42480000
		{
			buffer_output[i] = buffer_output[i] * buffer_lfo_float[i];
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	4946      	ldr	r1, [pc, #280]	; (8004954 <generate_waveforms+0x124c>)
 800483a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800483e:	b292      	uxth	r2, r2
 8004840:	ee07 2a90 	vmov	s15, r2
 8004844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	4943      	ldr	r1, [pc, #268]	; (8004958 <generate_waveforms+0x1250>)
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	440a      	add	r2, r1
 8004850:	edd2 7a00 	vldr	s15, [r2]
 8004854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485c:	edc7 7a00 	vstr	s15, [r7]
 8004860:	883a      	ldrh	r2, [r7, #0]
 8004862:	b291      	uxth	r1, r2
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <generate_waveforms+0x124c>)
 8004866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// AM modulation.
	// if(osc.am_mod == ON)
	if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	3301      	adds	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	88ba      	ldrh	r2, [r7, #4]
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	429a      	cmp	r2, r3
 8004876:	dcdd      	bgt.n	8004834 <generate_waveforms+0x112c>
	}

	// ADSR amplitude envelope
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_am)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
 8004878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	d003      	beq.n	8004888 <generate_waveforms+0x1180>
 8004880:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004884:	2b04      	cmp	r3, #4
 8004886:	d124      	bne.n	80048d2 <generate_waveforms+0x11ca>
	{
		for(i = start; i < end; i++)
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e01d      	b.n	80048ca <generate_waveforms+0x11c2>
		{
			buffer_output[i] = buffer_output[i] * buffer_adsr_am[i];
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	4930      	ldr	r1, [pc, #192]	; (8004954 <generate_waveforms+0x124c>)
 8004894:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004898:	b292      	uxth	r2, r2
 800489a:	ee07 2a90 	vmov	s15, r2
 800489e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	492d      	ldr	r1, [pc, #180]	; (800495c <generate_waveforms+0x1254>)
 80048a6:	0092      	lsls	r2, r2, #2
 80048a8:	440a      	add	r2, r1
 80048aa:	edd2 7a00 	vldr	s15, [r2]
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b6:	edc7 7a00 	vstr	s15, [r7]
 80048ba:	883a      	ldrh	r2, [r7, #0]
 80048bc:	b291      	uxth	r1, r2
 80048be:	4a25      	ldr	r2, [pc, #148]	; (8004954 <generate_waveforms+0x124c>)
 80048c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// ADSR amplitude envelope
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_am)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	88ba      	ldrh	r2, [r7, #4]
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	429a      	cmp	r2, r3
 80048d0:	dcdd      	bgt.n	800488e <generate_waveforms+0x1186>
	 *  This might help:
	 *  https://math.stackexchange.com/questions/1823788/how-to-determine-lowest-integer-multiple-for-any-given-decimal-fraction
	 * OR...
	 * ** Multiple samples_cycle_vco by 100 or 1000 and mod that....  Might be close enough.
	 */
	sample_count_vco = sample_count_vco + (i - start);
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <generate_waveforms+0x1258>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <generate_waveforms+0x1258>)
 80048e2:	6013      	str	r3, [r2, #0]
	sample_count_vco = sample_count_vco % TWENTY_SECOND;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <generate_waveforms+0x1258>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <generate_waveforms+0x125c>)
 80048ea:	fba3 1302 	umull	r1, r3, r3, r2
 80048ee:	0cdb      	lsrs	r3, r3, #19
 80048f0:	491d      	ldr	r1, [pc, #116]	; (8004968 <generate_waveforms+0x1260>)
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	4a19      	ldr	r2, [pc, #100]	; (8004960 <generate_waveforms+0x1258>)
 80048fa:	6013      	str	r3, [r2, #0]

	sample_count_lfo = sample_count_lfo + (i - start);
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	461a      	mov	r2, r3
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <generate_waveforms+0x1264>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4413      	add	r3, r2
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <generate_waveforms+0x1264>)
 800490c:	6013      	str	r3, [r2, #0]
	sample_count_lfo = sample_count_lfo % samples_cycle_lfo;
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <generate_waveforms+0x1264>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	fbb3 f1f2 	udiv	r1, r3, r2
 8004918:	fb02 f201 	mul.w	r2, r2, r1
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <generate_waveforms+0x1264>)
 8004920:	6013      	str	r3, [r2, #0]

	sample_count_adsr = sample_count_adsr + (i - start);
 8004922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	461a      	mov	r2, r3
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <generate_waveforms+0x1268>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4413      	add	r3, r2
 8004930:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <generate_waveforms+0x1268>)
 8004932:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <generate_waveforms+0x1268>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	fbb3 f1f2 	udiv	r1, r3, r2
 800493e:	fb02 f201 	mul.w	r2, r2, r1
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <generate_waveforms+0x1268>)
 8004946:	6013      	str	r3, [r2, #0]

	return;
 8004948:	bf00      	nop
}
 800494a:	374c      	adds	r7, #76	; 0x4c
 800494c:	46bd      	mov	sp, r7
 800494e:	ecbd 8b02 	vpop	{d8}
 8004952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004954:	200001c4 	.word	0x200001c4
 8004958:	20000244 	.word	0x20000244
 800495c:	20000344 	.word	0x20000344
 8004960:	20000544 	.word	0x20000544
 8004964:	45e7b273 	.word	0x45e7b273
 8004968:	001d4c00 	.word	0x001d4c00
 800496c:	20000548 	.word	0x20000548
 8004970:	2000054c 	.word	0x2000054c

08004974 <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 800497e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80049b8 <gen_square_angle+0x44>
 8004982:	ed97 0a01 	vldr	s0, [r7, #4]
 8004986:	f000 f9cf 	bl	8004d28 <fast_fmod>
 800498a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 800498e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004992:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80049bc <gen_square_angle+0x48>
 8004996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499e:	d501      	bpl.n	80049a4 <gen_square_angle+0x30>
	{
		return -1;
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <gen_square_angle+0x4c>)
 80049a2:	e001      	b.n	80049a8 <gen_square_angle+0x34>
	}
	return 1;
 80049a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80049a8:	ee07 3a90 	vmov	s15, r3
}
 80049ac:	eeb0 0a67 	vmov.f32	s0, s15
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40c90fdb 	.word	0x40c90fdb
 80049bc:	40490fdb 	.word	0x40490fdb
 80049c0:	bf800000 	.word	0xbf800000

080049c4 <gen_sawtooth_angle>:

	return val;
}

float32_t gen_sawtooth_angle(float32_t angle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 80049da:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004a18 <gen_sawtooth_angle+0x54>
 80049de:	ed97 0a01 	vldr	s0, [r7, #4]
 80049e2:	f000 f9a1 	bl	8004d28 <fast_fmod>
 80049e6:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <gen_sawtooth_angle+0x58>)
 80049ec:	60fb      	str	r3, [r7, #12]
	val = -1+angle*m;
 80049ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80049f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a02:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	ee07 3a90 	vmov	s15, r3
}
 8004a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40c90fdb 	.word	0x40c90fdb
 8004a1c:	3ea2f983 	.word	0x3ea2f983

08004a20 <gen_sawtooth_integral_angle>:
//	val = angle*m;
//	return val;
//}

float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004a36:	eddf 0a18 	vldr	s1, [pc, #96]	; 8004a98 <gen_sawtooth_integral_angle+0x78>
 8004a3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a3e:	f000 f973 	bl	8004d28 <fast_fmod>
 8004a42:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <gen_sawtooth_integral_angle+0x7c>)
 8004a48:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8004a4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2;			// Double it.
 8004a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a72:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1;			// Shift it down
 8004a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a82:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	ee07 3a90 	vmov	s15, r3

	// Test
	// return 2*(m*angle)*2 - 1;

	// return 0;
}
 8004a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40c90fdb 	.word	0x40c90fdb
 8004a9c:	3e22f983 	.word	0x3e22f983

08004aa0 <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004ab6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004af4 <gen_rampdown_angle+0x54>
 8004aba:	ed97 0a01 	vldr	s0, [r7, #4]
 8004abe:	f000 f933 	bl	8004d28 <fast_fmod>
 8004ac2:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <gen_rampdown_angle+0x58>)
 8004ac8:	60fb      	str	r3, [r7, #12]
	val = 1.0 + angle*m;
 8004aca:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ade:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	ee07 3a90 	vmov	s15, r3
}
 8004ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40c90fdb 	.word	0x40c90fdb
 8004af8:	bea2f983 	.word	0xbea2f983
 8004afc:	00000000 	.word	0x00000000

08004b00 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b0e:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0;
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0;
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8004b1e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004b90 <gen_rampdown_angle2+0x90>
 8004b22:	ed97 0a03 	vldr	s0, [r7, #12]
 8004b26:	f000 f8ff 	bl	8004d28 <fast_fmod>
 8004b2a:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8004b2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3a:	ee17 0a90 	vmov	r0, s15
 8004b3e:	f7fb fca7 	bl	8000490 <__aeabi_f2d>
 8004b42:	a311      	add	r3, pc, #68	; (adr r3, 8004b88 <gen_rampdown_angle2+0x88>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fcf6 	bl	8000538 <__aeabi_dmul>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4618      	mov	r0, r3
 8004b52:	4621      	mov	r1, r4
 8004b54:	f7fb ffa0 	bl	8000a98 <__aeabi_d2f>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	617b      	str	r3, [r7, #20]
	val = 1.0 + angle*m;
 8004b5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b70:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	ee07 3a90 	vmov	s15, r3
}
 8004b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}
 8004b84:	f3af 8000 	nop.w
 8004b88:	6dc8bdc4 	.word	0x6dc8bdc4
 8004b8c:	3fd45f30 	.word	0x3fd45f30
 8004b90:	40c90fdb 	.word	0x40c90fdb

08004b94 <gen_triangle_angle>:
	// Make sure difference can be negative.
	return amp + (m * (int32_t)(samples_half_cycle - current_sample));
}

float32_t gen_triangle_angle(float32_t angle)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 8004baa:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004c14 <gen_triangle_angle+0x80>
 8004bae:	ed97 0a01 	vldr	s0, [r7, #4]
 8004bb2:	f000 f8b9 	bl	8004d28 <fast_fmod>
 8004bb6:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <gen_triangle_angle+0x84>)
 8004bbc:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8004bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bc2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004c1c <gen_triangle_angle+0x88>
 8004bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	d50d      	bpl.n	8004bec <gen_triangle_angle+0x58>
	{
		val = -1 + m*angle;
 8004bd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004be4:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e00c      	b.n	8004c06 <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3 - m*angle;
 8004bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c00:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	ee07 3a90 	vmov	s15, r3
}
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40c90fdb 	.word	0x40c90fdb
 8004c18:	3f22f983 	.word	0x3f22f983
 8004c1c:	40490fdb 	.word	0x40490fdb

08004c20 <gen_triangle_integral_angle>:
	return -(result*result);
}

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 8004c36:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004d1c <gen_triangle_integral_angle+0xfc>
 8004c3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c3e:	f000 f873 	bl	8004d28 <fast_fmod>
 8004c42:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <gen_triangle_integral_angle+0x100>)
 8004c48:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8004c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c4e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004d24 <gen_triangle_integral_angle+0x104>
 8004c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	d528      	bpl.n	8004cae <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 8004c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c60:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004d24 <gen_triangle_integral_angle+0x104>
 8004c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d51f      	bpl.n	8004cae <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 8004c6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c72:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004c7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2;			// Double it.
 8004c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c96:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1;			// Shift it down
 8004c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ca6:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	e02e      	b.n	8004d0c <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 8004cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004d24 <gen_triangle_integral_angle+0x104>
 8004cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cba:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 8004cbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cca:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004cce:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1 - val;			// Turn it upside down
 8004cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ce2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cea:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2;			// Double it
 8004cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004cf6:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1;			// Shift it down
 8004cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d06:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	ee07 3a90 	vmov	s15, r3
}
 8004d10:	eeb0 0a67 	vmov.f32	s0, s15
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40c90fdb 	.word	0x40c90fdb
 8004d20:	3ea2f983 	.word	0x3ea2f983
 8004d24:	40490fdb 	.word	0x40490fdb

08004d28 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d32:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 8004d36:	edd7 6a01 	vldr	s13, [r7, #4]
 8004d3a:	ed97 7a00 	vldr	s14, [r7]
 8004d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d42:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d5a:	edd7 7a00 	vldr	s15, [r7]
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8004d62:	eeb0 0a67 	vmov.f32	s0, s15
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d76:	e003      	b.n	8004d80 <LoopCopyDataInit>

08004d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d7e:	3104      	adds	r1, #4

08004d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d80:	480b      	ldr	r0, [pc, #44]	; (8004db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d88:	d3f6      	bcc.n	8004d78 <CopyDataInit>
  ldr  r2, =_sbss
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d8c:	e002      	b.n	8004d94 <LoopFillZerobss>

08004d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d90:	f842 3b04 	str.w	r3, [r2], #4

08004d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d98:	d3f9      	bcc.n	8004d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d9a:	f000 f90f 	bl	8004fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d9e:	f000 fad5 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004da2:	f7fe fc51 	bl	8003648 <main>
  bx  lr    
 8004da6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004da8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8004dac:	080061b4 	.word	0x080061b4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004db4:	200001a0 	.word	0x200001a0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8004db8:	200001a0 	.word	0x200001a0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dbc:	20000610 	.word	0x20000610

08004dc0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc0:	e7fe      	b.n	8004dc0 <CAN1_RX0_IRQHandler>
	...

08004dc4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop

08004dd4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8004dd8:	e7fe      	b.n	8004dd8 <HardFault_Handler+0x4>
 8004dda:	bf00      	nop

08004ddc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8004de0:	e7fe      	b.n	8004de0 <MemManage_Handler+0x4>
 8004de2:	bf00      	nop

08004de4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8004de8:	e7fe      	b.n	8004de8 <BusFault_Handler+0x4>
 8004dea:	bf00      	nop

08004dec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8004df0:	e7fe      	b.n	8004df0 <UsageFault_Handler+0x4>
 8004df2:	bf00      	nop

08004df4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop

08004e04 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <EXTI0_IRQHandler>:


/*
 * interrupt handler for up button
 */
void EXTI0_IRQHandler(void){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8004e38:	2001      	movs	r0, #1
 8004e3a:	f7fc fbe1 	bl	8001600 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <EXTI0_IRQHandler+0x2c>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <EXTI0_IRQHandler+0x26>
		menubutton.button = up;
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <EXTI0_IRQHandler+0x2c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <EXTI0_IRQHandler+0x2c>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8004e52:	2101      	movs	r1, #1
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <EXTI0_IRQHandler+0x30>)
 8004e56:	f7fd fb37 	bl	80024c8 <TIM_Cmd>
	}
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200005ec 	.word	0x200005ec
 8004e64:	40000400 	.word	0x40000400

08004e68 <EXTI1_IRQHandler>:


/*
 * interrupt handler for down button
 */
void EXTI1_IRQHandler(void){
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f7fc fbc7 	bl	8001600 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <EXTI1_IRQHandler+0x2c>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <EXTI1_IRQHandler+0x26>
		menubutton.button = down;
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <EXTI1_IRQHandler+0x2c>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <EXTI1_IRQHandler+0x2c>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8004e86:	2101      	movs	r1, #1
 8004e88:	4803      	ldr	r0, [pc, #12]	; (8004e98 <EXTI1_IRQHandler+0x30>)
 8004e8a:	f7fd fb1d 	bl	80024c8 <TIM_Cmd>
	}
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200005ec 	.word	0x200005ec
 8004e98:	40000400 	.word	0x40000400

08004e9c <EXTI2_IRQHandler>:


/*
 * interrupt handler for back button
 */
void EXTI2_IRQHandler(void){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 8004ea0:	2004      	movs	r0, #4
 8004ea2:	f7fc fbad 	bl	8001600 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <EXTI2_IRQHandler+0x2c>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <EXTI2_IRQHandler+0x26>
		menubutton.button = back;
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <EXTI2_IRQHandler+0x2c>)
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <EXTI2_IRQHandler+0x2c>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <EXTI2_IRQHandler+0x30>)
 8004ebe:	f7fd fb03 	bl	80024c8 <TIM_Cmd>
	}

}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200005ec 	.word	0x200005ec
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <EXTI3_IRQHandler>:


/*
 * interrupt handler for enter button
 */
void EXTI3_IRQHandler(void){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8004ed4:	2008      	movs	r0, #8
 8004ed6:	f7fc fb93 	bl	8001600 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <EXTI3_IRQHandler+0x2c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <EXTI3_IRQHandler+0x26>
		menubutton.button = enter;
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <EXTI3_IRQHandler+0x2c>)
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <EXTI3_IRQHandler+0x2c>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4803      	ldr	r0, [pc, #12]	; (8004f00 <EXTI3_IRQHandler+0x30>)
 8004ef2:	f7fd fae9 	bl	80024c8 <TIM_Cmd>
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200005ec 	.word	0x200005ec
 8004f00:	40000400 	.word	0x40000400

08004f04 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector

void EXTI9_5_IRQHandler(void){
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8004f08:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8004f0c:	f7fc fb78 	bl	8001600 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <EXTI9_5_IRQHandler+0x28>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <EXTI9_5_IRQHandler+0x28>)
 8004f22:	f7fd fad1 	bl	80024c8 <TIM_Cmd>
	}
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40000800 	.word	0x40000800

08004f30 <EXTI15_10_IRQHandler>:




//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8004f34:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8004f38:	f7fc fb62 	bl	8001600 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <EXTI15_10_IRQHandler+0x28>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d103      	bne.n	8004f52 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <EXTI15_10_IRQHandler+0x28>)
 8004f4e:	f7fd fabb 	bl	80024c8 <TIM_Cmd>
	}
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40000800 	.word	0x40000800

08004f5c <TIM3_IRQHandler>:



// Timer for limiting button pushes 100ms
void TIM3_IRQHandler(){
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM3, DISABLE);								//stop timer
 8004f60:	2100      	movs	r1, #0
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <TIM3_IRQHandler+0x20>)
 8004f64:	f7fd fab0 	bl	80024c8 <TIM_Cmd>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 8004f68:	2101      	movs	r1, #1
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <TIM3_IRQHandler+0x20>)
 8004f6c:	f7fd faf0 	bl	8002550 <TIM_ClearITPendingBit>
		menubutton.button_state = NOT_ACTIVE;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <TIM3_IRQHandler+0x24>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	605a      	str	r2, [r3, #4]
		//handle button push havent quite figured it out yet

}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	200005ec 	.word	0x200005ec

08004f84 <TIM4_IRQHandler>:


// Timer for debouncing selectors 50ms
void TIM4_IRQHandler(){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
		TIM_Cmd(TIM4, DISABLE);								//stop timer
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <TIM4_IRQHandler+0x1c>)
 8004f8c:	f7fd fa9c 	bl	80024c8 <TIM_Cmd>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8004f90:	2101      	movs	r1, #1
 8004f92:	4803      	ldr	r0, [pc, #12]	; (8004fa0 <TIM4_IRQHandler+0x1c>)
 8004f94:	f7fd fadc 	bl	8002550 <TIM_ClearITPendingBit>
		update_selector_state();							//update state
 8004f98:	f000 f8da 	bl	8005150 <update_selector_state>

}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40000800 	.word	0x40000800

08004fa4 <ADC_IRQHandler>:

// set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
        /* acknowledge interrupt */
        ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8004fa8:	f240 2105 	movw	r1, #517	; 0x205
 8004fac:	4802      	ldr	r0, [pc, #8]	; (8004fb8 <ADC_IRQHandler+0x14>)
 8004fae:	f7fc f805 	bl	8000fbc <ADC_ClearITPendingBit>
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40012000 	.word	0x40012000

08004fbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <SystemInit+0x60>)
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <SystemInit+0x60>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <SystemInit+0x64>)
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <SystemInit+0x64>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <SystemInit+0x64>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <SystemInit+0x64>)
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <SystemInit+0x64>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <SystemInit+0x64>)
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <SystemInit+0x68>)
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <SystemInit+0x64>)
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <SystemInit+0x64>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <SystemInit+0x64>)
 8005006:	2200      	movs	r2, #0
 8005008:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800500a:	f000 f80d 	bl	8005028 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800500e:	4b03      	ldr	r3, [pc, #12]	; (800501c <SystemInit+0x60>)
 8005010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005014:	609a      	str	r2, [r3, #8]
#endif
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	e000ed00 	.word	0xe000ed00
 8005020:	40023800 	.word	0x40023800
 8005024:	24003010 	.word	0x24003010

08005028 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	2300      	movs	r3, #0
 8005034:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005036:	4a41      	ldr	r2, [pc, #260]	; (800513c <SetSysClock+0x114>)
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <SetSysClock+0x114>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005042:	4b3e      	ldr	r3, [pc, #248]	; (800513c <SetSysClock+0x114>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3301      	adds	r3, #1
 8005050:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <SetSysClock+0x38>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800505e:	d1f0      	bne.n	8005042 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <SetSysClock+0x114>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800506c:	2301      	movs	r3, #1
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	e001      	b.n	8005076 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d142      	bne.n	8005102 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <SetSysClock+0x114>)
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <SetSysClock+0x114>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005088:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <SetSysClock+0x118>)
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <SetSysClock+0x118>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005092:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <SetSysClock+0x114>)
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <SetSysClock+0x114>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <SetSysClock+0x114>)
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <SetSysClock+0x114>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80050a8:	4a24      	ldr	r2, [pc, #144]	; (800513c <SetSysClock+0x114>)
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <SetSysClock+0x114>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80050b2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <SetSysClock+0x114>)
 80050b6:	4a23      	ldr	r2, [pc, #140]	; (8005144 <SetSysClock+0x11c>)
 80050b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80050ba:	4a20      	ldr	r2, [pc, #128]	; (800513c <SetSysClock+0x114>)
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <SetSysClock+0x114>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80050c6:	bf00      	nop
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <SetSysClock+0x114>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f9      	beq.n	80050c8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <SetSysClock+0x120>)
 80050d6:	f240 6205 	movw	r2, #1541	; 0x605
 80050da:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <SetSysClock+0x114>)
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <SetSysClock+0x114>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <SetSysClock+0x114>)
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <SetSysClock+0x114>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80050f4:	bf00      	nop
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <SetSysClock+0x114>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d1f9      	bne.n	80050f6 <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <SetSysClock+0x114>)
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <SetSysClock+0x114>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800510c:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 800510e:	4b0b      	ldr	r3, [pc, #44]	; (800513c <SetSysClock+0x114>)
 8005110:	4a0e      	ldr	r2, [pc, #56]	; (800514c <SetSysClock+0x124>)
 8005112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <SetSysClock+0x114>)
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <SetSysClock+0x114>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8005122:	bf00      	nop
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <SetSysClock+0x114>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f9      	beq.n	8005124 <SetSysClock+0xfc>
  {
  }
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40023800 	.word	0x40023800
 8005140:	40007000 	.word	0x40007000
 8005144:	07405408 	.word	0x07405408
 8005148:	40023c00 	.word	0x40023c00
 800514c:	30004080 	.word	0x30004080

08005150 <update_selector_state>:

/*
 * Gets and updated the state of both the selector rotary switches
 * This funtion is called by the tim2 interrupt handler
 */
void update_selector_state (){
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7) == 1){
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	483b      	ldr	r0, [pc, #236]	; (8005244 <update_selector_state+0xf4>)
 8005158:	f7fc fb0a 	bl	8001770 <GPIO_ReadInputDataBit>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d103      	bne.n	800516a <update_selector_state+0x1a>
		vfo_state = sine;
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <update_selector_state+0xf8>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e02e      	b.n	80051c8 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8) == 1){
 800516a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800516e:	4835      	ldr	r0, [pc, #212]	; (8005244 <update_selector_state+0xf4>)
 8005170:	f7fc fafe 	bl	8001770 <GPIO_ReadInputDataBit>
 8005174:	4603      	mov	r3, r0
 8005176:	2b01      	cmp	r3, #1
 8005178:	d103      	bne.n	8005182 <update_selector_state+0x32>
		vfo_state = sawtooth;
 800517a:	4b33      	ldr	r3, [pc, #204]	; (8005248 <update_selector_state+0xf8>)
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e022      	b.n	80051c8 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9) == 1){
 8005182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005186:	482f      	ldr	r0, [pc, #188]	; (8005244 <update_selector_state+0xf4>)
 8005188:	f7fc faf2 	bl	8001770 <GPIO_ReadInputDataBit>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d103      	bne.n	800519a <update_selector_state+0x4a>
		vfo_state = square;
 8005192:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <update_selector_state+0xf8>)
 8005194:	2202      	movs	r2, #2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e016      	b.n	80051c8 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_10) == 1){
 800519a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800519e:	4829      	ldr	r0, [pc, #164]	; (8005244 <update_selector_state+0xf4>)
 80051a0:	f7fc fae6 	bl	8001770 <GPIO_ReadInputDataBit>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d103      	bne.n	80051b2 <update_selector_state+0x62>
		vfo_state = triangle;
 80051aa:	4b27      	ldr	r3, [pc, #156]	; (8005248 <update_selector_state+0xf8>)
 80051ac:	2203      	movs	r2, #3
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e00a      	b.n	80051c8 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11) == 1){
 80051b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051b6:	4823      	ldr	r0, [pc, #140]	; (8005244 <update_selector_state+0xf4>)
 80051b8:	f7fc fada 	bl	8001770 <GPIO_ReadInputDataBit>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d102      	bne.n	80051c8 <update_selector_state+0x78>
		vfo_state = other2;
 80051c2:	4b21      	ldr	r3, [pc, #132]	; (8005248 <update_selector_state+0xf8>)
 80051c4:	2204      	movs	r2, #4
 80051c6:	701a      	strb	r2, [r3, #0]
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
 80051c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051cc:	481d      	ldr	r0, [pc, #116]	; (8005244 <update_selector_state+0xf4>)
 80051ce:	f7fc facf 	bl	8001770 <GPIO_ReadInputDataBit>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d103      	bne.n	80051e0 <update_selector_state+0x90>
		lfo_state = sine;
 80051d8:	4b1c      	ldr	r3, [pc, #112]	; (800524c <update_selector_state+0xfc>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80051de:	e02e      	b.n	800523e <update_selector_state+0xee>
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
 80051e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051e4:	4817      	ldr	r0, [pc, #92]	; (8005244 <update_selector_state+0xf4>)
 80051e6:	f7fc fac3 	bl	8001770 <GPIO_ReadInputDataBit>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d103      	bne.n	80051f8 <update_selector_state+0xa8>
		lfo_state = sawtooth;
 80051f0:	4b16      	ldr	r3, [pc, #88]	; (800524c <update_selector_state+0xfc>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 80051f6:	e022      	b.n	800523e <update_selector_state+0xee>

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
 80051f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051fc:	4811      	ldr	r0, [pc, #68]	; (8005244 <update_selector_state+0xf4>)
 80051fe:	f7fc fab7 	bl	8001770 <GPIO_ReadInputDataBit>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d103      	bne.n	8005210 <update_selector_state+0xc0>
		lfo_state = square;
 8005208:	4b10      	ldr	r3, [pc, #64]	; (800524c <update_selector_state+0xfc>)
 800520a:	2202      	movs	r2, #2
 800520c:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 800520e:	e016      	b.n	800523e <update_selector_state+0xee>
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
 8005210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005214:	480b      	ldr	r0, [pc, #44]	; (8005244 <update_selector_state+0xf4>)
 8005216:	f7fc faab 	bl	8001770 <GPIO_ReadInputDataBit>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d103      	bne.n	8005228 <update_selector_state+0xd8>
		lfo_state = triangle;
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <update_selector_state+0xfc>)
 8005222:	2203      	movs	r2, #3
 8005224:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
		lfo_state = other2;
	}
}
 8005226:	e00a      	b.n	800523e <update_selector_state+0xee>
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13) == 1){
 8005228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522c:	4808      	ldr	r0, [pc, #32]	; (8005250 <update_selector_state+0x100>)
 800522e:	f7fc fa9f 	bl	8001770 <GPIO_ReadInputDataBit>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d102      	bne.n	800523e <update_selector_state+0xee>
		lfo_state = other2;
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <update_selector_state+0xfc>)
 800523a:	2204      	movs	r2, #4
 800523c:	701a      	strb	r2, [r3, #0]
	}
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000
 8005248:	200005e8 	.word	0x200005e8
 800524c:	200005e9 	.word	0x200005e9
 8005250:	40020800 	.word	0x40020800

08005254 <arm_sin_f32>:
 8005254:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80052c0 <arm_sin_f32+0x6c>
 8005258:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800525c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005264:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8005268:	d504      	bpl.n	8005274 <arm_sin_f32+0x20>
 800526a:	ee17 3a90 	vmov	r3, s15
 800526e:	3b01      	subs	r3, #1
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005278:	eddf 6a12 	vldr	s13, [pc, #72]	; 80052c4 <arm_sin_f32+0x70>
 800527c:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <arm_sin_f32+0x74>)
 800527e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005282:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800528a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800528e:	ee16 3a90 	vmov	r3, s13
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	ee06 3a90 	vmov	s13, r3
 800529a:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800529e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80052a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052a6:	edd1 6a00 	vldr	s13, [r1]
 80052aa:	ed91 7a01 	vldr	s14, [r1, #4]
 80052ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80052ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052be:	4770      	bx	lr
 80052c0:	3e22f983 	.word	0x3e22f983
 80052c4:	44000000 	.word	0x44000000
 80052c8:	080059a0 	.word	0x080059a0

080052cc <arm_cos_f32>:
 80052cc:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005340 <arm_cos_f32+0x74>
 80052d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80052d4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80052d8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80052dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052e8:	d504      	bpl.n	80052f4 <arm_cos_f32+0x28>
 80052ea:	ee17 3a90 	vmov	r3, s15
 80052ee:	3b01      	subs	r3, #1
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005344 <arm_cos_f32+0x78>
 80052fc:	4a12      	ldr	r2, [pc, #72]	; (8005348 <arm_cos_f32+0x7c>)
 80052fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005306:	ee20 0a26 	vmul.f32	s0, s0, s13
 800530a:	eefc 6ac0 	vcvt.u32.f32	s13, s0
 800530e:	ee16 3a90 	vmov	r3, s13
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee06 3a90 	vmov	s13, r3
 800531a:	eef8 7a66 	vcvt.f32.u32	s15, s13
 800531e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005322:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005326:	edd1 6a00 	vldr	s13, [r1]
 800532a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800532e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005332:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800533e:	4770      	bx	lr
 8005340:	3e22f983 	.word	0x3e22f983
 8005344:	44000000 	.word	0x44000000
 8005348:	080059a0 	.word	0x080059a0

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <__libc_init_array+0x3c>)
 8005350:	4c0e      	ldr	r4, [pc, #56]	; (800538c <__libc_init_array+0x40>)
 8005352:	1ae4      	subs	r4, r4, r3
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2500      	movs	r5, #0
 8005358:	461e      	mov	r6, r3
 800535a:	42a5      	cmp	r5, r4
 800535c:	d004      	beq.n	8005368 <__libc_init_array+0x1c>
 800535e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005362:	4798      	blx	r3
 8005364:	3501      	adds	r5, #1
 8005366:	e7f8      	b.n	800535a <__libc_init_array+0xe>
 8005368:	f000 fb02 	bl	8005970 <_init>
 800536c:	4c08      	ldr	r4, [pc, #32]	; (8005390 <__libc_init_array+0x44>)
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <__libc_init_array+0x48>)
 8005370:	1ae4      	subs	r4, r4, r3
 8005372:	10a4      	asrs	r4, r4, #2
 8005374:	2500      	movs	r5, #0
 8005376:	461e      	mov	r6, r3
 8005378:	42a5      	cmp	r5, r4
 800537a:	d004      	beq.n	8005386 <__libc_init_array+0x3a>
 800537c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005380:	4798      	blx	r3
 8005382:	3501      	adds	r5, #1
 8005384:	e7f8      	b.n	8005378 <__libc_init_array+0x2c>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	080061ac 	.word	0x080061ac
 800538c:	080061ac 	.word	0x080061ac
 8005390:	080061b0 	.word	0x080061b0
 8005394:	080061ac 	.word	0x080061ac

08005398 <log10>:
 8005398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539a:	ed2d 8b02 	vpush	{d8}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	ec55 4b10 	vmov	r4, r5, d0
 80053a4:	f000 f878 	bl	8005498 <__ieee754_log10>
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <log10+0xe8>)
 80053aa:	eeb0 8a40 	vmov.f32	s16, s0
 80053ae:	eef0 8a60 	vmov.f32	s17, s1
 80053b2:	f993 6000 	ldrsb.w	r6, [r3]
 80053b6:	1c73      	adds	r3, r6, #1
 80053b8:	d05a      	beq.n	8005470 <log10+0xd8>
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb fb53 	bl	8000a6c <__aeabi_dcmpun>
 80053c6:	4607      	mov	r7, r0
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d151      	bne.n	8005470 <log10+0xd8>
 80053cc:	2200      	movs	r2, #0
 80053ce:	2300      	movs	r3, #0
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fb fb2c 	bl	8000a30 <__aeabi_dcmple>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d049      	beq.n	8005470 <log10+0xd8>
 80053dc:	4b29      	ldr	r3, [pc, #164]	; (8005484 <log10+0xec>)
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	9708      	str	r7, [sp, #32]
 80053e2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80053e6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80053ea:	b966      	cbnz	r6, 8005406 <log10+0x6e>
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <log10+0xf0>)
 80053ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80053f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053f6:	4620      	mov	r0, r4
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7fb fb03 	bl	8000a08 <__aeabi_dcmpeq>
 8005402:	b980      	cbnz	r0, 8005426 <log10+0x8e>
 8005404:	e01a      	b.n	800543c <log10+0xa4>
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <log10+0xf4>)
 8005408:	2200      	movs	r2, #0
 800540a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800540e:	4620      	mov	r0, r4
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	4629      	mov	r1, r5
 8005416:	f7fb faf7 	bl	8000a08 <__aeabi_dcmpeq>
 800541a:	b178      	cbz	r0, 800543c <log10+0xa4>
 800541c:	2302      	movs	r3, #2
 800541e:	429e      	cmp	r6, r3
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	d006      	beq.n	8005432 <log10+0x9a>
 8005424:	e001      	b.n	800542a <log10+0x92>
 8005426:	2302      	movs	r3, #2
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4668      	mov	r0, sp
 800542c:	f000 f8c2 	bl	80055b4 <matherr>
 8005430:	b9a8      	cbnz	r0, 800545e <log10+0xc6>
 8005432:	f000 fa97 	bl	8005964 <__errno>
 8005436:	2322      	movs	r3, #34	; 0x22
 8005438:	6003      	str	r3, [r0, #0]
 800543a:	e010      	b.n	800545e <log10+0xc6>
 800543c:	2301      	movs	r3, #1
 800543e:	2e02      	cmp	r6, #2
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	d003      	beq.n	800544c <log10+0xb4>
 8005444:	4668      	mov	r0, sp
 8005446:	f000 f8b5 	bl	80055b4 <matherr>
 800544a:	b918      	cbnz	r0, 8005454 <log10+0xbc>
 800544c:	f000 fa8a 	bl	8005964 <__errno>
 8005450:	2321      	movs	r3, #33	; 0x21
 8005452:	6003      	str	r3, [r0, #0]
 8005454:	480e      	ldr	r0, [pc, #56]	; (8005490 <log10+0xf8>)
 8005456:	f000 f8af 	bl	80055b8 <nan>
 800545a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800545e:	9b08      	ldr	r3, [sp, #32]
 8005460:	b11b      	cbz	r3, 800546a <log10+0xd2>
 8005462:	f000 fa7f 	bl	8005964 <__errno>
 8005466:	9b08      	ldr	r3, [sp, #32]
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	ed9d 0b06 	vldr	d0, [sp, #24]
 800546e:	e003      	b.n	8005478 <log10+0xe0>
 8005470:	eeb0 0a48 	vmov.f32	s0, s16
 8005474:	eef0 0a68 	vmov.f32	s1, s17
 8005478:	b00b      	add	sp, #44	; 0x2c
 800547a:	ecbd 8b02 	vpop	{d8}
 800547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005480:	2000019c 	.word	0x2000019c
 8005484:	080061a6 	.word	0x080061a6
 8005488:	c7efffff 	.word	0xc7efffff
 800548c:	fff00000 	.word	0xfff00000
 8005490:	080061ab 	.word	0x080061ab
 8005494:	00000000 	.word	0x00000000

08005498 <__ieee754_log10>:
 8005498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800549c:	ec55 4b10 	vmov	r4, r5, d0
 80054a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80054a4:	ee10 2a10 	vmov	r2, s0
 80054a8:	462b      	mov	r3, r5
 80054aa:	da23      	bge.n	80054f4 <__ieee754_log10+0x5c>
 80054ac:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 80054b0:	430a      	orrs	r2, r1
 80054b2:	d104      	bne.n	80054be <__ieee754_log10+0x26>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	2000      	movs	r0, #0
 80054ba:	493b      	ldr	r1, [pc, #236]	; (80055a8 <__ieee754_log10+0x110>)
 80054bc:	e00a      	b.n	80054d4 <__ieee754_log10+0x3c>
 80054be:	2d00      	cmp	r5, #0
 80054c0:	da0b      	bge.n	80054da <__ieee754_log10+0x42>
 80054c2:	ee10 2a10 	vmov	r2, s0
 80054c6:	462b      	mov	r3, r5
 80054c8:	4620      	mov	r0, r4
 80054ca:	4629      	mov	r1, r5
 80054cc:	f7fa fe80 	bl	80001d0 <__aeabi_dsub>
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	f7fb f95a 	bl	800078c <__aeabi_ddiv>
 80054d8:	e054      	b.n	8005584 <__ieee754_log10+0xec>
 80054da:	2200      	movs	r2, #0
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <__ieee754_log10+0x114>)
 80054de:	4629      	mov	r1, r5
 80054e0:	ee10 0a10 	vmov	r0, s0
 80054e4:	f7fb f828 	bl	8000538 <__aeabi_dmul>
 80054e8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80054ec:	4604      	mov	r4, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	460b      	mov	r3, r1
 80054f2:	e000      	b.n	80054f6 <__ieee754_log10+0x5e>
 80054f4:	2200      	movs	r2, #0
 80054f6:	492e      	ldr	r1, [pc, #184]	; (80055b0 <__ieee754_log10+0x118>)
 80054f8:	428b      	cmp	r3, r1
 80054fa:	dd04      	ble.n	8005506 <__ieee754_log10+0x6e>
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	4620      	mov	r0, r4
 8005502:	4629      	mov	r1, r5
 8005504:	e03c      	b.n	8005580 <__ieee754_log10+0xe8>
 8005506:	1518      	asrs	r0, r3, #20
 8005508:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800550c:	4410      	add	r0, r2
 800550e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005512:	4448      	add	r0, r9
 8005514:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005518:	f7fa ffa8 	bl	800046c <__aeabi_i2d>
 800551c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005520:	3303      	adds	r3, #3
 8005522:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005526:	ec45 4b10 	vmov	d0, r4, r5
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	f000 f84b 	bl	80055c8 <__ieee754_log>
 8005532:	a317      	add	r3, pc, #92	; (adr r3, 8005590 <__ieee754_log10+0xf8>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	ed8d 0b00 	vstr	d0, [sp]
 8005540:	f7fa fffa 	bl	8000538 <__aeabi_dmul>
 8005544:	ed9d 0b00 	vldr	d0, [sp]
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	a312      	add	r3, pc, #72	; (adr r3, 8005598 <__ieee754_log10+0x100>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	ec51 0b10 	vmov	r0, r1, d0
 8005556:	f7fa ffef 	bl	8000538 <__aeabi_dmul>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4620      	mov	r0, r4
 8005560:	4629      	mov	r1, r5
 8005562:	f7fa fe37 	bl	80001d4 <__adddf3>
 8005566:	a30e      	add	r3, pc, #56	; (adr r3, 80055a0 <__ieee754_log10+0x108>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	4604      	mov	r4, r0
 800556e:	460d      	mov	r5, r1
 8005570:	4630      	mov	r0, r6
 8005572:	4639      	mov	r1, r7
 8005574:	f7fa ffe0 	bl	8000538 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4620      	mov	r0, r4
 800557e:	4629      	mov	r1, r5
 8005580:	f7fa fe28 	bl	80001d4 <__adddf3>
 8005584:	ec41 0b10 	vmov	d0, r0, r1
 8005588:	b003      	add	sp, #12
 800558a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800558e:	bf00      	nop
 8005590:	11f12b36 	.word	0x11f12b36
 8005594:	3d59fef3 	.word	0x3d59fef3
 8005598:	1526e50e 	.word	0x1526e50e
 800559c:	3fdbcb7b 	.word	0x3fdbcb7b
 80055a0:	509f6000 	.word	0x509f6000
 80055a4:	3fd34413 	.word	0x3fd34413
 80055a8:	c3500000 	.word	0xc3500000
 80055ac:	43500000 	.word	0x43500000
 80055b0:	7fefffff 	.word	0x7fefffff

080055b4 <matherr>:
 80055b4:	2000      	movs	r0, #0
 80055b6:	4770      	bx	lr

080055b8 <nan>:
 80055b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80055c0 <nan+0x8>
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	00000000 	.word	0x00000000
 80055c4:	7ff80000 	.word	0x7ff80000

080055c8 <__ieee754_log>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	ec51 0b10 	vmov	r0, r1, d0
 80055d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80055d4:	b087      	sub	sp, #28
 80055d6:	ee10 3a10 	vmov	r3, s0
 80055da:	460d      	mov	r5, r1
 80055dc:	da1c      	bge.n	8005618 <__ieee754_log+0x50>
 80055de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80055e2:	4313      	orrs	r3, r2
 80055e4:	d104      	bne.n	80055f0 <__ieee754_log+0x28>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2300      	movs	r3, #0
 80055ea:	2000      	movs	r0, #0
 80055ec:	49d4      	ldr	r1, [pc, #848]	; (8005940 <__ieee754_log+0x378>)
 80055ee:	e008      	b.n	8005602 <__ieee754_log+0x3a>
 80055f0:	2900      	cmp	r1, #0
 80055f2:	da09      	bge.n	8005608 <__ieee754_log+0x40>
 80055f4:	ee10 2a10 	vmov	r2, s0
 80055f8:	460b      	mov	r3, r1
 80055fa:	f7fa fde9 	bl	80001d0 <__aeabi_dsub>
 80055fe:	2200      	movs	r2, #0
 8005600:	2300      	movs	r3, #0
 8005602:	f7fb f8c3 	bl	800078c <__aeabi_ddiv>
 8005606:	e1a7      	b.n	8005958 <__ieee754_log+0x390>
 8005608:	4bce      	ldr	r3, [pc, #824]	; (8005944 <__ieee754_log+0x37c>)
 800560a:	2200      	movs	r2, #0
 800560c:	f7fa ff94 	bl	8000538 <__aeabi_dmul>
 8005610:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005614:	460d      	mov	r5, r1
 8005616:	e000      	b.n	800561a <__ieee754_log+0x52>
 8005618:	2300      	movs	r3, #0
 800561a:	4acb      	ldr	r2, [pc, #812]	; (8005948 <__ieee754_log+0x380>)
 800561c:	4295      	cmp	r5, r2
 800561e:	dd02      	ble.n	8005626 <__ieee754_log+0x5e>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	e03e      	b.n	80056a4 <__ieee754_log+0xdc>
 8005626:	152c      	asrs	r4, r5, #20
 8005628:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800562c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005630:	441c      	add	r4, r3
 8005632:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005636:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800563a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005642:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005646:	ea42 0105 	orr.w	r1, r2, r5
 800564a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800564e:	2200      	movs	r2, #0
 8005650:	4bbe      	ldr	r3, [pc, #760]	; (800594c <__ieee754_log+0x384>)
 8005652:	f7fa fdbd 	bl	80001d0 <__aeabi_dsub>
 8005656:	1cab      	adds	r3, r5, #2
 8005658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800565c:	2b02      	cmp	r3, #2
 800565e:	4682      	mov	sl, r0
 8005660:	468b      	mov	fp, r1
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	dc53      	bgt.n	8005710 <__ieee754_log+0x148>
 8005668:	2300      	movs	r3, #0
 800566a:	f7fb f9cd 	bl	8000a08 <__aeabi_dcmpeq>
 800566e:	b1e0      	cbz	r0, 80056aa <__ieee754_log+0xe2>
 8005670:	2c00      	cmp	r4, #0
 8005672:	f000 816f 	beq.w	8005954 <__ieee754_log+0x38c>
 8005676:	4620      	mov	r0, r4
 8005678:	f7fa fef8 	bl	800046c <__aeabi_i2d>
 800567c:	a39c      	add	r3, pc, #624	; (adr r3, 80058f0 <__ieee754_log+0x328>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	4606      	mov	r6, r0
 8005684:	460f      	mov	r7, r1
 8005686:	f7fa ff57 	bl	8000538 <__aeabi_dmul>
 800568a:	a39b      	add	r3, pc, #620	; (adr r3, 80058f8 <__ieee754_log+0x330>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	4604      	mov	r4, r0
 8005692:	460d      	mov	r5, r1
 8005694:	4630      	mov	r0, r6
 8005696:	4639      	mov	r1, r7
 8005698:	f7fa ff4e 	bl	8000538 <__aeabi_dmul>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fa fd96 	bl	80001d4 <__adddf3>
 80056a8:	e156      	b.n	8005958 <__ieee754_log+0x390>
 80056aa:	a395      	add	r3, pc, #596	; (adr r3, 8005900 <__ieee754_log+0x338>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fa ff40 	bl	8000538 <__aeabi_dmul>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	2000      	movs	r0, #0
 80056be:	49a4      	ldr	r1, [pc, #656]	; (8005950 <__ieee754_log+0x388>)
 80056c0:	f7fa fd86 	bl	80001d0 <__aeabi_dsub>
 80056c4:	4652      	mov	r2, sl
 80056c6:	4606      	mov	r6, r0
 80056c8:	460f      	mov	r7, r1
 80056ca:	465b      	mov	r3, fp
 80056cc:	4650      	mov	r0, sl
 80056ce:	4659      	mov	r1, fp
 80056d0:	f7fa ff32 	bl	8000538 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa ff2c 	bl	8000538 <__aeabi_dmul>
 80056e0:	4606      	mov	r6, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	b914      	cbnz	r4, 80056ec <__ieee754_log+0x124>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	e0d0      	b.n	800588e <__ieee754_log+0x2c6>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fa febd 	bl	800046c <__aeabi_i2d>
 80056f2:	a37f      	add	r3, pc, #508	; (adr r3, 80058f0 <__ieee754_log+0x328>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	4680      	mov	r8, r0
 80056fa:	4689      	mov	r9, r1
 80056fc:	f7fa ff1c 	bl	8000538 <__aeabi_dmul>
 8005700:	a37d      	add	r3, pc, #500	; (adr r3, 80058f8 <__ieee754_log+0x330>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	4604      	mov	r4, r0
 8005708:	460d      	mov	r5, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	e0db      	b.n	80058c8 <__ieee754_log+0x300>
 8005710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005714:	f7fa fd5e 	bl	80001d4 <__adddf3>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4650      	mov	r0, sl
 800571e:	4659      	mov	r1, fp
 8005720:	f7fb f834 	bl	800078c <__aeabi_ddiv>
 8005724:	e9cd 0100 	strd	r0, r1, [sp]
 8005728:	4620      	mov	r0, r4
 800572a:	f7fa fe9f 	bl	800046c <__aeabi_i2d>
 800572e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f7fa fefd 	bl	8000538 <__aeabi_dmul>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005746:	f7fa fef7 	bl	8000538 <__aeabi_dmul>
 800574a:	a36f      	add	r3, pc, #444	; (adr r3, 8005908 <__ieee754_log+0x340>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	4606      	mov	r6, r0
 8005752:	460f      	mov	r7, r1
 8005754:	f7fa fef0 	bl	8000538 <__aeabi_dmul>
 8005758:	a36d      	add	r3, pc, #436	; (adr r3, 8005910 <__ieee754_log+0x348>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa fd39 	bl	80001d4 <__adddf3>
 8005762:	4632      	mov	r2, r6
 8005764:	463b      	mov	r3, r7
 8005766:	f7fa fee7 	bl	8000538 <__aeabi_dmul>
 800576a:	a36b      	add	r3, pc, #428	; (adr r3, 8005918 <__ieee754_log+0x350>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fd30 	bl	80001d4 <__adddf3>
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	f7fa fede 	bl	8000538 <__aeabi_dmul>
 800577c:	a368      	add	r3, pc, #416	; (adr r3, 8005920 <__ieee754_log+0x358>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd27 	bl	80001d4 <__adddf3>
 8005786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578a:	f7fa fed5 	bl	8000538 <__aeabi_dmul>
 800578e:	a366      	add	r3, pc, #408	; (adr r3, 8005928 <__ieee754_log+0x360>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005798:	4630      	mov	r0, r6
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa fecc 	bl	8000538 <__aeabi_dmul>
 80057a0:	a363      	add	r3, pc, #396	; (adr r3, 8005930 <__ieee754_log+0x368>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa fd15 	bl	80001d4 <__adddf3>
 80057aa:	4632      	mov	r2, r6
 80057ac:	463b      	mov	r3, r7
 80057ae:	f7fa fec3 	bl	8000538 <__aeabi_dmul>
 80057b2:	a361      	add	r3, pc, #388	; (adr r3, 8005938 <__ieee754_log+0x370>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd0c 	bl	80001d4 <__adddf3>
 80057bc:	4632      	mov	r2, r6
 80057be:	463b      	mov	r3, r7
 80057c0:	f7fa feba 	bl	8000538 <__aeabi_dmul>
 80057c4:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80057d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d4:	f7fa fcfe 	bl	80001d4 <__adddf3>
 80057d8:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80057dc:	3551      	adds	r5, #81	; 0x51
 80057de:	ea45 0508 	orr.w	r5, r5, r8
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	dd44      	ble.n	8005874 <__ieee754_log+0x2ac>
 80057ea:	2200      	movs	r2, #0
 80057ec:	4b58      	ldr	r3, [pc, #352]	; (8005950 <__ieee754_log+0x388>)
 80057ee:	4650      	mov	r0, sl
 80057f0:	4659      	mov	r1, fp
 80057f2:	f7fa fea1 	bl	8000538 <__aeabi_dmul>
 80057f6:	4652      	mov	r2, sl
 80057f8:	465b      	mov	r3, fp
 80057fa:	f7fa fe9d 	bl	8000538 <__aeabi_dmul>
 80057fe:	4680      	mov	r8, r0
 8005800:	4689      	mov	r9, r1
 8005802:	b984      	cbnz	r4, 8005826 <__ieee754_log+0x25e>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4630      	mov	r0, r6
 800580a:	4639      	mov	r1, r7
 800580c:	f7fa fce2 	bl	80001d4 <__adddf3>
 8005810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005814:	f7fa fe90 	bl	8000538 <__aeabi_dmul>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fa fcd6 	bl	80001d0 <__aeabi_dsub>
 8005824:	e031      	b.n	800588a <__ieee754_log+0x2c2>
 8005826:	a332      	add	r3, pc, #200	; (adr r3, 80058f0 <__ieee754_log+0x328>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005830:	f7fa fe82 	bl	8000538 <__aeabi_dmul>
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	4630      	mov	r0, r6
 800583e:	4639      	mov	r1, r7
 8005840:	f7fa fcc8 	bl	80001d4 <__adddf3>
 8005844:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005848:	f7fa fe76 	bl	8000538 <__aeabi_dmul>
 800584c:	a32a      	add	r3, pc, #168	; (adr r3, 80058f8 <__ieee754_log+0x330>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	f7fa fe6d 	bl	8000538 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fa fcb5 	bl	80001d4 <__adddf3>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	e02f      	b.n	80058d4 <__ieee754_log+0x30c>
 8005874:	b974      	cbnz	r4, 8005894 <__ieee754_log+0x2cc>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4650      	mov	r0, sl
 800587c:	4659      	mov	r1, fp
 800587e:	f7fa fca7 	bl	80001d0 <__aeabi_dsub>
 8005882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005886:	f7fa fe57 	bl	8000538 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4650      	mov	r0, sl
 8005890:	4659      	mov	r1, fp
 8005892:	e029      	b.n	80058e8 <__ieee754_log+0x320>
 8005894:	a316      	add	r3, pc, #88	; (adr r3, 80058f0 <__ieee754_log+0x328>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800589e:	f7fa fe4b 	bl	8000538 <__aeabi_dmul>
 80058a2:	4632      	mov	r2, r6
 80058a4:	463b      	mov	r3, r7
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	4650      	mov	r0, sl
 80058ac:	4659      	mov	r1, fp
 80058ae:	f7fa fc8f 	bl	80001d0 <__aeabi_dsub>
 80058b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058b6:	f7fa fe3f 	bl	8000538 <__aeabi_dmul>
 80058ba:	a30f      	add	r3, pc, #60	; (adr r3, 80058f8 <__ieee754_log+0x330>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	4606      	mov	r6, r0
 80058c2:	460f      	mov	r7, r1
 80058c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c8:	f7fa fe36 	bl	8000538 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fa fc7c 	bl	80001d0 <__aeabi_dsub>
 80058d8:	4652      	mov	r2, sl
 80058da:	465b      	mov	r3, fp
 80058dc:	f7fa fc78 	bl	80001d0 <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc72 	bl	80001d0 <__aeabi_dsub>
 80058ec:	e034      	b.n	8005958 <__ieee754_log+0x390>
 80058ee:	bf00      	nop
 80058f0:	fee00000 	.word	0xfee00000
 80058f4:	3fe62e42 	.word	0x3fe62e42
 80058f8:	35793c76 	.word	0x35793c76
 80058fc:	3dea39ef 	.word	0x3dea39ef
 8005900:	55555555 	.word	0x55555555
 8005904:	3fd55555 	.word	0x3fd55555
 8005908:	df3e5244 	.word	0xdf3e5244
 800590c:	3fc2f112 	.word	0x3fc2f112
 8005910:	96cb03de 	.word	0x96cb03de
 8005914:	3fc74664 	.word	0x3fc74664
 8005918:	94229359 	.word	0x94229359
 800591c:	3fd24924 	.word	0x3fd24924
 8005920:	55555593 	.word	0x55555593
 8005924:	3fe55555 	.word	0x3fe55555
 8005928:	d078c69f 	.word	0xd078c69f
 800592c:	3fc39a09 	.word	0x3fc39a09
 8005930:	1d8e78af 	.word	0x1d8e78af
 8005934:	3fcc71c5 	.word	0x3fcc71c5
 8005938:	9997fa04 	.word	0x9997fa04
 800593c:	3fd99999 	.word	0x3fd99999
 8005940:	c3500000 	.word	0xc3500000
 8005944:	43500000 	.word	0x43500000
 8005948:	7fefffff 	.word	0x7fefffff
 800594c:	3ff00000 	.word	0x3ff00000
 8005950:	3fe00000 	.word	0x3fe00000
 8005954:	2000      	movs	r0, #0
 8005956:	2100      	movs	r1, #0
 8005958:	ec41 0b10 	vmov	d0, r0, r1
 800595c:	b007      	add	sp, #28
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop

08005964 <__errno>:
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <__errno+0x8>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000198 	.word	0x20000198

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
